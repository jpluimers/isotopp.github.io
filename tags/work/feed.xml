<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>work on Die wunderbare Welt von Isotopp</title>
    <link>https://blog.koehntopp.info/tags/work.html</link>
    <description>Recent content in work on Die wunderbare Welt von Isotopp</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 26 Aug 2022 07:17:33 +0000</lastBuildDate><atom:link href="https://blog.koehntopp.info/tags/work/feed.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Spaces</title>
      <link>https://blog.koehntopp.info/2022/02/21/spaces.html</link>
      <pubDate>Mon, 21 Feb 2022 00:00:00 +0000</pubDate>
      
      <guid>https://blog.koehntopp.info/2022/02/21/spaces.html</guid>
      <description>&lt;p&gt;On the morning of Saturday, 22nd February 2020, two years ago, my colleagues and I woke up to the a message from the company that said:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;&amp;ldquo;Spaces&amp;rdquo; Closed for Operations 23 Feb - 28 Feb&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;During the morning hours of Saturday, 22 February, a fire occurred on the first floor of the &amp;ldquo;Spaces&amp;rdquo; building.
The fire was extinguished promptly but due to smoke and residue particles that spread throughout the building, we will not be able to open &amp;ldquo;Spaces&amp;rdquo; for at least one weeks time.
The closure of the building is required to ensure we fully inspect the building, our equipment, clean the office of all smoke damage and residue and more importantly, ensure we have a safe working environment to return to.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;It then took exactly one month instead of one week to fix that, and the planned reopening of the building fell on the exact day of the beginning of the COVID-19 lockdown.
So it has been today two years ago that I worked in an office the last time.&lt;/p&gt;
&lt;p&gt;I wrote into a company forum one year ago:&lt;/p&gt;
&lt;p&gt;We will be keeping this up until at least October, and I would be surprised if we are not going to be doing this for much longer the way this country handles Covid.&lt;/p&gt;
&lt;p&gt;Anyway, this is the cluttered mess of my Desk at home:&lt;/p&gt;
&lt;p&gt;&lt;p class=&#34;md__image&#34;&gt;
  &lt;img src=&#34;https://blog.koehntopp.info/uploads/2022/02/spaces-1.jpg&#34; alt=&#34;&#34;  /&gt;
&lt;/p&gt;

&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Home machine, and lab equipment to the left, company Mac on the desk during the daytime, bunch of books left and right. On top, the stick for my Internet Spaceship. Under the desk to the right, the file server and gaming box.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;It is very… lived in. I do change things too often for any pretty cabling or other cleanup to hold up.&lt;/p&gt;
&lt;p&gt;&lt;p class=&#34;md__image&#34;&gt;
  &lt;img src=&#34;https://blog.koehntopp.info/uploads/2022/02/spaces-2.jpg&#34; alt=&#34;&#34;  /&gt;
&lt;/p&gt;

&lt;/p&gt;
&lt;p&gt;&lt;em&gt;At least it has a decent view. That one hour commute to Spaces did pay off with a much more rural and spacious environment for home.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;But at least the view from my Desk is decent…&lt;/p&gt;
&lt;p&gt;I am sitting on a Dauphin Shape XXL, a proper office chair instead of some gaming thing, and the desk is an older IKEA standing desk, motorized.
I have cabled Internet at my desk, Wifi by Unifi in the house, and we have a 500/500 Mbit fiber connection at home, because faster Internet is not available where I live.&lt;/p&gt;
&lt;p&gt;Life ain’t bad.&lt;/p&gt;
&lt;p&gt;Never has been, actually.&lt;/p&gt;
&lt;p&gt;Going back, I always had a desk to work on at home. In Berlin, an entire room (which also had an office desk for my wife).&lt;/p&gt;
&lt;p&gt;&lt;p class=&#34;md__image&#34;&gt;
  &lt;img src=&#34;https://blog.koehntopp.info/uploads/2022/02/spaces-3.jpg&#34; alt=&#34;&#34;  /&gt;
&lt;/p&gt;

&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Geek wife doing geek wifey things on her Berlin desk.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;In Karlsruhe, my GF and I had work desks in an office room, and actually almost never did use our living room.
We sat back to back, because that makes it easy to roll over and look at the other screen to check things out and help.&lt;/p&gt;
&lt;p&gt;In Kiel we had an office/living room double room, but the living room really saw use only on Tuesdays ever other week for the Tuesday meeting, when a bunch of Geeks were coming around for cooking and talks.&lt;/p&gt;
&lt;p&gt;And even as a student, having a working desk was more important than a proper living room, actually.&lt;/p&gt;
&lt;p&gt;&lt;p class=&#34;md__image&#34;&gt;
  &lt;img src=&#34;https://blog.koehntopp.info/uploads/2022/02/spaces-4.jpg&#34; alt=&#34;&#34;  /&gt;
&lt;/p&gt;

&lt;/p&gt;
&lt;p&gt;&lt;em&gt;1996 computer science student desk (see below &amp;ndash; 1)&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;When I am thinking about it, I believe it’s because of my Dad.
He had a Ham Radio license, and “his” place in the house always was his shack, with all the electronics, the radios and antenna controls, basically a desk and a workbench next to it.
You’d find him more often there than anywhere else in the house.&lt;/p&gt;
&lt;p&gt;Why do we even have living rooms?
It’s a social convention that is hard to break.
I know that I would be in for a fight to the blood suggesting that we get rid of ours, but seriously?
“My” space is that desk/shack shown above, and not the living room.
It’s the place that I’ll fight for.&lt;/p&gt;
&lt;p&gt;Discussing this elsewhere, a friend sends me &lt;a href=&#34;https://www.youtube.com/watch?v=CJWOWksT1x4&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Space &amp;ndash; A cluttered life: Middle-Class Abundance&lt;/a&gt;

.
The video discusses space use in American middle class families, who seem to have lives centered around the kitchen/eating space, which makes a lot of sense.&lt;/p&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li&gt;That 1996 desk.
That version of me had a Euro-ISDN semipermanent connection to my provider (128/128 kBit/s) and I also spent 50 Deutschmark for my own /24 provider independent IPv4 range.
All my machines had public addresses.
The machine is a Nextstation with 24 MB of memory, and a 25 MHz 68040 CPU, running what later would become MacOS X.
The white tower next to it has a 1 GB SCSI HDD full height (the two top slots), a 1x SCSI CD-ROM drive (Caddies required) and a SCSI QIC drive for DC 6525 tapes (525 MB/tape).
My body hides the full height tower case for the Dual-Pentium Linux box, you can only see the beige case of the b/w monitor it has.
We were using BNC based 10 MBit/s Ethernet at that time.
This box also has the ISDN card.
Unfortunately the driver had a memory leak, and we were losing a bit of memory every time the ISDN link goes up or down, because some driver internal data structures are allocated and never deallocated.
The loss accumulates to around 1 MB per week.&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
    <item>
      <title>Die kommende Kündigungswelle</title>
      <link>https://blog.koehntopp.info/2021/11/12/die-kommende-kuendigungswelle.html</link>
      <pubDate>Sun, 07 Nov 2021 11:28:27 +0100</pubDate>
      
      <guid>https://blog.koehntopp.info/2021/11/12/die-kommende-kuendigungswelle.html</guid>
      <description>&lt;p&gt;Ein guter Freund sinnierte gestern mit anderen Freunden von mir über die Situation auf der Arbeit und schrieb mir heute:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Wie man es auch dreht und wendet: Corona ist auch ein Lackmustest für Unternehmen in ihrer Rolle als Arbeitgeber.
Anhand der vierten Welle lässt sich das hervorragend nachvollziehen.&lt;/p&gt;
&lt;p&gt;Denn Unternehmen und Organisationen, denen am Wohl ihrer Mitarbeiter/-innen etwas liegt, haben schon vor Wochen überall dort, wo es möglich ist, ihre Leute kategorisch wieder ins Homeoffice geschickt und Präsenzveranstaltungen untersagt.
Das hat selten etwas damit zu tun, dass diese Unternehmen herausragend schlau wären.
Viel mehr schauen diese Unternehmen sich ausgehend vom Wunsch, die eigenen Leute nicht zu gefährden, ihr Corona-Handling dort ab, wo es funktioniert.&lt;/p&gt;
&lt;p&gt;Unternehmen beispielsweise, die sich an Israel orientieren, werden ihre Leute frühestens bei flächendeckender Booster-Impfung der eigenen Belegschaft wieder in die Büros rufen, falls überhaupt.
Unternehmen hingegen, die sich an den Richtlinien der deutschen Bundesregierung orientieren, pochen oft seit Wochen schon darauf, in die sich aufbauende vierte Welle hinein die Anwesenheitszeiten in den Büros zu erhöhen.&lt;/p&gt;
&lt;p&gt;Das ist tragisch, weil es so vorhersehbar katastrophale wie vermeidbare Folgen haben wird.
Wer Leute notlos in den ÖPNV zwingt, obwohl sie nicht geboostert sind, exponiert sie unnötig einem erhöhten Risiko.
Wer Leute notlos ins Büro ruft, obwohl diese nicht impfbare Familienmitglieder im selben Haushalt haben, exponiert sie unnötig einem erhöhten Risiko.
Unternehmen, die so agieren, machen sich schuldig.&lt;/p&gt;
&lt;p&gt;Die Menschen in diesen Unternehmen sollten das Corona-Handling ihres Arbeitgebers jedenfalls genau beobachten.
Wer die Belegschaft unabhängig vom Impfstatus wieder ins Büro ruft, betreibt das Geschäft der Impfgegner.
Denn dann entsteht der Eindruck, der Impfstatus sei im Wesentlichen egal.
Wer nur geimpfte Menschen notlos ins Büro ruft, schafft dadurch indirekt sogar Incentives für Impfgegner, weil Homeoffice dann zu einem Privileg für diese wird.&lt;/p&gt;
&lt;p&gt;Beides wäre unerträglich.
Und Menschen in diesen Firmen sollten ihren AG durchaus wissen lassen, dass das unerträglich ist.
Falls alle Stricke reißen:
Kündigen und Namen der Manager notieren, damit man in deren Fängen sicher nie mehr landet.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Bei den Amis heißt das &lt;a href=&#34;https://en.wikipedia.org/wiki/Great_Resignation&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;The Great Resignation&lt;/a&gt;

:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The COVID-19 pandemic has allowed workers to rethink their careers, work conditions, and long-term goals.
As many workplaces attempted to bring their employees in-person, workers desired the freedom to work from home given during the pandemic.
With telecommuting also came schedule flexibility, which was the primary reason to look for a new job of the majority of those studied by Bankrate in August 2021.
Additionally, many workers, particularly in younger cohorts, are seeking to gain a better work–life balance.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Das ist die mildeste Formulierung, die ich gefunden habe.&lt;/p&gt;
&lt;p&gt;Tatsächlich arbeiten &amp;ldquo;wir&amp;rdquo; im März 2022 seit 2 Jahren von zu Hause und/oder unter Pandemie-Bedingungen, und außerhalb der traditionellen Bürostrukturen und -hierarchien.
Einige Firmen haben sich anpassen können.
Von denen hat keine ein Problem mit Churn oder Hiring, also damit, Personal halten zu können und neues anzuwerben.&lt;/p&gt;
&lt;p&gt;Es sind die Läden, die die Realität der vergangenen 2 Jahre negieren, die jetzt bluten, und zwar vom Kopfe her.
Und Mitarbeiter, die seit 2 Jahren bewiesen haben, daß sie sehr gut und erfolgreich arbeiten können,&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ohne daß sie jeden Tag 2 Stunden im Berufsverkehr verschwenden,&lt;/li&gt;
&lt;li&gt;ohne daß das Kind als Schlüsselkind nach Hause kommen muss,&lt;/li&gt;
&lt;li&gt;ohne daß ihnen das Management auf die Bildschirme glotzt,&lt;/li&gt;
&lt;li&gt;und ohne daß sie 3 von 8 Stunden pro Tag in Meetings zu bringen, von denen für sie maximal 20 Minuten relevant sind,&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;solche Leute brechen jetzt auf - in Firmen, die anders arbeiten, in Berufe, die das nicht notwendig machen oder in ein Umfeld, das weniger dem späten 19. Jahrhundert verhaftet ist. Die Zukunft der Arbeit ist gerade angekommen, und die Leute ziehen um.&lt;/p&gt;
&lt;p&gt;Gerade bei den Wissensarbeitern ist das so:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Ich habe 5 Jahre studiert und danach 3 Jahre Projekte gemacht und Dir jetzt gerade 2 Jahre lang bewiesen, daß ich mich selbst organisieren kann, und jetzt willst Du mich im Büro haben, damit Du Dich nicht so alleine fühlst?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Kann man machen. Nicht schlau. So gar nicht.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Edit:&lt;/strong&gt; Nachtrag.&lt;/p&gt;
&lt;p&gt;Jemand schickt mir diesen &lt;a href=&#34;https://www.sueddeutsche.de/wirtschaft/overemployed-home-office-usa-1.5461910&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;paywalled link zur SZ&lt;/a&gt;

, von dem eh nur der Anreißer interessant ist. Der Artikel beschreibt unter dem Begriff &amp;ldquo;Overemployed&amp;rdquo; Personen, die im Homeoffice so effizient sind, daß sie zwei bezahlte Vollzeitstellen besetzen, ohne Wissen der jeweiligen Arbeitgeber.&lt;/p&gt;
&lt;p&gt;Das geht natürlich nur mit &lt;a href=&#34;https://en.wikipedia.org/wiki/Bullshit_Jobs&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;David Graeber&amp;rsquo;s Bullshit Jobs&lt;/a&gt;

, aber es ist natürlich auch ein Zeichen dafür, daß die Arbeit, die diese Personen ausführen weder produktiv, noch notwendig noch sinnstiftend ist.&lt;/p&gt;
&lt;p&gt;Ich antwortete mit&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Ich kann nur den Teaser lesen, aber das ist das, was wir im Informatik-Studium Semester 2 (und 4) gemacht haben.
Also 3 Leute in die Inf 2 Vorlesung schicken, parallel 3 Leute in Inf 4.
Mit dem Rest (gut 20 Leute, Rotationssystem) die Vorlesungen von 2x 90 Minuten in 45 Minuten durchziehen, und dann in 45 Minuten die Aufgaben machen.
Das hat sehr, sehr böses Blut gegeben&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Die Antwort war:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Dafür hatten wir [bei uns] die Mitschriften AG. Etwas anderer Studienablauf bei Nicht-Informatikern.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;Edit:&lt;/strong&gt; Nachtrag.&lt;/p&gt;
&lt;p&gt;Einige Arbeitgeber insistieren dringend, daß &amp;ldquo;Mitarbeiter wenigstens einen Tag in der Woche im Büro sind&amp;rdquo;, ohne das näher zu begründen.&lt;/p&gt;
&lt;p&gt;Bohrt man unauffällig und inoffiziell nach, heißt es &amp;ldquo;Wir haben sehr viele Expats, und wenn die statt von hier von ihrem Heimatland aus arbeiten, dann kommen wir von der Unternehmenssteuer her in Teufels Küche.&amp;rdquo;&lt;/p&gt;
&lt;p&gt;Unter Umständen sollte man hier offener kommunizieren, und dann versuchen, kooperativ Lösungen zu finden, denn unerklärliches blockierendes Verhalten eines Arbeitgebers ist in diesem Zusammenhang nicht produktiv und führt wieder zur Kündigungswelle.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Vijzelbuurt is changing</title>
      <link>https://blog.koehntopp.info/2020/10/08/vijzelbuurt-is-changing.html</link>
      <pubDate>Thu, 08 Oct 2020 18:11:50 +0000</pubDate>
      
      <guid>https://blog.koehntopp.info/2020/10/08/vijzelbuurt-is-changing.html</guid>
      <description>&lt;p&gt;Back when I was still commuting to work in an office, in the far past, I used to be in the Spaces building in Vijzelgracht in Amsterdam, every day. Mark Wagenbuur of &lt;a href=&#34;https://twitter.com/bicycledutch&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;BicycleDutch&lt;/a&gt;

 has been there today, and &lt;a href=&#34;https://twitter.com/BicycleDutch/status/1314213038908559361&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;tweeted&lt;/a&gt;

:&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://twitter.com/BicycleDutch/status/1314213038908559361&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;p class=&#34;md__image&#34;&gt;
  &lt;img src=&#34;https://blog.koehntopp.info/uploads/2020/10/bicycledutch-tweet.jpg&#34; alt=&#34;&#34;  /&gt;
&lt;/p&gt;

&lt;/a&gt;

&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Amsterdam is changing dramatically. I was in Vijzelstraat for the first time in about 2 years and I was pleasantly surprised! Looked up the old situation in Google StreetView for some before and afters.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;He also linked to &lt;a href=&#34;https://archief.amsterdam/beeldbank/detail/03429525-d56a-9371-d7ba-d3258ecdc8e3&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;an image from the  Stadsarchief&lt;/a&gt;

 where the situation in 1987 is shown.&lt;/p&gt;
&lt;p&gt;These works are documented on the &lt;a href=&#34;https://www.amsterdam.nl/projecten&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;City of Amsterdam website&lt;/a&gt;

, which also has a page for the &lt;a href=&#34;https://www.amsterdam.nl/projecten/vijzelstraat-herinrichting/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Vijzelstraat: herinrichting&lt;/a&gt;

.&lt;/p&gt;
&lt;p&gt;&lt;p class=&#34;md__image&#34;&gt;
  &lt;img src=&#34;https://blog.koehntopp.info/uploads/2020/10/vijzelstraat-goal.jpg&#34; alt=&#34;&#34;  /&gt;
&lt;/p&gt;

&lt;/p&gt;
&lt;p&gt;&lt;em&gt;The desired end state for the space in front of Spaces, Vijzelstraat 66.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;The works are part of &lt;a href=&#34;https://nl.wikipedia.org/wiki/Rode_Loper_%28Amsterdam%29&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Project Rode Loper&lt;/a&gt;

, which is the renewal and redesign of all urban space on top of the new Noord/Zuidlijn, Metro 52, after the completion of the Metro works in 2018. The Vijzelstraat works are the conclusion of this project.&lt;/p&gt;
&lt;p&gt;The City of Amsterdam has a fabulous video channel on Youtube, &lt;a href=&#34;https://www.youtube.com/channel/UCkq8uEQ0rl4NiJnO8mL7y_w&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Het Verkeer&lt;/a&gt;

, which announces and explains all street works and renewal. The Vijzelgracht project of course &lt;a href=&#34;https://www.youtube.com/watch?v=-vu-ExAlzWE&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;also has a video&lt;/a&gt;

.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=-vu-ExAlzWE&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;p class=&#34;md__image&#34;&gt;
  &lt;img src=&#34;https://blog.koehntopp.info/uploads/2020/10/vijzelstraat-video.png&#34; alt=&#34;&#34;  /&gt;
&lt;/p&gt;

&lt;/a&gt;

&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Video announcing the Vijzelstraat works.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Interestingly there are two more projects active that match and extend the Rode Loper in this area:&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://www.amsterdam.nl/projecten/vijzelgrachtgarage/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;p class=&#34;md__image&#34;&gt;
  &lt;img src=&#34;https://blog.koehntopp.info/uploads/2020/10/vijzelgracht-garage.jpg&#34; alt=&#34;&#34;  /&gt;
&lt;/p&gt;

&lt;/a&gt;

&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://www.amsterdam.nl/projecten/vijzelgrachtgarage/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Vijzelgracht: afbouw Vijzelgrachtgarage&lt;/a&gt;

 - The City is building a paid-for underground parking garage in the space between the metro station Vijzelgracht and the street level. This will provide paid-for parking space for 270 cars, similar to the Parkeergarage Museumskwartier, which is serving Frans-Hals-Buurt.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://www.amsterdam.nl/projecten/vijzelbuurt-parkeerluw/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Vijzelbuurt: parkeerluw&lt;/a&gt;

 - Matching the extremely successful conversion of Frans-Hals-Buurt (around 500m north of Vijzelgracht), free and paid-for on street parking is almost completely removed, freeing up public space for fietsers, pedestrians, playing children and city green. The change will affect two local neighborhoods, Weteringbuurt and Noorderbuurt. The city has &lt;a href=&#34;https://www.amsterdam.nl/projecten/vijzelbuurt-parkeerluw/nieuws-vijzelbuurt/ontwerpsessies-weteringbuurt/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;local consultations&lt;/a&gt;

 with the people living there right now.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Rolling back a rollout</title>
      <link>https://blog.koehntopp.info/2020/01/17/rolling-back-a-rollout.html</link>
      <pubDate>Fri, 17 Jan 2020 19:53:49 +0000</pubDate>
      
      <guid>https://blog.koehntopp.info/2020/01/17/rolling-back-a-rollout.html</guid>
      <description>&lt;p&gt;Florian Haas &lt;a href=&#34;https://twitter.com/xahteiwi/status/1217903825824120834&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;asks on Twitter&lt;/a&gt;

:&lt;/p&gt;
&lt;p&gt;&lt;p class=&#34;md__image&#34;&gt;
  &lt;img src=&#34;https://blog.koehntopp.info/uploads/2020/01/rolling-back.png&#34; alt=&#34;&#34;  /&gt;
&lt;/p&gt;

&lt;/p&gt;
&lt;p&gt;&amp;ldquo;How do you solve reliable rollback. The definition of a reliable rollback being: &amp;lsquo;get reset &amp;ndash;hard &lt;ref&gt;&amp;rsquo;, &amp;lsquo;git push -f&amp;rsquo; and then magic happening that returns your infra to the exact state it was at &lt;ref&gt;.&amp;rdquo;&lt;/p&gt;
&lt;p&gt;The problem is relatively easy to solve with modern infrastructure-as-code for anything that is stateless. It becomes a bit more involved when you are dealing with things with state, such as database instances or Zookeepers or similar things.&lt;/p&gt;
&lt;p&gt;My reply on Twitter begins &lt;a href=&#34;https://twitter.com/isotopp/status/1218162310956638209&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;here&lt;/a&gt;

. I am basing my writeup on that reply.&lt;/p&gt;
&lt;h2 id=&#34;devops-what-does-that-even-mean&#34;&gt;
    &lt;a href=&#34;#devops-what-does-that-even-mean&#34;&gt;
	&amp;ldquo;Devops&amp;rdquo;, what does that even mean?
    &lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;In 2015, I gave a talk titled &amp;ldquo;&lt;a href=&#34;https://blog.koehntopp.info/2015/03/27/go-away-or-i-will-replace-you.html&#34;&gt;Go away, or I will replace you with a little shell script&lt;/a&gt;

&amp;rdquo; as a keynote for the GUUG FFG 2015 in Stuttgart. The german language slides are &lt;a href=&#34;https://www.slideshare.net/isotopp/go-away-or-i-will-replace-you-with-a-little-shell-script&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;here&lt;/a&gt;

, the english slides are &lt;a href=&#34;https://www.slideshare.net/isotopp/go-away-of-i-will-replace-you-with-a-little-shell-script-english&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;here&lt;/a&gt;

 and a Youtube video of the Froscon version of the talk is &lt;a href=&#34;https://www.youtube.com/watch?v=e0CCv7pSK4s&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;here&lt;/a&gt;

. Unfortunately, the video is the german language version of that talk.&lt;/p&gt;
&lt;p&gt;The talk focuses on how the sysadmin profession started to die out somewhere around 2001, when we invented horizontal scaleout and &lt;a href=&#34;https://twitter.com/yesthattom&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Tom Limoncelli&lt;/a&gt;

 published the first edition of &amp;ldquo;&lt;a href=&#34;https://the-sysadmin-book.com&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;The Practice of System Administration&lt;/a&gt;

&amp;rdquo;. That book explained in one chapter the role of the sysadmin in the greater corporate organisation and how to cooperate with, not fight against users. The term and the practice of Devops evolved in this decade, until in 2008 &lt;a href=&#34;https://twitter.com/patrickdebois&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Patrick Debois&lt;/a&gt;

 coined the actual term &amp;ldquo;Devops&amp;rdquo;, which we use today.&lt;/p&gt;
&lt;p&gt;The term has been abused a lot, but what does it actually mean? In one slide I show this:&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://www.slideshare.net/isotopp/go-away-of-i-will-replace-you-with-a-little-shell-script-english#19&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;p class=&#34;md__image&#34;&gt;
  &lt;img src=&#34;https://blog.koehntopp.info/uploads/2020/01/rolling-away.jpg&#34; alt=&#34;Go away or I will replace you with a little Shell Script (english) - Slide 19&#34;  /&gt;
&lt;/p&gt;

&lt;/a&gt;

&lt;/p&gt;
&lt;p&gt;The modern development environment according to Devops, and the technical meaning of the term.&lt;/p&gt;
&lt;p&gt;In todays language, I would phrase these items as follows:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Infrastructure as code&lt;/li&gt;
&lt;li&gt;Version Control&lt;/li&gt;
&lt;li&gt;CI/CD&lt;/li&gt;
&lt;li&gt;Separation of Rollout and Activation&lt;/li&gt;
&lt;li&gt;Proper Observability with centralized, structured logs&lt;/li&gt;
&lt;li&gt;Good instant communication&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;em&gt;Infrastructure As Code&lt;/em&gt; describes a way of declaring the execution environment for your code, in code. Code that can be checked in and versioned like the application code itself. Openstack Heat Scripts, AWS Cloud Formation, Kubernetes Deployment Specifications or your Terraform all qualify as this.&lt;/p&gt;
&lt;p&gt;With this, you can recreate and redeploy your execution environment together with your application, as part of the build and deployment automation. It also means that you get rid of the endlessly fragile state manipulation engines that are Puppet, Ansible, Chef, Salt and CFEngine. You create, build and deploy images and you run immutable infrastructure.&lt;/p&gt;
&lt;p&gt;Because all of that code and infrastructure declaration are files, you want &lt;em&gt;Version Control&lt;/em&gt;, which in 2020 means, you want all of this in git. This is so normal by now that anything that is not git-able is considered broken and weird.&lt;/p&gt;
&lt;p&gt;What you check in, you want to be processed automatically. So you push it through a &lt;em&gt;CI/CD pipeline&lt;/em&gt;, which pushes things through whatever pre-production environments you have (many have Dev, Staging and Prod). This, in 2020, probably includes formatting to coding standards, linting, sonarcubing, and whatever tests you wrote.&lt;/p&gt;
&lt;p&gt;Eventually, your code is rolled out. And a key invention - one that is not yet done by enough people - is &lt;em&gt;separation of Rollout and Activation&lt;/em&gt; by the means of an experiment framework. More on that below.&lt;/p&gt;
&lt;p&gt;When application code runs, it is appending messages, measurements and context to a hash of hashes. This collection will be pushed into an event processor at the end of a request. Ours is called &amp;ldquo;Booking Events&amp;rdquo;. If you happen to work elsewhere, an Observabilty tool such as &lt;a href=&#34;https://honeycomb.io&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Honeycomb.io&lt;/a&gt;

 is the closest to Booking Events I have been able to find outside of Booking.&lt;/p&gt;
&lt;p&gt;Using this, you alert and push alerts out through a multitude of channels, including Pagerduty, and whatever you use instead of Slack. Humans are being alerted to a situation, and can act on it.&lt;/p&gt;
&lt;h2 id=&#34;separation-of-rollout-and-activation-and-dual-use-experimentation&#34;&gt;
    &lt;a href=&#34;#separation-of-rollout-and-activation-and-dual-use-experimentation&#34;&gt;
	Separation of Rollout and Activation, and Dual Use Experimentation
    &lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;As I mentioned above, the separation of rollout and activation is a key invention that makes rollouts possible. It also makes testing in production safe.&lt;/p&gt;
&lt;p&gt;In the first iteration, an experiment framework allows you to push code into production that never runs. You can then, through feature flags, activate your code for yourself, or a chosen subset of customers based on whatever selectors your frame work offers. I often quote &amp;ldquo;5% of the population of guest country .jp with a user-agent string that suggests MacOS&amp;rdquo; as an example, but it is really a function of the experiment framework you build.&lt;/p&gt;
&lt;p&gt;See a very old talk from 2012 of mine: &amp;ldquo;&lt;a href=&#34;https://www.slideshare.net/isotopp/8-rollouts-a-day&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;8 rollouts a day&lt;/a&gt;

&amp;rdquo; (&lt;a href=&#34;https://www.youtube.com/watch?v=6qFNwNEeG1w&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;video&lt;/a&gt;

) for an ancient take on all of this. This is not new technology, we have been doing this for ages, and just iterated on this.&lt;/p&gt;
&lt;p&gt;Having an experiment framework means that the scaffolding for activation in code is formalized and tested, so errors in gating entry to new code are unlikely to happen.&lt;/p&gt;
&lt;p&gt;It also means that a control framework exists where you can see experiments that are active, who is exposed to them, and that participation in an experiment is recorded in a user click history. You probably want to record experiment config changes in your monitoring wallgraphs so that a change in observed behavior is linked to possible causes for that in an obvious and in-your-face way.&lt;/p&gt;
&lt;p&gt;This is also important for customer support: A CS agent needs to be able to see what the customers sees or has seen, if an experiment is a UI/UX experiment. UI/UX variants should be available to CS agents at will, so that they are able to match and retrace customer experience.&lt;/p&gt;
&lt;p&gt;Having experimentation available obviously means that variant code is in execution concurrently. Or in terms of rollouts: Old and new code run at the same time.&lt;/p&gt;
&lt;p&gt;For state management, it means that schema changes or similar data adjustments need to be done in advance. They also need to be done in a way that is compatible with the old and the new code. That is not hard to do, and can be done in a robust testable way. You want to package it, and run a bunch of checks on schema changes automatically, so you can detect best practice violation and prevent these from being checked into staging and prod.&lt;/p&gt;
&lt;p&gt;And yes, you need that table change framework anyway, because SOX will eventually want that from you. You probably will end up with a web frontend and API for &lt;a href=&#34;https://www.percona.com/doc/percona-toolkit/LATEST/pt-online-schema-change.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;pt-online-schema-change&lt;/a&gt;

 accessible to end users in a way that also advises them automatically on best practice. This also scales better than your DBAs checking manually for the presence of a PK, NULLable columns, columns that are DOUBLE but suggest monetary values in their names, and similar things.&lt;/p&gt;
&lt;p&gt;Ok, at this point you can push code into staging and prod in a way that the old and new variants of the code can coexist on whatever schema you have and can run concurrently, depending on what variant of which experiment the user is in. You can finally &lt;em&gt;activate&lt;/em&gt; code for a few users, and see what happens.&lt;/p&gt;
&lt;p&gt;Your second iteration of the experiment framework will therefore measure the &lt;em&gt;impact&lt;/em&gt; of the experiment, and by that I do not only mean the business impact, but also the technical impact.&lt;/p&gt;
&lt;p&gt;Business impact measurements would answer questions such as &amp;ldquo;What influence has Experiment 17 on conversion?&amp;rdquo; or &amp;ldquo;Does variant B of experiment 17 not only improve conversion, but also customer support call rate, and if so, it is still a positive experiment in the monetary sense&amp;rdquo;?&lt;/p&gt;
&lt;p&gt;But as a gate to the entry of code paths, the experiment framework can also encapsulate Probes that collect metrics over a Span, delivering technical measurements about the performance cost of an experiment. I can ask questions such as &amp;ldquo;Show me all messages in variant B of rollout 64fd32f that never appear when running variant A&amp;rdquo;, or &amp;ldquo;What messages appear since rollout 64fd32f that did not appear before&amp;rdquo;.&lt;/p&gt;
&lt;p&gt;I can also carry metrics and classify them by experiment related selectors. &amp;ldquo;Show me SQL time spent in variant B compared to variant A of rollout 64fd32f in all sections guarded by experiment 13, normalized by number of executions&amp;rdquo;. In other words, what exactly is the latency contribution of experiment 13b, since 64fd32f?&lt;/p&gt;
&lt;p&gt;And because I have access to the unshortened, unaggregated raw event data persisted elsewhere, at any point in time I can ask the framework to actually show me the SQL, once I have a selector that finds me the delta I was looking for, and highlight the things that are only present here and not elsewhere.&lt;/p&gt;
&lt;p&gt;That is the Dual Use value of an experiment framework: You get the business value out of that, testing hypothesis on draft code in production before you spend engineering hours on things that aren&amp;rsquo;t going to make you richer. That is, in terms of bug stages, finding bugs in requirements.&lt;/p&gt;
&lt;p&gt;&lt;p class=&#34;md__image&#34;&gt;
  &lt;img src=&#34;https://blog.koehntopp.info/uploads/2020/01/rolling-relative-bugfix-cost.png&#34; alt=&#34;&#34;  /&gt;
&lt;/p&gt;

&lt;/p&gt;
&lt;p&gt;&lt;em&gt;From &lt;a href=&#34;https://www.slideshare.net/isotopp/8-rollouts-a-day&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;8 rollouts a day (2012), Slide 19&lt;/a&gt;

: Relative cost of a bugfix in various stages of the code lifecycle. Fixing broken requirements is the cheapest.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;But you also get the technical cost of that, in terms of running the prototype code. That enables you to assess the added execution cost vs. the estimated engineering effort to speed it up. In other words, your engineers only ever work on code that is proven to make you richer, &lt;em&gt;and&lt;/em&gt; you also know how much running it will cost you in AWS units or engineering hours and you can prioritise things properly.&lt;/p&gt;
&lt;p&gt;And finally, since A and B variants coexist, if B is known to be bad, you not only can roll that back, you don&amp;rsquo;t even have to. Simply turning off activation of B gives you instant silence in production - the known bad variant is still present, but never run for anybody. You can then triage and come up with a resolution of the situation on your own terms. Either you eliminate the B variant and roll back, or you fix B and roll forward. Either way, this is done completely out of the execution path and also without any time pressure constraints on the decision making.&lt;/p&gt;
&lt;h2 id=&#34;the-sum-of-all-these-parts&#34;&gt;
    &lt;a href=&#34;#the-sum-of-all-these-parts&#34;&gt;
	The Sum of All These Parts
    &lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;The sum of these parts is much more than each individual capability gives you. Together they give you an environment that allows you to roll back and forward, at will. And you will be doing this in an informed way. You can reason about code in production, and act on the outcome of that discussion. And you are doing this outside of crisis mode and any time constraints.&lt;/p&gt;
&lt;p&gt;Separation of Rollout and Activation is a Key Invention here. Put this into an Experimentation Framework, and create a dashboard/control/overview board around this that gives information about running and disabled experiments, experiment outcomes in terms of business and technical data, and that links to raw events and metrics generated from the raw events directly.&lt;/p&gt;
&lt;p&gt;Marrying an experiment framework + dashboard with a Honeycomb-like observability system, and with pointers to tags, releases and rollouts in your code base allows naviagation between all of these things in an integrated way. It enables product and tech people alike in a unique way to reason about code, what that code does to the business, UX, income, and also resource consumption.&lt;/p&gt;
&lt;p&gt;It can direct business decisions, because it allows safe rapid development and deployment of draft business expierments.&lt;/p&gt;
&lt;p&gt;It can direct engineering decisions, because it tells you what is safe, and what isn&amp;rsquo;t, what is good enough and what isn&amp;rsquo;t.&lt;/p&gt;
&lt;p&gt;It informs product management and backlog decisions, because it links technical cost, potential business income and resource usage cost so that business and tech reason about code at eye level - one single source of truth, and one single set of metrics spanning the lowest levels of tech to business metrics like conversion, cuca call rates, cancellations and other things.&lt;/p&gt;
&lt;p&gt;After doing that a while, your code will be littered with Experiment Gateways that either protect and measure code that is full-on or perma-off. All of that code is technical debt and needs to be evaluated, and cleaned up. In this way, the experiment framework, even in the final stage of its usefulness acts as visual markup for technical debt assessment and as a guide for garbage code collection.&lt;/p&gt;
&lt;h2 id=&#34;reliable-rollbacks-and-testing-in-production&#34;&gt;
    &lt;a href=&#34;#reliable-rollbacks-and-testing-in-production&#34;&gt;
	Reliable Rollbacks and Testing In Production
    &lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;You can even use this data to build predictors for expected business behavior, and alert on deviations. &amp;ldquo;According to observed growth and data from last year, last month and last week, we would expect x bookings per minute, but see m fewer, so something is likely wrong. That started 10 minutes ago at the yellow activation line of experiment 13&amp;rdquo; is a thing where I live, and turning off 13 before even looking for possible root causes is a complete no-brainer. In 95% of the cases or more it actually fixes the incident for now, so that any followup is done again outside of panic mode.&lt;/p&gt;
&lt;p&gt;&lt;p class=&#34;md__image&#34;&gt;
  &lt;img src=&#34;https://blog.koehntopp.info/uploads/2020/01/rolling-production.jpg&#34; alt=&#34;&#34;  /&gt;
&lt;/p&gt;

&lt;/p&gt;
&lt;p&gt;That is: Testing In Production Is A Safe Thing To Do - if you build an environment that makes it survivable. The key ingredients are&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Education&lt;/li&gt;
&lt;li&gt;Awareness&lt;/li&gt;
&lt;li&gt;Empowerment&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I reference that in both talks I linked above: Education means you not only need your general craft, the IT you learned at school, in university or in previous jobs. You also need to learn the local knowledge. We encapsulate that in the two questions&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;If you break it, will you even notice?&lt;/li&gt;
&lt;li&gt;If you break it, can you fix it?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The first question asks if you do know you dependencies and dependents for any subsystem that you change. If you don&amp;rsquo;t that&amp;rsquo;s okay, we will teach you. That&amp;rsquo;s why we are here.&lt;/p&gt;
&lt;p&gt;But if you write a patch, gate it in an experiment and then ask &amp;ldquo;Is this good? Can I roll that out?&amp;rdquo;, you are asking the wrong person. There is one expert on the whole planet for that change you just wrote, and that is you. You need to be able to answer the question &amp;ldquo;If you break it, will you even notice&amp;rdquo; with a confident yes in order to be admitted to production. Nobody but you will know the proper answer to that question, ever. We can only help you to find the &amp;ldquo;Yes&amp;rdquo; by teaching you.&lt;/p&gt;
&lt;p&gt;This is also a question of attitude, and it has to be coming from the top. Back in the day when &lt;a href=&#34;https://twitter.com/keeskoolen&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Kees&lt;/a&gt;

 was CEO, he usually ate with everybody else in the canteen.&lt;/p&gt;
&lt;p&gt;A typical conversation that happened similarly more than once is Kees asking somebody: &amp;ldquo;I haven&amp;rsquo;t seen you before. Are you new?&amp;rdquo; &amp;ldquo;Yes, of course. I started 3 weeks ago.&amp;rdquo; &amp;ldquo;And&amp;rdquo;, Kees would ask, in one way or the other, &amp;ldquo;did you break production already?&amp;rdquo; The newbie would of course answer &amp;ldquo;No, of course not!&amp;rdquo; and get the usual response &amp;ldquo;So what am I paying you for?&amp;rdquo;.&lt;/p&gt;
&lt;p&gt;The moral in this is that errors and downtimes are a part of doing business. Of course we would like to have infrastructure where these things do not happen, or minimise impact, but velocity and risk taking are a thing of value to a fast company. By having an error budget (the integral between the predicted income and the actual income) and checking that things are within the error budget, management has a control that allows them to check on the state of the engineering culture. If we are over the error budget, we probably need to look at our ways, and the state of our education and practice. If we are under error budget a lot, we are probably not moving fast enough and are too risk averse.&lt;/p&gt;
&lt;p&gt;All the instrumentation around this - CI/CD, dev and staging, experiment framework and observability framework - exist to make better use of the error budget and get most out of our invest into corporate improvement and organisational learning.&lt;/p&gt;
&lt;p&gt;The second question asks if you know how to fix the things that your change may break. It is not only a question about scope, but also a question about your network. That is, because in any reasonably large system you won&amp;rsquo;t be able to put it together alone.&lt;/p&gt;
&lt;p&gt;You should expect to need help.&lt;/p&gt;
&lt;p&gt;It&amp;rsquo;s people that help, not positions.&lt;/p&gt;
&lt;p&gt;So you should not answer &amp;ldquo;I will need a DBA around just in case&amp;rdquo;, but you should know if Debs, Greg or Simon would be better to have around in your case.&lt;/p&gt;
&lt;p&gt;With your education covered, and especially the necessary local knowledge amending your general education, you&amp;rsquo;d then have to be aware of your environment. That ties back to the upper part of this writeup. With probes and annotions from Spans covering Experiment gateways, you will have to access the data collected in your event logging system, your observability pipeline to understand the state and health of your system.&lt;/p&gt;
&lt;p&gt;And it is that exact state, and the detailed data that will tell you the story.&lt;/p&gt;
&lt;p&gt;Aggregations are important, they point you into a general direction. But it is the raw data that contains the evidence you need. It is the ability to slice and dice the raw data along arbitrary dimensions at will that will allow you to make the precise cut which isolates the buggy cases from the non-buggy behavior. It will allow you to look at the precise delta in exposed state of your distributed system of dependencies that causes the abnormal behavior.&lt;/p&gt;
&lt;p&gt;Logs and metrics are good, essential for checks and alerts, to handle known cases and navigate known waters safely. Events, and the ability to search, sort, aggregate and correlate on events at will, are what enable you to see and debug a distributed and developing production system. Experiments, separation of rollout and activation, with integrated Probes in Spans, allow you to collect this data, and to act, by disabling code that introduces undesireable behavior.&lt;/p&gt;
&lt;p&gt;The rollout is likely to be safe, because any new code you roll out is never executed in production. Unless you activate it. In the end you will find that it is not the rollout sparklines in your graphs that matter, it&amp;rsquo;s the config change sparklines that need watching. You can turn on things for yourself, for a subset of the population, or, if you have gradually built confidence, full on.&lt;/p&gt;
&lt;p&gt;Full on (or full off and writing the change off as worthless, in 19 of 20 cases) is a precondition then for cleaning up: Removing either the Experiment tooling around one new codepath, removing the old codepath completely, or the other way around.&lt;/p&gt;
&lt;p&gt;Leaving experimentation instrumentation in the code, but having things full on (or off) is a very easy and visible way to assess technical debt. So even after the experiment has come to a conclusion one way or the other, the experiment framework is useful as a way to demarcate in some way or the other technical debt in source files.&lt;/p&gt;
&lt;p&gt;And finally, empowerment. Empowerment is giving developers the power to make decisions, and at the same time demanding from them that they make them. You can do that only in a safe environment, and in a blame-free culture where this comes from the top. Hence the importance of Kees eating in the Canteen and asking the questions as told above. Hence, too, the importance of the error budget, and exposing it to all people that roll out.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Du weisst nichts von Homeoffice</title>
      <link>https://blog.koehntopp.info/2019/01/07/du-weisst-nichts-von-homeoffice.html</link>
      <pubDate>Mon, 07 Jan 2019 09:14:19 +0000</pubDate>
      
      <guid>https://blog.koehntopp.info/2019/01/07/du-weisst-nichts-von-homeoffice.html</guid>
      <description>&lt;p&gt;In &lt;a href=&#34;https://www.golem.de/news/spd-arbeitsministerium-will-recht-auf-homeoffice-per-gesetz-1901-138520.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Recht auf Homeoffice&lt;/a&gt;

 schreibt Golem:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Das SPD-geführte Bundesarbeitsministerium plant ein gesetzlich verankertes Recht auf\ Home Office.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Und alle brüllen &amp;ldquo;Jaaaa!&amp;rdquo;.
Ich glaube, den meisten ist gar nicht klar, auf was sie sich da einlassen und wie sich eine Home Office First-Firma anfühlt.
Wie dem auch sei:
Die Firma, in der Ihr gerade arbeitet, kann so mit Home Office vermutlich nicht gut funktionieren.&lt;/p&gt;
&lt;p&gt;Ich habe von 2005 bis 2008 für MySQL AB gearbeitet, und das war eine Firma, die Home Office First war.
Das war eine sehr andere Arbeitsumgebung als die, die ihr in Eurem Job vermutlich habt.
Wir waren circa 500 Mitarbeiter in drei Dutzend Ländern überall auf der Erde.
Es gab einen Firmensitz in Kalifornien und einen irgendwo in Skandinavien, aber dort war nie jemand (im Büro in Kalifornien waren ein paar Leute mehr, weil die dort den Börsengang der Firma vorbereitet haben).&lt;/p&gt;
&lt;p&gt;Als Mitarbeiter hatte man einen gesonderten Raum daheim zu haben, der als Büro dient.
Die Firma hat einen gewissen Betrag pro Jahr (2500 Euro) bereitgestellt, um diesen Raum auszustatten oder zu verbessern.
Das schließt Arbeitsmaterial (Laptop) wie Büroausstattung (Stuhl, Tisch, etc pp) mit ein.&lt;/p&gt;
&lt;p&gt;Weil es faktisch keine Firmenräume gab, gab es auch kein Firmen-VPN, denn das hätte den Zugang erschwert.
Stattdessen gab es einen Haufen Webdienste, über die die Kommunikation stattfand.
Diese waren verschlüsselt und mit einem Single Sign On versehen, aber generell von überall zugänglich von wo aus man eine TLS Verbindung bekommen konnte.&lt;/p&gt;
&lt;p&gt;Alle Diskussionen, internen Abstimmungen, Meetings, und Ergebnisse wurden über diese Webdienste, Skype, IRC und andere Online-Medien getroffen.
Die Arbeitszeiten waren oft schräg, weil die Firma über alle Zeitzonen der Erde verteilt war.
Und das heißt, man mußte schon mal um 3 Uhr morgens ran, um ein Meeting mit Leuten in Shanghai, Moskau und in Kalifornien gleichzeitig zu haben &amp;ndash; da gibt es einfach keine gute Zeitzone für alle.&lt;/p&gt;
&lt;p&gt;Meetings über Videokonferenzen und Chatmedien sind schwierig, und Diskussionen über Mailinglisten sind oft hitzig und schwerfällig zugleich.
Es war notwendig, bestimmte Formen zu entwickeln und mit Leuten einzuüben.
Wenn man Leute aus einem Präsenzumfeld in eine Home Office Umgebung wirft, sind sie zunächst orientierungslos, unter Druck und einsam gleichzeitig.
Sie müssen an die Hand genommen werden, und man muß Ihnen Methoden und Formen aktiv zeigen, die ihnen erlauben, in so einer Umgebung zu funktionieren und sinnvoll zu kommunizieren.&lt;/p&gt;
&lt;p&gt;Am schwierigsten ist der Umgang mit der Tatsache, daß es keine Serendipität und keine aufwandslose Kommunikation gibt.
Diese Dinge, die man in Präsenzfirmen &amp;ldquo;nebenbei&amp;rdquo; mitbekommt, seitwärts, top-down und bottom-up, kommen in Home Office First Firmen nicht nebenbei.
Jeder, Management, Teamleiter, aber auch jeder einzelne Mitarbeiter, müssen lernen, daß jede Kommunikation einen Aufwand und Energie kostet, und man sich das Messaging genau überlegen muß.
Tut man das nicht, wird Zusammenhalt und gerichtete Aktion einem Firmenverbandes schwierig.&lt;/p&gt;
&lt;p&gt;Zentral in MySQL waren übrigens die verschiedenen All Hands und Department Meeting Veranstaltungen.
Zweimal im Jahr hat sich gesamte Firma an einem Ort getroffen (meistens ein Fünf Sterne Hotel in einem gut erreichbaren Land mit entspannter Visa-Situation, in der Nachsaison), und zweimal im Jahr haben sich gesamte Abteilungen getroffen.
Auf diesen Events (jeweils drei bis fünf Tage) haben wir uns kennengelernt, ein Netzwerk aufgebaut, zusammen Kurzprojekte (&amp;ldquo;Hackathon&amp;rdquo;) durchgezogen und natürlich auch gefeiert.
Zusammen mit anderen Treffen hatte man so in etwa alle zwei Monate ein Gruppen-, Abteilungs-, oder Firmentreffen.
Alles in allem nicht wirklich eine Verbesserung der finanziellen und der CO-Bilanz, aber notwendig um eine funktionierende Gruppe zu schaffen.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Where do you see yourself in five years?</title>
      <link>https://blog.koehntopp.info/2017/09/11/where-do-you-see-yourself-in-five-years.html</link>
      <pubDate>Mon, 11 Sep 2017 19:49:05 +0000</pubDate>
      
      <guid>https://blog.koehntopp.info/2017/09/11/where-do-you-see-yourself-in-five-years.html</guid>
      <description>&lt;h3 id=&#34;seriously-hr-people-ask-the-weirdest-questions&#34;&gt;
    &lt;a href=&#34;#seriously-hr-people-ask-the-weirdest-questions&#34;&gt;
	Seriously, HR people ask the weirdest questions.
    &lt;/a&gt;
&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;&amp;ldquo;Where do you see yourself in five years?&amp;rdquo;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;For a Twentysomething with no owned property and no family the
truthful answer is of course &amp;ldquo;In a different company, twice
removed. Not because you suck more than anywhere else, but,
like, statistically.&amp;rdquo;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://twitter.com/LionKingLee/status/906220573637971968&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;p class=&#34;md__image&#34;&gt;
  &lt;img src=&#34;https://blog.koehntopp.info/uploads/2017/09/five-years.jpg&#34; alt=&#34;&#34;  /&gt;
&lt;/p&gt;

&lt;/a&gt;

&lt;/p&gt;
&lt;p&gt;&amp;ldquo;Where do you see yourself in five years?&amp;rdquo; &amp;ldquo;Week 27 or 28?&amp;rdquo; &amp;ndash;
&lt;a href=&#34;https://twitter.com/LionKingLee/status/906220573637971968&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;LionKingLee&lt;/a&gt;

&lt;/p&gt;
&lt;p&gt;That time when you finish school and university and before you
settle down with dependencies that make you immobile - it is an
important time in your life. Use it wisely: Change jobs every
two to three years, and make it count.&lt;/p&gt;
&lt;p&gt;That is: understand that the people you work with are more
important than the companies you work for - you are building
your professional network. The companies you work for will
change every few years, but the network you build will be with
you for the rest of your life. It will be an important part of
you and your career.&lt;/p&gt;
&lt;p&gt;These people you are with in your wild years, they are the
people who will recommend you to the company you are aiming for
next. They will make sure that your CV is at least read, if you
send it there. They will make sure that you have at least the
first interview with that new shop. They are the people who will
ask you, when they have a professional question regarding your
area of expertise, and who will listen to your recommendations -
for hiring, for purchase, or just for grounding some goofball
ideas which may or may not turn into a startup.&lt;/p&gt;
&lt;h3 id=&#34;seriously-hr-people-have-the-weirdest-ideas&#34;&gt;
    &lt;a href=&#34;#seriously-hr-people-have-the-weirdest-ideas&#34;&gt;
	Seriously, HR people have the weirdest ideas.
    &lt;/a&gt;
&lt;/h3&gt;
&lt;p&gt;I met some once, who were wondering why self-assessment and 360º
reviews and management reviews diverge so much. There are things
like
&lt;a href=&#34;https://www.impraise.com/team-performance-analytics/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;this&lt;/a&gt;

 for
&lt;a href=&#34;https://www.impraise.com/feedback-behaviour-report/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;example&lt;/a&gt;


(and that&amp;rsquo;s already one of the better solutions).
But you are effectively typing feedback about your future
network peers into a SaaS solution, and you know that.&lt;/p&gt;
&lt;p&gt;So there is a third party company which collects data about me
at work, and what others think about me. This company may or may
not keep it around when we leave our current engagement,
depending on legislation, this companies operational skills and
culture:&lt;/p&gt;
&lt;p&gt;Would you trust a company with an Uber-like culture with this data?&lt;/p&gt;
&lt;p&gt;How do you know if they are an Uber or not? If they keep it, and
they are successful in their market, they will build a profile
over my networks and my entire career, over each of our
professional engagements over time. Yeah, one more profile to
worry about, on top of the Google shadow, the Github and the
Linkedin.&lt;/p&gt;
&lt;p&gt;Anyway, back when I was 20 (that was 1988), I learned the value
of feedback - it is what helps you grow.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;I also learned that negative feedback is always delivered over
coffee and beer, privately, face to face, and never, ever,
written down.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Especially not in some random 3rd parties SaaS interface.
You have no idea where it is going to end up, how long it is
being kept or who is going to buy whom in the end. So, anything
that goes into reports and reviews will of course be formatted
in a way such that it does not damage the current and future
relationship between my network and me. It&amp;rsquo;s not real and can&amp;rsquo;t
ever be.&lt;/p&gt;
&lt;p&gt;And that was true already before systems like these, when HR was
still working with paper folders and kept data in-house.&lt;/p&gt;
&lt;h3 id=&#34;seriously-hr-people-have-the-weirdest-jobs&#34;&gt;
    &lt;a href=&#34;#seriously-hr-people-have-the-weirdest-jobs&#34;&gt;
	Seriously, HR people have the weirdest jobs.
    &lt;/a&gt;
&lt;/h3&gt;
&lt;p&gt;Whatever technology you build, theirs can&amp;rsquo;t be automated, and in
many ways not even effectively assisted.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>The company as a social engine</title>
      <link>https://blog.koehntopp.info/2017/08/07/the-company-as-a-social-engine.html</link>
      <pubDate>Mon, 07 Aug 2017 19:34:37 +0000</pubDate>
      
      <guid>https://blog.koehntopp.info/2017/08/07/the-company-as-a-social-engine.html</guid>
      <description>&lt;p&gt;So why is everything so complicated? At work, I mean.&lt;/p&gt;
&lt;p&gt;Think of a small company. A single person, a founder, is building her
business. She knows her way around, it&amp;rsquo;s all in her head: The plan, the
things that are important and why, and how they are to be executed. Also,
tradeoffs to be corrected later, potential opportunities for later and a lot
of other meta: Stuff that does not get executed right now, but that informs
decisions, priorities and preferences.&lt;/p&gt;
&lt;p&gt;Things work with some precision, though, like a well programmed wetware CPU.&lt;/p&gt;
&lt;p&gt;The moment that stuff becomes too large for a single person to handle, more
people are involved and things need to be verbalized, written down, given
form. At that point, things change quite a bit:&lt;/p&gt;
&lt;p&gt;The task at hand is to program a second CPU, wetware, with a part of the
program that the first person has been executing. That&amp;rsquo;s necessary so she
can delegate, and the entire operation can scale.&lt;/p&gt;
&lt;p&gt;Unfortunately, as with all remote procedure call mechanisms, complicated
unfolded in-memory structures have to serialized before the can be
marshalled off to a second node and are being re-instantiated over there. In
this particular case, the language to describe the code to be executed is
informally specified, too, and the remote CPU also does not match the specs
of the first CPU, that is, English is really bad for programming computers
or people, and also each person is different.&lt;/p&gt;
&lt;p&gt;To make matters worse there is no proper debugger, the same broken language
has to be used to printf-debug the remote (&amp;ldquo;Do you understand what I mean?&amp;rdquo;
&amp;ldquo;Do you understand why it is important that we do things this way?&amp;rdquo;) and
there may be other, older code in the remote that interferes with the
execution of our code. People have history and they have ideas.&lt;/p&gt;
&lt;p&gt;If you think of a company as a large distributed engine to execute code that
has been extracted painfully and incompletely from the wetware engine of a
founder, and which has been mangled due to improper serialization in a
language with limited expressiveness, you have a good idea of the corporate
environment.&lt;/p&gt;
&lt;p&gt;You can&amp;rsquo;t see what happens in the individual nodes, you can only observe the
communication between them, and the parts of the program that made it into
writing, or at least the Wiki. You can think of processes as written down
instructions for the engine:&lt;/p&gt;
&lt;p&gt;Any process (&amp;ldquo;buy more paperclips&amp;rdquo;) describes who needs to talk to whom,
about what and why, in order to make things happen (&amp;ldquo;You need to create a
purchase order, which needs to be signed by &lt;em&gt;X&lt;/em&gt; for values over &lt;em&gt;n&lt;/em&gt; EUR in
order to limit our liability. The signed order is then sent to &lt;em&gt;Z&lt;/em&gt;, who will
actually spend money to buy stuff. You get stuff, and sign here to document
that.&amp;rdquo;)
Writing instructions and process down is important, and a great improvement
actually, because writing these instructions down forces all involves
parties (including the founders) to come clear about all the details and the
meta about the details - things that might have been existing only vaguely
in some mind, previously, now have to get a precise shape.&lt;/p&gt;
&lt;p&gt;Also, they become tangible, and by the way of tangibility, they are open to
challenge, discussion and modification - which is why some founders are
actually resisting to give tangible form to certain things. Giving tangible
shape to instructions and the meta - why instructions, why these
instructions, why these instructions in this order with these emphasis - is
a complicated, painful and slow process, precisely because the originator of
an idea - the founder or some other person with an idea - has to give up the
idea and let it out into the world, where it will be subjected to change by
others.&lt;/p&gt;
&lt;p&gt;Loss of control is always violent and painful, and as with any new thing
given a permanent form, there is always negotiation about the details.
Giving birth to anything: It&amp;rsquo;s exhausting. It&amp;rsquo;s not a one step process. A
founder has an idea and a plan, but in many parts it is still early,
untested and vague.&lt;/p&gt;
&lt;p&gt;They put things into words, and the words are being tried out - can we work
by these instructions, or are there things unclear? Can the instructions
work, or does the plan need change? Can it be improved? Can it be applied to
other, similar things? Iterations happen. Do we go deep or wide - do we
specialize and improve this application of a plan, or do we try to apply the
plan as is to as many things as possible first?&lt;/p&gt;
&lt;p&gt;Again, negotiation, and consequently, exhaustion.&lt;/p&gt;
&lt;p&gt;So why is everything so complicated? Because companies are broken. All of
them.&lt;/p&gt;
&lt;p&gt;Their engine, their program, their processes, are magnifications of the mind
of the founder or other influential people at the top. The entire corporate
mechanism is built to do exactly this.&lt;/p&gt;
&lt;p&gt;And with this mechanism not only the original idea is being magnified and
copied to many minds, but other aspects of the original mind are, too. And
because the source was a person, with flaws, they too, are being magnified
and multiplied.&lt;/p&gt;
&lt;p&gt;Do you like it around here? Well, that&amp;rsquo;s because like all corporate
environments, this one is broken, too. It just so happens that the breakage
around here is more compatible with your own flaws than elsewhere.&lt;/p&gt;
&lt;p&gt;Yes, your work environment sucks. They all do.&lt;/p&gt;
&lt;p&gt;Find the one that sucks in a way that suits your needs.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Twitter so: Testing in Production</title>
      <link>https://blog.koehntopp.info/2017/08/01/twitter-so-testing-in-production.html</link>
      <pubDate>Tue, 01 Aug 2017 09:25:02 +0000</pubDate>
      
      <guid>https://blog.koehntopp.info/2017/08/01/twitter-so-testing-in-production.html</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://twitter.com/matthewrdutton/status/892007581639737344&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Matthew Dutton:&lt;/a&gt;


»@mipsytipsy I thought &amp;ldquo;You have to test in production&amp;rdquo; was a bold statement
and would love to hear more of your thoughts on the
topic.«&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://twitter.com/mipsytipsy/status/892048269651484672&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Charity Majors:&lt;/a&gt;


»Hmmm, you&amp;rsquo;re not the only one to call this out. I&amp;rsquo;ll add it to my list of
&amp;ldquo;articles to write someday&amp;rdquo; ? but here&amp;rsquo;s the gist: We have always tested in
production, just not well. And obviously, I&amp;rsquo;m not advising anyone to do
&lt;em&gt;less&lt;/em&gt; of the usual pre-production testing methods, but at some point, esp
with distributed systems, you just can&amp;rsquo;t usefully mimic the qualities of
size and chaos that tease out the long thin tail of bugs. Imagine trying to
spin up a staging copy of Facebook, or the national electrical grid! You
can&amp;rsquo;t, and have sharply diminished returns. If you can catch 80-90% of the
bugs with 10-20% the effort (and you can), the rest is more usefully poured
into making production resilient.&lt;/p&gt;
&lt;p&gt;[How do you do testing in production?] Canarying; automated canarying and
promotion in stages; empowering your developers to explore live production
systems with e.g. @honeycombio (hi), making rollbacks wicked fast and
reliable; instrumentation; education and training, feature flags a la
@launchdarkly. all great use of time. Basically what I&amp;rsquo;m trying to say is,
embrace failure. Get used to the inevitability and lean into it, &lt;em&gt;iff&lt;/em&gt; you
have a system like this. If you&amp;rsquo;ve got a rails app and five engineers then
ignore everything I&amp;rsquo;m saying until the moment is right :)&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://twitter.com/f3ew/status/892277138329612289&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Devdas Bhagat:&lt;/a&gt;

 »Just
tagging potental speakers who know a bit about that topic.«&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://twitter.com/isotopp/status/892281239109083136&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Kristian Köhntopp:&lt;/a&gt;

&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Decouple rollout and activation (feature flags, experiment framework)&lt;/li&gt;
&lt;li&gt;Low latency monitoring&lt;/li&gt;
&lt;li&gt;Monitor the shit out of everything&lt;/li&gt;
&lt;li&gt;Implement schema changes with old and new version being live simultaneously&lt;/li&gt;
&lt;li&gt;For each change, know your providers, know your consumers Strategy: Make testing in
production as safe as you can possibly make it.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;That has manifold returns: It makes developers production aware; builds
knowledge in handling real catastrophes in regular operational situations;
builds confidence and competence; you get actual measurements, which is good
calibration. In general, you build antifragility.&lt;/p&gt;
&lt;p&gt;Testing in Production also allows testing of features for commercial
viability fast, before you invest lots of development resources to build
them out. So it enables you to throw away 95% of the code before it is
written. That&amp;rsquo;s actually the most valuable part of it.&lt;/p&gt;
&lt;p&gt;Content slightly edited to make it easier to read.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Rolling out patches and changes, often and fast</title>
      <link>https://blog.koehntopp.info/2017/05/18/rolling-out-patches-and-changes-often-and-fast.html</link>
      <pubDate>Thu, 18 May 2017 10:44:13 +0000</pubDate>
      
      <guid>https://blog.koehntopp.info/2017/05/18/rolling-out-patches-and-changes-often-and-fast.html</guid>
      <description>&lt;p&gt;Fefe had a &lt;a href=&#34;https://blog.fefe.de/?ts=a7e82d0e&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;short pointer&lt;/a&gt;

 to an article
&lt;a href=&#34;https://www.cs.columbia.edu/~smb/blog/2017-05/2017-05-12.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Patching is Hard&lt;/a&gt;

.
It is, but you can make it a lot easier by doing a few things right. I did s small
writeup (&lt;a href=&#34;https://blog.fefe.de/?ts=a7e262f4&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;in German&lt;/a&gt;

) to explain this,
which Fefe posted.&lt;/p&gt;
&lt;p&gt;I do have an older talk on this, titled &amp;ldquo;8 rollouts a day&amp;rdquo; (more like
30 these days). There are
&lt;a href=&#34;https://www.slideshare.net/isotopp/8-rollouts-a-day&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;slides&lt;/a&gt;

 and a
&lt;a href=&#34;https://www.youtube.com/watch?v=rzU1UtUpyTI&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;recording&lt;/a&gt;

. The Devops talk
&amp;ldquo;Go away or I will replace you with a little shell script&amp;rdquo; addresses it,
too, but from a different angle
(&lt;a href=&#34;https://www.slideshare.net/isotopp/go-away-of-i-will-replace-you-with-a-little-shell-script-english&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;slides&lt;/a&gt;

,
&lt;a href=&#34;https://www.youtube.com/watch?v=e0CCv7pSK4s&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;recording&lt;/a&gt;

).&lt;/p&gt;
&lt;p&gt;Here is the english version of my writeup.&lt;/p&gt;
&lt;p&gt;The &lt;a href=&#34;https://www.cs.columbia.edu/~smb/blog/2017-05/2017-05-12.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Patching is Hard&lt;/a&gt;

 article
says:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Patching is hard? Yes—and every major tech player, no matter
how sophisticated they are, has had catastrophic failures when
they tried to change something. Google once bricked
Chromebooks with an update. A Facebook configuration change
took the site offline for 2.5 hours. Microsoft ruined network
configuration and partially bricked some computers; even their
newest patch isn&amp;rsquo;t trouble-free. An iOS update from Apple
bricked some iPad Pros. Even Amazon knocked AWS off the air.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Where I am working we made the same observation. 100% uptime is
impossible, but management needs metrics and controls to
understand if we are still on the right track. We do have an
outage budget. That means we are measuring the actual current
business and compare with the predicted business. If a failed
rollout creates a loss of (potential) income, we can tell how
much that is and deduct that from the outage budget. We are
trying to make the budget as precisely as possible. That does
not mean we are trying to create outages on purpose, but having
fewer outages than the budget allows may mean that we are not
moving fast enough and have become complacent in what we are
doing.&lt;/p&gt;
&lt;p&gt;Rolling out often is useful, because then change sets are small
and easy to check, much easier than large and hard to understand
changes. So we do need to roll out often in order to maintain
speed. Rollout problems tend to manifest in subsystems where we
do not roll out often enough. Usually secondary changes, changes
in dependencies and libraries, accumulate and then the rollout
fails. The solution is to roll out even if the code did not
change (that is, we roll out for the sake of keeping
dependencies current).&lt;/p&gt;
&lt;p&gt;This is a very tangible form of representing technical debt:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;the larger the diff between production and trunk is, the more
likely moving trunk to production is going to result in a
failure.&lt;/li&gt;
&lt;li&gt;To make patching safe you have to do it often.&lt;/li&gt;
&lt;li&gt;To be able to patch often, you need to make patching and
rolling out an operative process and not an upgrade/migration
project.&lt;/li&gt;
&lt;li&gt;To make rollouts and operative thing it is useful to
make testing in production safe and survivable.&lt;/li&gt;
&lt;li&gt;To be able to test in production, the following things are
useful:
&lt;ul&gt;
&lt;li&gt;have at most two versions of a change to a certain system.
Do not do three phase or multiphase rollouts. Finish one
change before you do the next one.&lt;/li&gt;
&lt;li&gt;have overcapacity. A change might make it necessary to
provide more machinery or more computer power or more memory
for a short time. You need to have that or be able to
provision this on short notice. Being efficient means having
no reserves, no elasticity.&lt;/li&gt;
&lt;li&gt;separation of code distribution and code activation. That means feature
flags and experiments in your code. The same rollout must be
able to switch at runtime between old and new behavior.&lt;/li&gt;
&lt;li&gt;changes to persistent data structures require that you update both
versions of the structure concurrently in order for old and
new code to be able to co-exist.&lt;/li&gt;
&lt;li&gt;you need to know what is going on. Have a good monitoring, central log
collection, good search on all of that. There is a thing
called monitoring lag, the distance in time between a thing
happening and the time you will see this in your monitoring.
Measure that lag and have it shown on each screen. Alert on
monitoring lag.&lt;/li&gt;
&lt;li&gt;have a culture of failure that focuses on improvement and
learnings. Check out the search term &amp;ldquo;blameless postmortem&amp;rdquo;
and read up on this.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;It&amp;rsquo;s not actually rocket science, but it will make things a lot better
around you.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Stört euch bitte nicht an dem Denglisch, das ist in der Ops-Abteilung von
internationalen Firmen durchaus normal :-)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Indeed. The office is in Amsterdam, and the language at work is English.
When I am thinking about work, I am doing it in English. Writing about work
in German means that I will use a lot of english terms for the things I am
trying to describe, because I&amp;rsquo;d have to search for appropriate German terms
and concepts first and that would interrupt the flow. Sorry about that.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Canary Skill Endorsements</title>
      <link>https://blog.koehntopp.info/2017/05/09/canary-skill-endorsements.html</link>
      <pubDate>Tue, 09 May 2017 09:11:18 +0000</pubDate>
      
      <guid>https://blog.koehntopp.info/2017/05/09/canary-skill-endorsements.html</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://twitter.com/iantien/status/861248220428738560/photo/1&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;p class=&#34;md__image&#34;&gt;
  &lt;img src=&#34;https://blog.koehntopp.info/uploads/2017/05/canary-skill-endorsements-1024x768.jpg&#34; alt=&#34;&#34;  /&gt;
&lt;/p&gt;

&lt;/a&gt;

&lt;/p&gt;
&lt;p&gt;&amp;ldquo;&lt;a href=&#34;https://twitter.com/iantien/status/861248220428738560/photo/1&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Canary Skill Endorsements&lt;/a&gt;

&amp;rdquo;:
If you see them being used in a letter sent to you by a recruiter, you go
all &lt;a href=&#34;http://www.snopes.com/music/artists/vanhalen.asp&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Van Halen when they spot a brown M&amp;amp;M&lt;/a&gt;

.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>The Interview in the Enterprise</title>
      <link>https://blog.koehntopp.info/2017/03/27/the-interview-in-the-enterprise.html</link>
      <pubDate>Mon, 27 Mar 2017 13:43:47 +0000</pubDate>
      
      <guid>https://blog.koehntopp.info/2017/03/27/the-interview-in-the-enterprise.html</guid>
      <description>&lt;p&gt;See also
&lt;a href=&#34;http://blog.koehntopp.info/index.php/919-hello-i-am-interviewing-people/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;an earlier article&lt;/a&gt;


in the blog, and
&lt;a href=&#34;http://www.yegor256.com/2017/02/21/say-no-to-google-recruiters.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Why I Don&amp;rsquo;t Talk to Google Recruiters&lt;/a&gt;


mentioned in the comments. Where I work we have regular round tables, in
which you can talk and ask questions to middle management from other
departments than your own. I had the opportunity to talk to a person who
manages development priorities and staffs teams, and who of course has some
insight into hiring and the interview process. That was very enlightening.&lt;/p&gt;
&lt;p&gt;For example, finding people to hire in a large organisation is a hard job.
Hiring rates are quite fixed, so in order to find people to hire you need to
go through a relatively fixed, larger number of resume reviews, phone
screens and face to face interviews. Assume that for each three people you
would want to hire you need to sift through 100 resumes - that&amp;rsquo;s 10.000
resumes to look at for 300 people to hire. And it can not be automated.&lt;/p&gt;
&lt;p&gt;An interview process for hiring, then moving people and their families, and
finally on-boarding has latency - several months, often half a year, until
the move and first day at work, and then another three months of on-boarding
and three more months of team formation (the four *ormings).&lt;/p&gt;
&lt;p&gt;I agree with whiteboard programming being a useless exercise in hiring
interviews, and prefer other methods to validate credentials and capability -
I like to ask people &amp;ldquo;Choose a previous project from your resume and tell
me about it. What was that about, what was hard, and how did you handle
this? What did you like about your solution, and what would you be doing
differently in retrospective?&amp;rdquo; I like to hear about things they are proud
of, and things they have learned, and I like to hear about possible choices
and reasons for preferring one over the other. But this&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Thanks for your email. I&amp;rsquo;m very interested indeed. I have nothing against
an interview. However, there is one condition: I have to be interviewed by
the person I will be working for. By my future direct manager.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;is not going to work in any larger organisation, and for sure not in the
place I work in.&lt;/p&gt;
&lt;p&gt;&amp;ldquo;We don&amp;rsquo;t hire for a specific position, except for very few and distinct job
profiles. Certainly not for developer positions.&amp;rdquo; has been explained to me.
&amp;ldquo;We would for example hire for specific positions in deep infra, Network
Engineers or Database Administrators, but that&amp;rsquo;s rare and an exception.&amp;rdquo;&lt;/p&gt;
&lt;p&gt;When I asked for the why, we ended speaking about one core work of that
manager, and how an agile organisation at scale can work. In our case, the
organisation has a very specific culture and way of working, and of course a
huge established codebase. The purpose of on-boarding is to explain our way
of working and our past choices to beginners, and to familiarise them with
our vocabulary, toolset and environment in a safe way.&lt;/p&gt;
&lt;p&gt;After completing this, beginners like everyone else, can enter the &amp;ldquo;Pick
your next team&amp;rdquo; process, in which wishes and requests, skills and interests
are being matched, and in which people can move laterally through the
organisation. It may very well be that the job and team you are applying for
after completing on-boarding did not exist yet when you were interviewed -
and in fact that&amp;rsquo;s not entirely unlikely, considering growth and the speed
of change in the business environment.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Automatisierung und Skalierung - Teil 2</title>
      <link>https://blog.koehntopp.info/2011/02/18/automatisierung-und-skalierung-teil-2.html</link>
      <pubDate>Fri, 18 Feb 2011 20:47:49 +0000</pubDate>
      
      <guid>https://blog.koehntopp.info/2011/02/18/automatisierung-und-skalierung-teil-2.html</guid>
      <description>&lt;p&gt;Dies ist der 2. Teil zum Thema Automatisierung von Systemverwaltungsaufgaben.
&lt;a href=&#34;https://blog.koehntopp.info/2011/02/17/automatisierung-und-skalierung.html&#34;&gt;Den ersten Teil gibt es hier&lt;/a&gt;

.&lt;/p&gt;
&lt;p&gt;In jenem Text habe ich mit dem Beispiel eines Installationsservers gearbeitet und ich schrieb darüber:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Was also wie ein wenig Gescripte aussieht, ist in Wirklichkeit die
Definition und Realisierung eines Prozesses - genau genommen die
Formalisierung eines Prozesses &amp;ldquo;Server aufsetzen&amp;rdquo; in der Firma. Das Ziel
des Prozesses ist die Produktion einer neuen Maschine, die einer gewissen
Spezifikation möglichst gut entsprechen soll. Dabei sind die Prozeßziele
die möglichst genaue Einhaltung der Spezifikation, und die möglichst
schnelle Abwicklung des Auftrages. Dabei ist das Wissen eines Experten in
Programmcode auskristallisiert worden - den Hilfs-Scripten und Anpassungen
des Installationsservers.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Ich muß die wichtigen Punkte hier noch einmal herausstellen: Wenn wir in
einem Umfeld solche Aufgaben automatisieren, dann wollen wir damit
verschiedene Dinge erreichen.&lt;/p&gt;
&lt;p&gt;Zum einen soll die gewünschte Operation, etwa die Installation einer Kiste,
reproduzierbar gemacht werden. Das kann nur dann gelingen, wenn die
Automatisierung dieses Prozesses vollständig ist, &lt;em&gt;die Anzahl der manuellen
Arbeitsschritte zur Nachbearbeitung also Null ist&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Denn wenn während einer solchen Änderung an einer Maschine auch nur ein
Arbeitsschritt von Hand durch einen Sysadmin ausgeführt wird, dann besteht
die Gefahr, daß diese Änderung nicht korrekt oder uneinheitlich gemacht
wird, und das gefährdet die nachfolgenden automatischen
Bearbeitungssschritte.&lt;/p&gt;
&lt;p&gt;Außerdem geht die Parallelisierbarkeit der Operation verloren, wenn noch
manuelle Arbeitsschritte notwendig sind: Egal wie viele Kisten wir
zeitgleich durch den Prozeß ziehen können, am Ende müssen die manuellen
Schritte nacheinander Kiste für Kiste durch einen menschlichen Admin
abgearbeitet werden, sind also wieder serialisiert. Das heißt, es gibt einen
Punkt, der vermutlich gar nicht so weit draußen liegt, an dem der ganze
Prozeß wieder bottlenecked.&lt;/p&gt;
&lt;p&gt;Und schließlich ist es so, daß wir durch die Automatisierung einer Operation -
hier der Installationsprozeß  - das notwendige Expertenwissen zur
Durchführung in ein Script verpacken. Das Wissen um das &amp;ldquo;Wie&amp;rdquo; wird
externalisiert, damit reproduzierbar und einem Diskurs (durch Patches)
zugänglich gemacht.&lt;/p&gt;
&lt;p&gt;Baut man da noch eine schöne Bedienoberfläche drüber, hat man die Operation
sogar produktisiert: Sie kann nun durch Personal ausgelöst werden, das von
den Details nichts mehr weiß und wissen muß und daher niedriger qualifiziert
sein kann als das Personal, das den Prozeß entwickelt hat.&lt;/p&gt;
&lt;p&gt;&lt;p class=&#34;md__image&#34;&gt;
  &lt;img src=&#34;https://blog.koehntopp.info/uploads/automatisierter_prozess.png&#34; alt=&#34;&#34;  /&gt;
&lt;/p&gt;

&lt;/p&gt;
&lt;p&gt;Der automatisierte Prozeß und seine Ziele/Effekte.&lt;/p&gt;
&lt;p&gt;Zieht man das konsequent durch, bekommt man innerhalb des Systembetriebes
eine Trennung zwischen Personen, die Systeme bedienen (&amp;ldquo;Operator&amp;rdquo;) und
Personen, die Prozesse automatisieren, indem sie die Interfaces für
Operatoren und die Funktionalität dahinter bauen.&lt;/p&gt;
&lt;p&gt;Letztere Gruppe entwickelt Programme, genau wie die Entwickler in der
Entwicklungsabteilung - es sind Entwickler
(&lt;a href=&#34;http://teddziuba.com/2010/10/taco-bell-programming.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;auch wenn es Leute gibt, die das bestreiten&lt;/a&gt;


und die meinen, das Gescripte da sei keine richtige Programmierung).&lt;/p&gt;
&lt;p&gt;Solche Entwickler bauen Code zur automatisierten Systemverwaltung, also
Infrastruktur, im Gegensatz zu den regulären Entwicklern, die an neuen
Features bauen. Daher nenne ich die einen Infrastrukturentwickler und die
anderen Featureentwickler.&lt;/p&gt;
&lt;p&gt;Andere Leute nennen das
&lt;a href=&#34;http://www.jedi.be/blog/2010/02/12/what-is-this-devops-thing-anyway/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;DevOps&lt;/a&gt;

,
und integrieren die Infrastrukturentwickler tiefer in die
Featureentwicklung, die dann die Belange von Operations gleich bei der
Entwicklung der Software von Anfang an mit berücksichtigen soll. Ich halte
das nicht unbedingt für glücklich, weil die geforderten Qualifikationen
andere sind, und weil die Denkweise des Infrastrukturentwicklers eine andere
ist als die eines Featureentwicklers.&lt;/p&gt;
&lt;p&gt;Featureentwickler, insbesondere im Bereich der agilen Methoden, sind ein
wenig wie Teletubbies - sie sind timeboxed, und wenn bestimmte Dinge beim
Ablaufen der Timebox nicht fertig werden, dann werden diese Features eben
gekippt und auf ein späteres Release verschoben. Das macht aber nix, denn
man kann die Features, die fertig geworden sind, schon mal releasen und die
Leute, die das gebaut haben, trotzdem loben: Ui, das habt ihr aber fein
gemacht und so schön bunt! Oder anders gesagt: Auch schon für Teil-Lösungen
gibt es oft einen inkrementellen Payoff.&lt;/p&gt;
&lt;p&gt;Im Bereich der Infrastrukturentwicklung gibt es das eher nicht, eben genau
wegen der Anforderung &amp;ldquo;genau Null manuelle Eingriffe&amp;rdquo;. Für viele Aufgaben
funktioniert timeboxing hier nicht, sondern man muß die Aufgabe ganz,
komplett und vollständig erledigen, erst dann kann man das erste Mal
wirklich Gewinne durch die Erledigung der Aufgabe einstreichen - dann aber
auch gleich in voller Höhe. Die Führung eines Teams von
Infrastrukturentwicklern muß daher eher militärisch erfolgen: Klar
definierte und abgegrenzte Ziele, dann rein, die Mission erledigen und
wieder raus, keine halben Sachen.&lt;/p&gt;
&lt;p&gt;Daher ist in der Infrastrukturentwicklung
&lt;a href=&#34;http://de.wikipedia.org/wiki/Scrum&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Scrum&lt;/a&gt;

 eine Methode, die eventuell nicht
passend ist - schon gar nicht, wenn auf der Prioritätenliste Featureentwicklung mit
Infrastrukturentwicklung um Prioritäten kämpft. Denn Scrum limitiert die
Arbeit pro Iteration durch das  &lt;a href=&#34;http://de.wikipedia.org/wiki/Scrum#Selected_Backlog&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Selected Backlog&lt;/a&gt;

,
und da Featureentwicklung dem Betrieb direkt Einnahmen bringt, während
Infrastrukturentwicklung in vielen eher als Geldsenke gesehen wird, führt
das schnell dazu, daß jede Menge
&lt;a href=&#34;http://en.wikipedia.org/wiki/Technical_debt&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Technical Debt&lt;/a&gt;

 aufgebaut wird,
d.h. wichtige Infrastrukturarbeit liegen bleibt.&lt;/p&gt;
&lt;p&gt;Man kann versuchen, da mit
&lt;a href=&#34;http://en.wikipedia.org/wiki/Priority_inversion&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Priority Inversion&lt;/a&gt;


drum herum zu arbeiten, d.h. daß Infrastrukturprojekte die Priorität der
Featureprojekte erben, für die sie Vorbedingung zur Realisierung sind, aber
meiner persönlichen Erfahrung nach wird das nicht strikt genug gehandhabt.
Außerdem verhindert es proaktive Infrastrukturarbeiten, und rein reaktive
Systemadministration ist ein sehr steiler Weg ins Chaos.&lt;/p&gt;
&lt;p&gt;Aber auch wenn Infrastrukturentwicklung von der Featureentwicklung getrennt
ist, etwa weil eine Trennung von Operations und Development existiert, ist
Scrum oft nicht die geeignete Methode, da Timeboxing bei einer
Aufgabenstellung nicht so gut funktioniert, die erst dann Gewinne bringt,
wenn die Aufgabe 100% erledigt ist. Besser verwendet man eine
&lt;a href=&#34;http://de.wikipedia.org/wiki/Kanban_in_der_IT#Unterschiede_zwischen_Kanban_und_Scrum&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Kanban&lt;/a&gt;

-Variante
und paßt diese dann auf die lokalen Erfordernisse der Organisation und die
Mentalität des Teams an.&lt;/p&gt;
&lt;p&gt;&lt;p class=&#34;md__image&#34;&gt;
  &lt;img src=&#34;https://blog.koehntopp.info/uploads/greenhopper.png&#34; alt=&#34;&#34;  /&gt;
&lt;/p&gt;

&lt;/p&gt;
&lt;p&gt;Jira Greenhopper Extension mit der Darstellung eines Migrationsprojektes.&lt;/p&gt;
&lt;p&gt;Setzt man das um, stellt man binnen 6 bis 12 Monaten fest, daß sich die Art
der Aufgaben und der geforderten Qualifikationen innerhalb des ehemaligen
Sysadmin-Teams sehr verschieben. Zwar sind immer noch Kenntnisse von
bestimmten Subsystemen und ihrer Arbeitsweise notwendig, aber die neu
geschaffenen Infrastrukturentwickler brauchen tatsächlich Kenntnisse einer
(interpretierten) Programmiersprache (PHP, Perl, Python, Ruby) im Gegensatz
zu einer Scriptsprache (Shell) - genau genommen wird man sich im Team auf
eine gemeinsame Plattformsprache einigen müssen, ein gemeinsames Repository
haben, und auch sonst eine ganze Menge Dinge vereinheitlichen müssen.&lt;/p&gt;
&lt;p&gt;Die Arbeitsweise des Teams ändert sich ebenfalls - wenn die Umstellung
gelingt, wird sich nach Ablauf des ersten Jahres kein Sysadmin mehr auf
einer Kiste einloggen müssen, weil ssh von func, puppet, LDAP und einer
Datenbank zum Konfigurationsmanagement abgelöst worden ist.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Automatisierung und Skalierung</title>
      <link>https://blog.koehntopp.info/2011/02/17/automatisierung-und-skalierung.html</link>
      <pubDate>Thu, 17 Feb 2011 17:09:00 +0000</pubDate>
      
      <guid>https://blog.koehntopp.info/2011/02/17/automatisierung-und-skalierung.html</guid>
      <description>&lt;p&gt;Ich hatte im Vorfeld der OSDC 2011 eine interessante Unterhaltung mit Julian
Hein zum Thema Automatisierung. Er wollte, daß ich einmal erkläre, warum man
das eigentlich tut - und was man da eigentlich tut.&lt;/p&gt;
&lt;p&gt;Die Antwort ist ein wenig länger, und weil ich dieses Jahr nicht zur OSDC
fahren kann und dort auch nicht reden kann, will ich einmal versuchen,
meinen Text zumindest in groben Zügen hier aufzuschreiben.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Die Zusammenfassung ist jedenfalls, daß Automatisierung kein technisches
Problem ist.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Aber von vorne:&lt;/p&gt;
&lt;p&gt;Ich komme von MySQL, aus einem Consultingumfeld, und ich habe dort mit
Kunden in jeder möglichen Betriebsgröße zu tun gehabt - von einzelnen MySQL
Servern hin bis zu Leuten, die wirklich große Setups am Laufen gehabt haben.&lt;/p&gt;
&lt;p&gt;Darum habe ich mich vor Jahren im Vorfeld der MySQL Enterprise Manager (MEM,
&amp;ldquo;Merlin&amp;rdquo;) Entwicklung auch mit dem Merlin-Team unterhalten und versucht zu
erklären, was ich mir unter einem &amp;ldquo;Enterprise Manager&amp;rdquo; denn so vorstelle und
wieso. Die Entwicklung ist dann aus einer ganzen Reihe von inzwischen
hinfällig gewordenen betriebsinternen Gründen ganz anders gelaufen, aber das
ist eine andere Geschichte, die ein anderes Mal erzählt werden soll.&lt;/p&gt;
&lt;p&gt;Inzwischen bin ich in einer Firma, die noch vor drei oder vier Jahren eine
gerade eben zweistellige Gesamtanzahl von Servern am Laufen hatte, und deren
Maschinenpark sich jetzt im vierstelligen Bereich bewegt - mit einer großen
dreistelligen Anzahl von MySQL-Instanzen. Ohne Automatisierung könnten wir
das mit der vorhandenen Anzahl von Personen gar nicht stemmen.&lt;/p&gt;
&lt;p&gt;Aber Automatisierung ist mehr, als einfach nur einen Haufen Scripte zu
schreiben, die dann Aufgaben übernehmen, obwohl es wohl in den meisten
Firmen so anfängt.&lt;/p&gt;
&lt;p&gt;Zum Beispiel:&lt;/p&gt;
&lt;p&gt;Jemand muß einen Server zum wiederholten Male installieren, oder schlimmer
noch, einer anderen Person erklären, wie man &amp;ldquo;bei uns&amp;rdquo; Server installiert,
also was unter allen möglichen Wahlmöglichkeiten die Entscheidungen und
Designideen sind, die &amp;ldquo;bei uns&amp;rdquo; getroffen wurden und wieso.&lt;/p&gt;
&lt;p&gt;In Läden, die ein wenig schlauer arbeiten, geht das meistens mit der
Installation eines Installservers einher, und so kann man Kisten dann aus
dem Netz booten, und sie malen sich dann ein Betriebssystem und einen Haufen
Zusatzsoftware und Konfiguration auf die Platte. Dabei werden dann noch mehr
Entscheidungen und Überlegungen getroffen, die durch den automatisierten
Installationsprozeß umgesetzt werden.&lt;/p&gt;
&lt;p&gt;Was also wie ein wenig Gescripte aussieht, ist in Wirklichkeit die
Definition und Realisierung eines Prozesses - genau genommen die
Formalisierung eines Prozesses &amp;ldquo;Server aufsetzen&amp;rdquo; in der Firma. Das Ziel des
Prozesses ist die Produktion einer neuen Maschine, die einer gewissen
Spezifikation möglichst gut entsprechen soll. Dabei sind die Prozeßziele die
möglichst genaue Einhaltung der Spezifikation, und die möglichst schnelle
Abwicklung des Auftrages. Dabei ist das Wissen eines Experten in
Programmcode auskristallisiert worden - den Hilfs-Scripten und Anpassungen
des Installationsservers.&lt;/p&gt;
&lt;p&gt;Die weitere Diskussion über den Prozeß findet in Form von Patches zu diesem
Code ihren Niederschlag - zwar redet man über den Prozeß und wie man ihn
verändern, anpassen oder erweitern will, aber keine dieser Absprachen hat
eine Auswirkung auf die Durchführungen des Prozesses, bevor der
entsprechende Patch nicht geschrieben und im
&lt;a href=&#34;http://en.wikipedia.org/wiki/Distributed_Concurrent_Versions_System&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;DCVS&lt;/a&gt;

 eingecheckt worden ist.&lt;/p&gt;
&lt;p&gt;Aber Code ist nur ein Teil eines Prozesses - meistens die technische Seite
der ganzen Geschichte. Prozesse haben in Wirklichkeit immer mindestens drei
Aspekte - neben der Technik- noch die Organisations- und die Personalseite
der Angelegenheit. Außerdem kommt zu jedem Definitionsteil (den Regeln) auch
noch ein Kontrollteil (die Einhaltung der Regeln messen) dazu.&lt;/p&gt;
&lt;p&gt;&lt;p class=&#34;md__image&#34;&gt;
  &lt;img src=&#34;https://blog.koehntopp.info/uploads/verkehr.png&#34; alt=&#34;&#34;  /&gt;
&lt;/p&gt;

&lt;/p&gt;
&lt;p&gt;Straßenverkehr&lt;/p&gt;
&lt;p&gt;Ein bekannter und von jedem verstandener Prozeß ist zum Beispiel der
öffentliche Straßenverkehr. Dieser hat eine organisatorische Seite -
Verkehrsregeln, Definition von Verkehrszeichen und so weiter, eine
personelle Seite - Ausbildung der Verkehrsteilnehmer in der Schule, der
Fahrschule und so weiter, und eine technische Seite - Fahrzeugsysteme,
stationäre Verkehrssysteme wie Ampeln, und so weiter. Für jeden Bereich gibt
es Kontrollteile - die Verkehrspolizei überwacht die Einhaltung des
organisatorischen Teils, die Fahrprüfung ist eine Kontrolle der Ausbildung,
und der TÜV ist eine Kontrolle der Technik.&lt;/p&gt;
&lt;p&gt;Ebenso finden wir diese Teile in kleiner bei unserem
Server-Installationsprozeß wieder. Wir finden einen organisatorischen Teil,
also eine Diskussion darüber, was wir mit dem Installserver für ein Problem
lösen wollen und welche nicht (Abgrenzung und Scope: &amp;ldquo;Nach der Installation
des Basissystem wird dieses durch Puppet personalisiert, der Installserver
soll nur eine allgemeine Basisinstallation durchführen&amp;rdquo;). Wir finden einen
Personalteil, meistens in Form von Wikipages mit Dokumentation realisiert,
und dazu Fortbildungsveranstaltungen für neue Mitarbeiter (&amp;ldquo;Unser
Installserver und wie man ihn benutzt und anpaßt&amp;rdquo;). Und wir finden den
technischen Teil, also den Server selber.&lt;/p&gt;
&lt;p&gt;Die Kontrollinstanzen sind bei vielen Prozessen weniger stark ausgeprägt als
bei einem großen und unter Umständen gefährlichen System wie dem
Straßenverkehr, existieren aber je nach Wichtigkeit des Prozesses durchaus -
zum Beispiel wird von einem neuen Sysadmin nach dem Kurs verlangt, eine
triviale Änderung am Installserver durchzuführen und dann eine Kiste mit dem
Teil selbstständig, aber unter Aufsicht zu installieren. Und natürlich guckt
man, ob der Installserver noch geht und ob die gelieferten Ergebnisse noch
den Anforderungen entsprechen.&lt;/p&gt;
&lt;p&gt;Merlin, also der MySQL Enterprise &lt;strong&gt;Manager&lt;/strong&gt; ist nun ein gutes Beispiel für
das Versagen bei der Umsetzung eines solchen Konzeptes. Also, MEM ist ein
gutes und nützliches Monitoring-Werkzeug und wir könnten eine Installation
unserer Größe ohne die Hilfe von Merlin nicht fahren. Aber im Lichte der
voranstehenden Diskussion kann man erkennen, wie Merlin zu kurz greift.&lt;/p&gt;
&lt;p&gt;Das beginnt schon damit, daß Merlin überhaupt genau gar nichts &lt;em&gt;managed&lt;/em&gt;. Es
ist ein reines Monitoringwerkzeug, das zwar Graphen liefert, Queries findet
oder Alarme generiert, aber es &lt;em&gt;automatisiert&lt;/em&gt; nichts, genau genommen
verändert es nichts an einem laufenden System. Es ist ein &lt;strong&gt;Monitor&lt;/strong&gt;, aber
kein &lt;strong&gt;Manager&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Wollte man die Prozesse in einem großen MySQL Deployment automatisieren,
dann müßte man sich erst einmal einen Katalog von Tätigkeiten machen, die in
Operations und in Development bei einer Datenbank so anfallen:&lt;/p&gt;
&lt;p&gt;Der Operations DBA plant ein Deployment, installiert Datenbanken, prüft und
verändert Konfigurationen (Configuration Management), muß deswegen Server
starten und stoppen, plant und führt Upgrades durch (Change Management),
überwacht den Betrieb (Monitoring), managed lokale Betriebsstörungen
(Incidents), findet gemeinsame Ursachen (Problem Management) und
kommuniziert mit dem Upstream (Support des Herstellers), und prüft ob die
Systemleistung in Zukunft noch ausreicht (Capacity Management). Er
kontrolliert Datensicherung und Restore (Backup, Desaster Recovery).&lt;/p&gt;
&lt;p&gt;Der Development DBA ist Teil des Entwicklungsprozesses (sitzt im Scrum
Planning und so weiter mit dabei), hilft und berät beim Schemadesign und der
Datenmodellierung, beim Query Review, findet im Betrieb schlechte Queries,
hilft und berät bei der Optimierung, und plant zusammen mit dem Operations
DBA Schemaänderungen und Konfigurationsänderungen.&lt;/p&gt;
&lt;p&gt;Dann würde man sich überlegen und durch Umfrage beim Kunden feststellen, wie
diese Profile in verschiedenen Systemgrößen den ausgestaltet sein werden -
denn wer 10^0 oder 10^1 Server insgesamt am Laufen hat, der wird kaum
zwischen Operations und Development DBA unterscheiden und nicht alle diese
Teilprozesse werden als eigenständige Gebiete identifizierbar sein. Kommt
man dann auf Installationen von 10^2, 10^3 oder 10^4 Servern, sieht das
alles plötzlich ganz anders aus und trifft auf ganz andere Bedürfnisse in
der Ausgestaltung.&lt;/p&gt;
&lt;p&gt;Denn obwohl formell die gleichen Leistungen für den Betrieb erbracht werden
müssen, ist durch die schiere Größe der Installation mit einem Mal ein ganz
anderer Problemkomplex im Gesamtbild wichtig.&lt;/p&gt;
&lt;p&gt;Zum Beispiel: Um 500 Server in 2 Dutzend Replikationshierarchien an 2
Standorten von MYSQL 5.1 nach 5.5 zu aktualisieren, ist ein Haufen Tests und
dann Upgrades notwendig. Aber selbst wenn man es schafft, 5 Server pro Tag
abzuarbeiten (jeder je nach Größe mit 100G bis 10.000G an Daten), dann
braucht man 100 Arbeitstage, also etwas weniger als ein halbes Jahr, um das
Upgrade auszurollen, falls es nicht zu Komplikationen kommt.&lt;/p&gt;
&lt;p&gt;Wünschenswert wäre es aber, das Thema binnen eines Monats (also 20
Arbeitstagen) vom Tisch zu haben - dazu muß man aber Techniken entwickeln,
mit denen man 50 Server oder mehr pro Tag geregelt bekommt. Das ist in
einigen Bereichen der Installation schon von der Plattenleistung und der
Netzwerkkapazität her problematisch, also redet hier der Operations DBA
plötzlich mit Sysadmin, Storage und Network Engineering, die
Vorraussetzungen schaffen müssen, um solche Dinge im regulären Betrieb
abwickeln zu können - denn das nächste Release kommt binnen eines Jahres mit
Sicherheit und Upgrades dürfen keine Ausnahmesituation sein, sondern müssen
als Bestandteil des normalen Systembetriebes durchgeführt werden können.&lt;/p&gt;
&lt;p&gt;Und schon werden die Bereiche Organisation und Personal bei nur 10^3 Servern
im Laden dicke fette Punkte auf dem Managementradar.&lt;/p&gt;
&lt;p&gt;Zurück zu Merlin: Der MEM taucht in diesem Problembild gar nicht auf - kaum
als Hilfe bei der Planung eines solchen Unterfangens und gar nicht als
Hilfsmittel bei der Umsetzung.&lt;/p&gt;
&lt;p&gt;Hätte man Merlin richtig aufgezogen, dann hätte MySQL als Hersteller der
Datenbank sich mit Kunden und Community zusammengesetzt, und eben einen
solchen Katalog von betrieblichen Tätigkeiten des Operations- und des
Development DBA aufgestellt und die Bilder einmal ausgemalt und für die
verschiedenen Betriebsgrößen skaliert.&lt;/p&gt;
&lt;p&gt;Danach hätte man zusammen mit Kunden und Community das MySQL Systemhandbuch
erstellt, also einmal mustergültig die Best Practice beim Betrieb von MySQL
dokumentiert und ausgeführt, wie man diese Best Practices für 1, 10, 100,
1000 Server umsetzt - was ist wichtig, was ist unwichtig, wenn man klein
oder wenn man groß ist.&lt;/p&gt;
&lt;p&gt;Schließlich hätte man mit seiner Consulting und mit seiner Training- und
Certification-Abteilung, also MySQL Services als Ganzes, dieses Konzept
umgesetzt und in Consulting, Training und Certficiation einfließen lassen,
und dann eine Architektur und Werkzeuge in dieser Architektur erstellt, die
diese Prozesse technisch unterstützen.&lt;/p&gt;
&lt;p&gt;All das ist komplett nicht passiert (aus Gründen, die jetzt nicht mehr
zutreffen, und weil Merlin Ziele hatte, die nicht den oben genannten
Anforderungen entsprechen und die jetzt so auch nicht mehr gelten, aber das
ist alles wie gesagt eine andere Geschichte an einem anderen Lagerfeuer).&lt;/p&gt;
&lt;p&gt;Hätte man das umgesetzt, könnte ich jetzt vermutlich in Merlin die Liste der
von Oracle releasten MySQL-Versionen auf deren Server sehen, mit grünen
Haken hinter den Pakete, deren digitale Signatur validiert. Ich würde dann
Versionen Servergruppen zuweisen und den Prozeß &amp;ldquo;Rollout&amp;rdquo; anstoßen. Merlin
würde das RPM dann in meine lokalen yum Repositories runterladen und das
Puppet-Rezept dieser Gruppen so anpassen, daß die entsprechenden Server
aktualisiert oder neu aufgesetzt werden - aber so gestaggered, daß der
Betrieb davon nicht beeinflußt wird und natürlich auf eine Weise
koordiniert, die Server vor dem Upgrade aus dem Loadbalancer nimmt, und die
die Funktionalität und den Erfolg des Upgrades testet und die Caches
vorglüht, bevor die Kiste in den LB zurück geht.&lt;/p&gt;
&lt;p&gt;Man sieht auch in dieser Erklärung schon ein paar weitere wichtige Aspekte
der ganzen Sache: Es ist wichtig, den Scope abzugrenzen und nicht die
Aufgaben anderer Werkzeuge zu übernehmen, sondern diese korrekt zu
integrieren. Weder gilt es das Paketformat und das Paketsystem des
Trägersystems durch was eigenes (einen Bitrock-Installer?) zu ersetzen, noch
die Funktionalität anderer Automatisierungs-Techniken zu duplizieren.
Stattdessen sollte Best Practice Empfehlungen aussprechen und
Kompatibilitäten definieren (&amp;ldquo;Wir unterstützen Puppet und Chef für Systems
Automation, liefern receipts dafür und integrieren deren Schnittstellen in
unseren Tools&amp;rdquo;). Und sie sollte sich bewußt sein, daß Kisten nicht alleine
Laufen, sondern Teil eines Systems sind (mit dem LB reden!) und Zustand
haben (Caches müssen warm sein!). Und Paranoia ist ein Admintugend
(Testen!).&lt;/p&gt;
&lt;p&gt;Wenn man Automatisierung also nicht auf dem Anwenderlevel, sondern auf dem
Level eines Herstellers betrachtet, dann ist Automatisierung noch viel
weniger ein technisches Problem als auf dem Anwenderlevel - es ist vielmehr
in erster Linie tatsächlich ein organisatisches (Abgrenzung? Integration?
Kommunikation mit anderen Projekten?) und ein personelles Problem (Akzeptanz
der Best Practice? Werbung dafür? Schulung? Prüfung?).&lt;/p&gt;
&lt;p&gt;Und alles das muß man neben der Technik eben auch mit thematisieren, wenn
man Wachstum in einer Firma skalieren und kanalisieren will - man muß nicht
nur die Technik, sondern auch die Organisation und seine Leute mit
skalieren.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Schnitzeljagd 2010 - Die Rache der Cyborgs</title>
      <link>https://blog.koehntopp.info/2010/12/15/schnitzeljagd-2010-die-rache-der-cyborgs.html</link>
      <pubDate>Wed, 15 Dec 2010 21:11:07 +0000</pubDate>
      
      <guid>https://blog.koehntopp.info/2010/12/15/schnitzeljagd-2010-die-rache-der-cyborgs.html</guid>
      <description>&lt;p&gt;Heute war ich auf einer Schnitzeljagd, als Kennenlernspiel und
Teambuilding-Exercise.&lt;/p&gt;
&lt;p&gt;So die Theorie. 2010 läuft so etwas anders.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Geht zu dem und dem - betriebsbedingt - Hotel. Google Maps an. Ah, dort
ist es. Da gehen wir dann hin, walking navigation (experimental).
Funktioniert.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Hier ist Eure nächste Aufgabe. Firmenbedingt Fragen zum Hotelbusiness.
Wir sind IT, keine Hotel-Leute. Man kann uns die Antworten zu den Fragen in
einem Vortrag erklären, oder wir können &amp;ldquo;raten&amp;rdquo;: 5 Leute in der Gruppe, 5
Smartphones auf dem Tisch. Wettgooglen.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Hier ist Eure nächste Aufgabe:&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;a href=&#34;https://blog.koehntopp.info/uploads/kuehe1.jpg&#34;&gt;Bild&lt;/a&gt;

. 2 Laptops auf dem Tisch, die Leute zücken Perl.
Leider ist die Aufgabe unterspezifiziert, und je nach Interpretation der
Grenzbedingungen kommen unterschiedliche Lösungen raus. Leider blockiert der
Safe nach 3 Fehlversuchen für 15 Minuten.&lt;/p&gt;
&lt;p&gt;Nach mehr als einer Stunde geben
wir das Programmieren auf und wenden uns Google zu.&lt;/p&gt;
&lt;p&gt;Ergebnis: &lt;a href=&#34;http://www.authorstream.com/Presentation/Goldye-37632-RabbitsCowsDaVinci-first-year-original-cow-calf-second-2-calves-third-3-fourth-oldest-bec-as-Entertainment-ppt-powerpoint/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Lösung und Quellenangabe&lt;/a&gt;

.
Ist recht. Nächstes Mal denken wir gar nicht und suchen nur noch.&lt;/p&gt;
&lt;ol start=&#34;4&#34;&gt;
&lt;li&gt;Im Safe Fotos von Gebäuden, betriebsbedingt Hotels nahe Wahrzeichen.
Frage: Welche Städte? Antwort: Google Goggles. Ich sagte ja schon, daß wir
Smartphones haben.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Ergebnis 1: Das Konzept Schnitzeljagd degeneriert in der Nähe von permanent
verfügbarem Online zu &amp;lsquo;Teste Dein Google-Fu&amp;rsquo;.&lt;/p&gt;
&lt;p&gt;Ergebnis 2: Serialisierung der Schnitzeljagd (Frage n-1 muß gelöst werden,
damit man die Frage n erhält) war schon vor dem Internet ein doofes und
langweiliges Konzept. Mit 15 Minuten Lockout da drin generiert es bloß
sinnlosen Frust.&lt;/p&gt;
&lt;p&gt;Können wir bitte nächstes Jahr was sinnvolles machen?&lt;/p&gt;
&lt;p&gt;(&lt;a href=&#34;https://blog.koehntopp.info/2008/08/29/cyborg.html&#34;&gt;Cyborg&lt;/a&gt;

,
&lt;a href=&#34;https://blog.koehntopp.info/2009/10/09/internet-und-produktivit-t-aus-der-sicht-eines-cyborgs.html&#34;&gt;Cyborg&lt;/a&gt;

)&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Kulturelles Defizit</title>
      <link>https://blog.koehntopp.info/2010/02/28/kulturelles-defizit.html</link>
      <pubDate>Sun, 28 Feb 2010 08:37:53 +0000</pubDate>
      
      <guid>https://blog.koehntopp.info/2010/02/28/kulturelles-defizit.html</guid>
      <description>&lt;p&gt;Seitdem ich für Geld andere Leute glücklich mache bin ich immer wieder
einige Jahre auf der Walz gewesen, und habe mich als Angehöriger des
fahrendes Volkes als Projektkraft bei wechselden Auftraggebern verdingt, um
danach wieder einige Jahre fest in einem Laden angestellt ein wenig
seßhafter zu werden, Kraft zu tanken und das Gelernte zu verarbeiten. Eine
der Sachen, die ich mich dabei immer wieder fasziniert haben sind die
unterschiedlichen Arbeitsstile der verschiedenen europäischen Kulturen.&lt;/p&gt;
&lt;p&gt;Vielleicht ist meine Sample-Größe zu klein, vielleicht ist meine Auswahl von
anderen Faktoren beeinflußt, aber ich bin zu der festen Überzeugung gelangt,
daß zum Beispiel britische Firmenkulturen durch einen gemeinsamen Feind,
eine gemeinsame Zumutung zusammengehalten werden.&lt;/p&gt;
&lt;p&gt;In jeder britischen Firma, in der ich jemals gewesen bin, gab es einen
Umstand, der vollkommen unerträglich war und den jeder, der dort gearbeitet
hat, auf das Blut gehaßt hat. In einer Firma zum Beispiel war es ein
Ansagensystem, das den Leuten circa einmal pro Stunde durch eine für den
weitaus größten Teil der Mitarbeiter nutzlose Ansagen jeden sinnvollen
Gedanken aus dem Hirn geblasen hat, Meetings unterbrochen und Redeflüsse
gestört.&lt;/p&gt;
&lt;p&gt;In einer anderen Firma befand man sich in einem Gebäude, das seit mindestens
2 Jahren im Zustand der Renovierung und des Umbaues befindlich war,
Stockwerk für Stockwerk. In einer dritten Firma befand man sich in einem
viktorianischen Stadthaus in einem der feinsten Viertel von London, aber
mußte in den Tiefpaterre-Räumen des Dienstbotentraktes zusammengepfercht
arbeiten - und vierteltypisch einige Meilen weit gehen oder fahren, um ein
Mittagessen oder auch nur eine Flasche Kakao in einem Cornershop kaufen zu
können.&lt;/p&gt;
&lt;p&gt;Aber niemand hat jemals einen Versuch unternommen, diese Sache zu verbessern
oder gar abzustellen. Stattdessen wurde geredet, sich beklagt und
gegenseitig bemitleidet. Abhilfe wäre kontraproduktiv gewesen, denn dann
hätte man der Gruppe die gemeinsame Identifikation weggenommen, die sie
zusammengeschweißt hat.&lt;/p&gt;
&lt;p&gt;Beeindruckt haben mich viele skandinavische Firmen. Auf irgendeine Weise hat
man dort einen Weg gefunden, mehr zu schaffen als in vielen anderen Firmen,
die ich gesehen habe, und gleichzeitig die Arbeit so zu organisieren, daß
niemand davon genervt ist. Zusammenhalt wird dort auf eine andere,
wesentlich schmerzfreiere Weise generiert.&lt;/p&gt;
&lt;p&gt;Das fängt schon auf eine subtile Weise am Morgen an:&lt;/p&gt;
&lt;p&gt;In vielen dieser Firmen stellt der Arbeitgeber ein Frühstücksbuffet. Da es
kostenlos ist, essen die meisten Leute nicht daheim, sondern bringen die
Kinder in die Schule oder den firmeneigenen Kindergarten und gehen dann in
die Kantine zum Essen. Am Buffet säbelt man sich einige Scheiben Brot
herunter, greift sich Butter, einen Klecks Marmelade oder eine Scheibe Wurst
und einen Pott Kaffee und setzt sich dann gemeinsam mit den Kollegen auf
eine Bank. Man erzählt sich von gestern abend, von den Kindern oder dem
Theaterbesuch, oder daß man Segeln gewesen ist. Langsam, aber fast von
selbst driftet das Gespräch zum heutigen Tag und was passieren wird - wer
was ausprobieren wird, was fehlt, und was von einem selbst erwartet wird,
damit die anderen Mitglieder des Teams weiter arbeiten können.&lt;/p&gt;
&lt;p&gt;Der Übergang ist subtil, aber automatisch und er findet jeden Morgen statt.
Nach dem Frühstück sind irgendwie alle gebriefed und haben im Kopf eine
Liste von Dingen, die an diesem Vormittag weggehauen werden müssen, damit es
voran geht. Natürlich trifft man sich zum Mittagessen wieder, und tauscht
dort Ergebnisse aus, verabredet sich zu Besprechungen oder Präsentationen
und plant so gemeinsam beim Essen den Nachmittag.&lt;/p&gt;
&lt;p&gt;Aber auch das Arbeiten in Gruppen ist dort anders, auf eine sehr angenehme
Weise. Ein Freund von mir aus Deutschland, Olaf Schlüter, hat vor vielen
Jahren einmal den Spruch geprägt: &amp;ldquo;Team ist, wenn von sechs Leuten zwei
Arbeiten. Wenn das immer andere Zwei sind, dann funktioniert das Team.&amp;rdquo; Das
ist, auf eine Weise, präzise die Beschreibung dieser Arbeitsweise.&lt;/p&gt;
&lt;p&gt;Typischerweise haben wir dort zu sechs Personen, plus/minus ein paar,
zusammengesessen. Zwei haben rumgekaspert - würde man es formalisieren,
würde man es als Brainstorming bezeichnen. Zwei andere haben Dinge
vorbereitet - würde man es formalisieren, wäre es Pair Programming oder eine
Verallgemeinerung davon. Und zwei weitere haben etwas vorgeführt, umgesetzt
oder sonstwie etwas getan, das ein klassischer Beobachter &amp;ldquo;arbeiten&amp;rdquo; nennen
würde. Nach einer Weile durchmischt sich das, alle tauschen die Plätze,
reden miteinander und die Gruppe konfiguriert sich um, und dann geht es in
neuer Zusammenstellung weiter.&lt;/p&gt;
&lt;p&gt;Dabei kommt es zu einem Effekt, den ich in Deutschland nahezu niemals
beobachten kann - außerhalb gewisser Geek- und Hackerzirkel jedenfalls. Und
das ist die Tatsache, daß man an Gesicht und Ansehen gewinnen kann, wenn man
in einer Diskussion seinen Fehler erkennt und sich dem Standpunkt seines
Gegenredners anschließt oder diesen übernimmt.&lt;/p&gt;
&lt;p&gt;Das ist den meisten deutschen Firmenkulturen so entgegengesetzt, daß ich
überhaupt nicht mitbekommen habe was da passiert, als ich so einen
Positionswechsel das erste Mal beobachtet habe. Jemand, der Teamleiter gar,
obwohl das in diesen Gruppen kaum eine Rolle spielt, präsentierte seinen
Vorschlag an der Tafel und brachte dabei einige Abschätzungen hinsichtlich
Speicherplatz, Rechenaufwand und Kosten. Jemand anders aus der Gruppe
blickte von seinem Zettel auf, auf dem er einige Zahlen hingeschmiert hatte,
und meinte nur &amp;ldquo;That&amp;rsquo;s all wrong.&amp;rdquo; Er stand auf, griff sich den Filzstift
und skizzierte seinen Plan gleich neben dem anderen. &amp;ldquo;If you do it like
this, and this, then you can do it in less than half the time, and with only
a fraction of the storage.&amp;rdquo; Der Chef stutzte kurz, dachte nach und entschloß
sich dann, seine eigene Idee zu verwerfen und die seines Mitarbeiters zu
übernehmen. &amp;ldquo;You are completely right. This is much better. We will be doing
it your way.&amp;rdquo; Anerkennendes Nicken in der ganzen Runde, und ein
Gesichtsgewinn für beide im ganzen Team.&lt;/p&gt;
&lt;p&gt;Das alles führt zu einer Arbeitsweise, die ich als sehr entspannend
empfinde: Obwohl man echt viel Arbeit wegschafft, hat kaum jemand mal Streß.
Die meisten Fragen und Termine werden im Vorübergehen beim Frühstück oder
Mittagessen geklärt, und beim Arbeiten spielt man sich die Bälle zu. Die
Kultur ist so eingerichtet, daß Kooperation belohnt wird, und Ansehen
basiert nicht darauf, ob man sich durchsetzt, sondern ob man die Gruppe
voran bringt.&lt;/p&gt;
&lt;p&gt;Das ist zugleich die Arbeitsweise und Einstellung, die der deutschen Politik
so vollkommen fehlt.&lt;/p&gt;
&lt;p&gt;Es täte diesem Land echt gut, hätte man in der Koalition den
Expertenmeinungen von Techniker- und Juristenseite Gehör geschenkt, als es
um die Konstruktion des Zugangserschwerungsgesetzes ging, oder früher noch,
als es darum ging, die Stoßrichtung der Agenda auf diesem Gebiet überhaupt
festzulegen. Es hat eine klar artikulierte und durchstrukturierte Kritik an
der Idee des Zugangserschwerungsgesetzes selbst gegeben - Löschen statt
Sperren (und nicht etwa Löschen vor Sperren), Konstruktion internationaler
Zusammenarbeit (die noch dazu für andere Delikte nutzbringend einsetzbar
gewesen wäre) und Vermeidung eines sinn- und wirkungslosen
Grundrechtseingriffes.&lt;/p&gt;
&lt;p&gt;Stattdessen hat man im Wahlkampfwahn den eigenen Irrweg zementiert. Man tat
das in dem Glauben, daß deutsche Kultur Durchsetzungskraft an sich mehr
belohnt als Korrektheit oder Brauchbarkeit der Lösung.&lt;/p&gt;
&lt;p&gt;Gesichtsgewinn durch Übernehmen und Aufgreifen der besseren Idee, das ist
das große Defizit der akuellen politischen Kultur in unserem Land. Das ist
es wirklich: die Äußerungen in der Debatte im Petitionsausschuß und zum
Aufhebungsgesetz - ja, Frau Bär, auch und gerade sie sind gemeint! -
zeigen, daß man immer noch der Meinung ist, einen politisch Gewinn
bringenden Kurs zu verfolgen, oder vermeintlich Frau von der Leyen schützen
zu müssen, indem man an dem von ihr initiierten Irrwegen weiter festhält.&lt;/p&gt;
&lt;p&gt;Es ist zugleich die Hoffnung, die die Piraten in der deutschen Politik
darstellen. Denn einer der Kernpunkte des piratischen Denkens, der mir das
Herz aufgehen läßt, ist die Konzentration auf die Sachpolitik. Es ist die
Fähigkeit, das Bessere anerkennen zu können und ihm dadurch den Weg zu
bereiten, daß man sich selbst beiseite nimmt und hinter die bessere Idee
stellt. Selbst dann, wenn es nicht die eigene war.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Internet und Produktivität aus der Sicht eines Cyborgs</title>
      <link>https://blog.koehntopp.info/2009/10/09/internet-und-produktivit-t-aus-der-sicht-eines-cyborgs.html</link>
      <pubDate>Fri, 09 Oct 2009 12:23:00 +0000</pubDate>
      
      <guid>https://blog.koehntopp.info/2009/10/09/internet-und-produktivit-t-aus-der-sicht-eines-cyborgs.html</guid>
      <description>&lt;p&gt;Auf dem wunderbaren Blog Netzwertig findet man
&lt;a href=&#34;http://netzwertig.com/2009/10/09/internet-und-produktivitaet-zeitverschwendung-vs-effizienzgewinn/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Zeitverschwendung vs. Effizienzgewinn&lt;/a&gt;

:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Man kennt sie ja, die Klagen über verschwendete Zeit am Arbeitsplatz.
Anstelle produktiv zu sein und ihren Job zu erledigen, surfen Angestellte
bei Facebook, Twitter und YouTube – und fügen damit Firmen erheblichen
Schaden zu. So zumindest sehen es viele Unternehmen und blockieren daher
den Zugriff auf einschlägige Sites des Social Web. 54 Prozent der
US-Unternehmen sperren Social Networks komplett, so eine aktuelle Studie.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Martin Weigert versucht zu erklären, warum solche Aktivitäten nicht schlimm
sind, scheitert aber, weil er zu kurz greift:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Doch lediglich zu kritisieren, Facebook &amp;amp; Co würden die Produktivität
vermindern, ist nur die halbe Wahrheit. Die Tatsache des Effizienzgewinns
durch die Digitalisierung sollte man keinesfalls vernachlässigen. Hier
lässt sich erheblich mehr gewinnen, als auf der anderen Seite Zeit zu
verlieren ist.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Es gibt noch einen anderen Aspekt, der viel wichtiger und weitgehender ist
und den er nicht erwähnt.&lt;/p&gt;
&lt;p&gt;In meinem früheren Leben als Datenbank-Consultant bin ich viel als Fremder
in Firmennetzen gewesen und oft nicht richtig in deren IT-Infrastruktur
integriert gewesen: Jedes mal, wenn ich bei einem Kunden aufgeschlagen bin,
war einer der ersten Handgriffe, Vernetzung herzustellen und meinem Laptop
einen Weg &lt;em&gt;nach draussen&lt;/em&gt; ins Internet zu bahnen - und das nicht nur für das
Web, sondern auch für alle anderen Dienste. Erst in zweiter Linie habe ich
dann das Problem gelöst, im Netz des Kunden auf deren Datenbankserver
zugreifen zu können.&lt;/p&gt;
&lt;p&gt;Bei einigen Kunden war das nicht so leicht möglich, weil deren Firewalls die
Mitarbeiter und mich so weit isoliert haben, daß ich keinen Zugriff auf die
Außenwelt bekommen konnte. Solche Aufträge waren immer besonders schwierig
und für den Kunden nicht sehr produktiv.&lt;/p&gt;
&lt;p&gt;Warum war es mir so wichtig, &lt;em&gt;raus&lt;/em&gt; zu kommen, wo ich doch für die
Kundendatenbanken gekommen bin?&lt;/p&gt;
&lt;p&gt;Wenn ein Kunde mich als Consultant mietet oder mich als Mitarbeiter
einstellt, dann bekommt er nicht bloß mich, sondern er bekommt auch einen
sehr großen Teil von Infrastruktur, der nicht sichtbar ist - ich bin ein
&lt;a href=&#34;https://blog.koehntopp.info/2008/08/29/cyborg.html&#34;&gt;Cyborg&lt;/a&gt;

 und neben einer
biologischen Komponente bestehe ich auch noch aus einer technischen und vor
allen Dingen auch aus einer sozialen Komponente, einem Netzwerk von
Verbindungen, Bekanntschaften und Freundschaften, die es mir ermöglichen,
weitaus mehr zu leisten als ich es als eine rein auf das biologische
reduzierte Person jemals könnte.&lt;/p&gt;
&lt;p&gt;Durch
&lt;a href=&#34;http://twitter.com/RolandTichy/status/4550060774&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;meine Art zu Leben&lt;/a&gt;

 bin
ich
&lt;a href=&#34;http://netzwertig.com/2009/10/02/gesellschaft-ueber-das-lebensgefuehl-always-on/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Always-On&lt;/a&gt;

.
Ich schrieb in
&lt;a href=&#34;https://blog.koehntopp.info/2009/06/23/falscher-planet-falsches-jahrtausend.html&#34;&gt;Falscher Planet, falsches Jahrtausend&lt;/a&gt;

:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Ich reiste beruflich fast drei Jahre durch Europa und die USA, aber ich
war immer zu Hause - Eastern Standard Tribe oder in meinem Fall der Stamm
der MESZler war immer für mich erreichbar, wo immer ich war: Ich habe
nicht mehr oder weniger Kontakt mit meinen Freunden gehabt bloß weil ich
mal ein paar Wochen auf einem anderen Kontinent war.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Mein Griff zum externen Netzwerk dient dazu, diesen Teil meines Ich wieder
anzuschließen und für mich wie auch für meinen jeweiligen Auftraggeber
wieder verfügbar zu machen: Dadurch bin ich in der Lage, Antworten auf
Fragen schneller zu finden, Ideen aus meinem Netz zu ziehen und für mich
nutzbar zu machen, Hinweise und Verweise aufzupicken und generell sehr viel
produktiver zu sein als ich es ohne Netz wäre.&lt;/p&gt;
&lt;p&gt;Apophenia beschreibt in &lt;a href=&#34;http://www.zephoria.org/thoughts/archives/2009/07/13/i_want_my_cybor.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;I want my Cyborg
life&lt;/a&gt;


wie das funktioniert, was ich (und jeder andere, der unter das &amp;lsquo;Lebensgefühl
der Piraten&amp;rsquo; fällt) da tue. Sie beschreibt einen Konflikt zwischen einem
Offliner und sich:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;In Italy two weeks ago, I attended Modernity 2.0 (in the lovely Urbino
hosted by the fantastic Fabio Giglietto). There were two audiences in
attendance - a young cohort of &amp;ldquo;internet scholars&amp;rdquo; and an older cohort
deeply invested in sociocybernetics. At one point, after a talk, one of
the sociocybernetics scholars (actually, the former President of the
sociocybernetics organization&amp;hellip; I know&amp;hellip; I looked him up) began his
question by highlight that, unlike most of the audience who seemed more
invested in the internet than scholarly conversations, HE had been paying
attention. He was sitting next to me. He looked at me as he said this.It&amp;rsquo;s
not very often that I feel like I&amp;rsquo;ve been publicly bitchslapped but boy
did that sting. And then I felt pissy, like a resentful stubborn child
bent on proving him wrong. Somehow, as I grew my hair out and became an
adult, I also became less spiteful because boy was I determined to bite
back. Of course, I haven&amp;rsquo;t become that much of an adult because here I am
blogging the details of said encounter.There&amp;rsquo;s no doubt that I barely
understood what the speaker was talking about. But during the talk, I had
looked up six different concepts he had introduced (thank you Wikipedia),
scanned two of the speakers&amp;rsquo; papers to try to grok what on earth he was
talking about, and used Babelfish to translate the Italian conversations
taking place on Twitter and FriendFeed in attempt to understand what was
being said. Of course, I had also looked up half the people in the room
(including the condescending man next to me) and posted a tweet of my own.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Die ständige Verfügbarkeit von Netz und Connectivity verändert das Arbeiten
und den Umgang miteinander radikal. Nicht nur ist es für viele meiner
Freunde weitgehend egal, in welcher Stadt oder auf welchem Kontinent ich die
letzten paar Jahre gelebt habe, sondern das Netz erlaubt mir auch,
Informationen &amp;lsquo;in Echtzeit&amp;rsquo; aufzusammeln und mein Wissen im Vorübergehen
anzupassen und zu komplettieren. Darum sehe ich mit einem Laptop auf dem
Schoß fern - immer ein Wikipedia- und IMDB-Fenster offen - und darum brauche
ich auch Netz nach draußen, wenn ich irgendwo arbeite.&lt;/p&gt;
&lt;p&gt;Als MySQL Consultant hat mir das Zugriff auf das Handbuch, den Support
IRC-Server und meine Kollegen bei anderen Kunden gegeben, bei meiner
jetzigen Arbeit gibt es mir Zugriff auf meine ehemaligen Kollegen aus einer
Reihe von vergangenen Jobs, auf Ex-Kunden, die inzwischen anderswo arbeiten
und gute Bekannte geblieben sind, und auf viele Nachschlagequellen, an die
ich mich erinnere, aber die ich neu suchen muß, wenn ich wirklich damit
arbeiten wollte. Plus eine Riesenwelle an News, RSS, Tweets und Mail sowie
drei bis vier verschiedene Chatsysteme, die mich nahe bei den Leuten hält,
die mir wichtig sind.&lt;/p&gt;
&lt;p&gt;Ein Arbeitgeber, der so etwas abtrennte, bekäme eine kleinere Person und
einen weitaus schwächeren Mitarbeiter - für die Zeit die ich überbrücken
müßte, bis ich eine richtige Stelle gefunden hätte. Denn so werde ich
dauerhaft nie arbeiten wollen.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Cat5-o-Nine-Tails von uschebit</title>
      <link>https://blog.koehntopp.info/2008/12/18/cat5-o-nine-tails-von-uschebit.html</link>
      <pubDate>Thu, 18 Dec 2008 08:46:12 +0000</pubDate>
      
      <guid>https://blog.koehntopp.info/2008/12/18/cat5-o-nine-tails-von-uschebit.html</guid>
      <description>&lt;p&gt;&lt;p class=&#34;md__image&#34;&gt;
  &lt;img src=&#34;https://blog.koehntopp.info/uploads/cat5onine1.jpg&#34; alt=&#34;&#34;  /&gt;
&lt;/p&gt;

&lt;/p&gt;
&lt;p&gt;*Fabulous &lt;a href=&#34;https://twitter.com/uschebit&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Uschebit&lt;/a&gt;

 sends me this package of Cat-5-o-Nine-Tails and cookies for Deborah. Debs is a DBA colleague of mine and works from Cambridge&lt;/p&gt;
&lt;p&gt;&lt;p class=&#34;md__image&#34;&gt;
  &lt;img src=&#34;https://blog.koehntopp.info/uploads/cat5onine2.jpg&#34; alt=&#34;&#34;  /&gt;
&lt;/p&gt;

&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Much more stylish than a &lt;a href=&#34;https://blog.koehntopp.info/2008/09/18/the-clue-bat.html&#34;&gt;blunt clue bat&lt;/a&gt;

&lt;/em&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Hardware für ein MySQL</title>
      <link>https://blog.koehntopp.info/2007/07/28/hardware-f-r-ein-mysql.html</link>
      <pubDate>Sat, 28 Jul 2007 18:38:38 +0000</pubDate>
      
      <guid>https://blog.koehntopp.info/2007/07/28/hardware-f-r-ein-mysql.html</guid>
      <description>&lt;p&gt;&amp;ldquo;Ich muß Hardware für einen Rechner kaufen, auf dem dediziert nur ein MySQL laufen soll. Was soll ich beschaffen?&amp;rdquo; ist eine Frage, die ich recht oft höre. Hier ist die lange Antwort.&lt;/p&gt;
&lt;p&gt;Bevor man sich mit dem freundlichen Hardwarehöker des geringsten Mißtrauens in Verbindung setzen kann, muß man sich erst einmal ein paar Dinge überlegen.&lt;/p&gt;
&lt;h2 id=&#34;datenbank-zielgröße-bestimmen&#34;&gt;
    &lt;a href=&#34;#datenbank-zielgr%c3%b6%c3%9fe-bestimmen&#34;&gt;
	Datenbank-Zielgröße bestimmen
    &lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;Die allererste Überlegung ist die erwartete Zielgröße der Datenbank: Werden wir einen Bestand von 1G, 10G, 100G oder 1000G haben? Daraus und aus dem allgemeinen Gesundheitszustand des Geldbeutels ergibt sich schon die erste wichtige Erkenntnis. Nämlich: Werden wir es schaffen, eine speichergesättigte Datenbank zu bauen, oder bekommen wir eine Datenbank, die für Lesezugriffe auf die Platte zugreift?&lt;/p&gt;
&lt;h3 id=&#34;folgerung-1-speichergesättigte-datenbanken-sind-ein-bevorzugtes-designziel&#34;&gt;
    &lt;a href=&#34;#folgerung-1-speicherges%c3%a4ttigte-datenbanken-sind-ein-bevorzugtes-designziel&#34;&gt;
	Folgerung 1: Speichergesättigte Datenbanken sind ein bevorzugtes Designziel
    &lt;/a&gt;
&lt;/h3&gt;
&lt;p&gt;Mechanische Festplatten sind unerträglich langsam.&lt;/p&gt;
&lt;p&gt;Speicher-Zugriffszeiten werden in Nanosekunden angegeben. Milli (10E-3), Mikro (10E-6), Nano (10E-9), Pico (10E-12), Femto (10E-15), Atto (10E-18) - Speicher hat also Zugriffszeiten in der Größenordnung von einer Millardstelsekunde pro Byte. Platten-Zugriffszeiten liegen dagegen im Bereich von Millisekunden, wenn Seeks involviert sind. Von einer durchschnittlichen Serverplatte kann man nicht mehr als 200 Seeks pro Sekunde (5ms pro Zugriff) erwarten, die 7200rpm Hitachi HTS72108 in meinem Laptop schafft nach iozone und iostat ziemlich genau 125 Seeks pro Sekunde (8ms pro Zugriff).&lt;/p&gt;
&lt;p&gt;In diese Zeit geht die Average Seek Time für die horizontale Positionierung des Kopfes und die Rotational Delay mit ein - also die Zeit, die wir warten müssen, bis die richtigen Daten unter dem fertig positionierten Kopf auch mal durchrutschen. Die Datentransferzeit zur tatsächlichen Übertragung der Daten ist im Vergleich dazu eher zu vernachlässigen.&lt;/p&gt;
&lt;p&gt;Andererseits hat eine Platte im Vergleich zum RAM eine größere Zugriffsgranularität - während wir beim RAM für jedes Byte eine Access Time abrechnen, tun wir das bei einer Platte für einen Block (512 Byte, aber wir können hier gerne mit 1000 Byte rechnen, es spielt nicht wirklich eine Rolle). Im Endeffekt ist der Geschwindigkeitsunterschied zwischen RAM und Random-I/O einer Festplatte jedenfalls nicht 1E6 (eine Million), sondern nur etwa 1E4 (Zehntausend) bis 1E5 (Hundertausend), abhängig davon wie breit unsere Rows im Schnitt sind.&lt;/p&gt;
&lt;p&gt;Wird eine Platte nicht mit Random-I/O betrieben, sondern mit linearer Ein-/Ausgabe, dann können wir so um die 50 MB/sec von einer Platte bekommen. Je nach Rowsize sind das zwischen Hundertausend und einer Million Rows pro Sekunde. Das ist immer noch langsamer als RAM, aber viel schneller als die im pessimalen Fall 200 Rows/sec vom Random-I/O (Hmm, auch da kommen wir noch drunter, wenn wir auch den Index nicht cachen können).&lt;/p&gt;
&lt;p&gt;Wenn es einem also gelingt, speichergesättigte Datenbanken zu bauen, dann sind Reads für viele Anwendungsfälle schon kein Problem mehr und teilweise fällt sogar schlechtes SQL nicht mal mehr auf, weil die entsprechenden Operationen zwar ineffizient sein mögen, aber dank schnellem RAM-Zugriff dennoch schnell genug sind.&lt;/p&gt;
&lt;h3 id=&#34;folgerung-2-64-bit-sind-mandat&#34;&gt;
    &lt;a href=&#34;#folgerung-2-64-bit-sind-mandat&#34;&gt;
	Folgerung 2: 64 Bit sind Mandat
    &lt;/a&gt;
&lt;/h3&gt;
&lt;p&gt;MySQL hat eine Ein-Prozeß-Architektur. Ein einzelner Datenbankserver enthält eine Reihe von datenbankinternen Service-Threads und einen Handlerthread pro Connection, die sich alle den gemeinsamen Speicher des Prozesses teilen.&lt;/p&gt;
&lt;p&gt;Wir brauchen also nicht nur jede Menge RAM, sondern wir brauchen das RAM auch in einer Form, die es uns erlaubt, innerhalb eines einzelnen Prozesses darauf zugreifen zu können. Das bedeutet in 2007: Eine 64 Bit CPU, ein 64 Bit Betriebssystem und eine 64 Bit Version von MySQL, falls wir Speicher von mehr als 3G (in Windows: 2G) im Server haben.&lt;/p&gt;
&lt;p&gt;32 Bit-Code kann in Linux nur etwas unter 3G in einem Prozeß adressieren, und in Windows sind es sogar nur etwas unter 2G. Es ist also vollkommen sinnlos, einen Rechner mit 8G RAM hinzustellen und dann nur ein 32 Bit-Betriebssystem und ein 32 Bit-MySQL drauf zu installieren. Das gibt zwar einen schönen File System Buffer Cache und das ist besser als nix, aber es wäre sehr viel interessanter, den Speicher direkt in MySQL zur Verfügung zu haben. Ein Datenbankserver wird also immer fett RAM bekommen und das zieht dann relativ schnell die 64 Bit nach sich.&lt;/p&gt;
&lt;p&gt;Es gibt zwar so was wie
&lt;a href=&#34;http://en.wikipedia.org/wiki/Physical_Address_Extension&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;PAE&lt;/a&gt;

/
&lt;a href=&#34;http://en.wikipedia.org/wiki/Address_Windowing_Extensions&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;AWE&lt;/a&gt;

, aber reden wir da nicht drüber - wir haben 2007, und es gibt keinen Grund, mit gefesselten Beinen über die Ziellinie zu hüpfen, wenn man stattdessen richtig rennen kann. Es gibt zwar PAE-Code in MySQL, aber der ist per Default nicht enabled, in den MySQL-eigenen Binaries nicht vorhanden und schlecht getestet. Selbst wenn das alles anders wäre, würde man PAE nicht wollen, sondern gleich richtig 64 Bit machen wollen - PAE ist langsam und hat haarige Tatzen.&lt;/p&gt;
&lt;h3 id=&#34;schreibleistung-vs-leseleistung&#34;&gt;
    &lt;a href=&#34;#schreibleistung-vs-leseleistung&#34;&gt;
	Schreibleistung vs. Leseleistung
    &lt;/a&gt;
&lt;/h3&gt;
&lt;p&gt;Eine andere Sache, die man sich frühzeitig bewußt machen muß ist die Überlegung, daß Leseleistung sehr viel leichter zu optimieren ist als Schreibleistung.&lt;/p&gt;
&lt;p&gt;Datenbanken, die überwiegend Reads sehen und wenig Schreiboperationen haben sind sehr leicht zu skalieren: Wir ersticken das Problem nach Möglichkeit erst einmal mit Speicher und wenn das nicht mehr reicht, setzen wir eine ausreichende Anzahl von Replication-Slaves auf. Die Reads verteilen wir dann gleichmäßig über die Slaves. Das können wir je nach Problemgröße leicht bis auf 1000 Slaves pro Master ausdehnen, wenn wir wollen.&lt;/p&gt;
&lt;p&gt;Writes dagegen sind sehr viel unhandlicher. Wir können Schreibzugriffe zwar Delayen, Batchen und Sortieren, aber am Ende muß der Write auf irgendein persistentes Medium. Wenn wir mehr Schreibzugriffe haben als eine Platte wegstecken kann, dann müssen wir ein Array hinstellen. Wenn wir mehr Schreibzugriffe haben als man sinnvoll über ein Array verteilen kann, dann müssen wir die Datenbank partitionieren mit all den unangenehmen Designentscheidungen, die mit solchen
&lt;a href=&#34;https://blog.koehntopp.info/2006/07/30/leben-mit-fehlern-der-schluessel-zum-scaleout.html&#34;&gt;verteilten, lose gekoppelten Systemen&lt;/a&gt;

 einher gehen.&lt;/p&gt;
&lt;h3 id=&#34;folgerung-3-locality-erzeugen-um-schreibzugriffe-zu-minimieren&#34;&gt;
    &lt;a href=&#34;#folgerung-3-locality-erzeugen-um-schreibzugriffe-zu-minimieren&#34;&gt;
	Folgerung 3: Locality erzeugen um Schreibzugriffe zu minimieren
    &lt;/a&gt;
&lt;/h3&gt;
&lt;p&gt;Datenbanken speichern Daten in Speicherseiten ab. In InnoDB zum Beispiel ist eine solche Speicherseite mit 16K relativ groß. In einer solchen Seite liegen in der Regel mehrere Rows, und InnoDB liest und schreibt immer ganze Seiten.&lt;/p&gt;
&lt;p&gt;Wenn wir unsere Datenbank gut designed haben, dann haben wir Locality Of Reference erzeugt. Das bedeutet, daß wir ziemlich oft den Fall haben, daß die Rows, die wir zur gleichen Zeit bearbeiten auch räumlich dicht gepackt sind, also in derselben Speicherseite stehen. Das bedeutet, daß wir mit dem ersten Zugriff auf eine neue Seite schon die Rows, auf die wir gleich zugreifen werden mit in den Speicher bringen und daß wir beim Schreiben wahrscheinlich eine Seite nicht nur einmal verändern, sondern mehrere Rows in der Seite verändern werden.&lt;/p&gt;
&lt;p&gt;Wir wissen, daß InnoDB Daten im Primary Key in B+-Bäumen abspeichert, d.h. in den Blättern des Primary Key stehen die Daten selbst, nicht Zeiger auf die Daten. Daten sind also physikalisch in Primary Key-Reihenfolge angeordnet und Daten mit einem ähnlichen Primary Key stehen wahrscheinlich physikalisch dicht zusammen auf der Platte. Sekundärschlüssel enthalten eine Kopie des Primary Key als Row Pointer. Ein &amp;ldquo;INDEX(a)&amp;rdquo; wird von InnoDB also intern als &amp;ldquo;INDEX(a, id)&amp;rdquo; interpretiert und realisiert. InnoDB und der Optimizer wissen das auch, und ein &amp;ldquo;SELECT id FROM t WHERE a = &amp;hellip;&amp;rdquo; wird entsprechend aus dem Sekundärschlüssel ohne Primärdatenzugriff abgearbeitet.&lt;/p&gt;
&lt;p&gt;Mit diesem Wissen können wir jetzt über die Wahl des Primärschlüssels einer InnoDB-Tabelle die physikalische Anordnung von Daten in einer InnoDB-Tabelle beeinflussen und die Locality verbessern.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Oft erzeugen hierarchische Primärschlüssel ausgezeichnete Locality. In einer Tabelle, die Mails für einen Maildienst verwaltet wäre (userid, folderid, messagenummer) zum Beispiel ein sehr guter Primärschlüssel für die Mailtabelle, weil Informationen über neue Mails im aktuellen Folder des aktuellen Users dicht beieinander gespeichert werden.&lt;/li&gt;
&lt;li&gt;Ein &lt;em&gt;INTEGER UNSIGNED NOT NULL PRIMARY KEY auto_increment&lt;/em&gt; erzeugt eine zeitliche Reihung von Daten nach dem Erzeugungsdatum und das ist für viele Daten, die neu heiß sind und dann mit der Zeit abkühlen genau der richtige Schlüssel.&lt;/li&gt;
&lt;li&gt;Ein Zufallswert, ein MD5 oder SHA1-Hash oder eine UUID ist ein furchtbarer Primärschlüssel, weil Daten im Endeffekt zufällig gestreut werden und keine Locality erzeugt werden kann.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Locality ist nicht nur für Schreibleistung wichtig, sondern auch wenn wir eine Datenbank haben, die nicht speichergesättigt sein kann und wir Lesezugriffe zur Disk senden müssen. Mit einer guten Locality können wir unter Umständen viele Lesezugriffe im RAM cachen auch wenn die Gesamtdatenbank sehr viel größer als der Verfügbare Hauptspeicher ist.&lt;/p&gt;
&lt;h3 id=&#34;folgerung-4-beschriebene-rows-schmal-halten-um-schreibzugriffe-zu-minimieren&#34;&gt;
    &lt;a href=&#34;#folgerung-4-beschriebene-rows-schmal-halten-um-schreibzugriffe-zu-minimieren&#34;&gt;
	Folgerung 4: Beschriebene Rows schmal halten um Schreibzugriffe zu minimieren
    &lt;/a&gt;
&lt;/h3&gt;
&lt;p&gt;Schreibzugriffe ändern Seiten. Wenn wir eine gute Locality haben und wir außerdem Schreibzugriffe von beschriebenen Seiten zur Disk verzögern können, dann werden wir viele Rows in einem Block ändern können, bevor wir diesen Block zur Disk senden. Indem wir die Rows von Tabellen schmal halten, die beschrieben werden, bekommen wir mehr Rows in einen Block und haben so weniger Schreibzugriffe.&lt;/p&gt;
&lt;p&gt;Wenn wir zum Beispiel eine Benutzertabelle haben, dann enthält diese überwiegend statische Daten wie zum Beispiel den Benutzernamen, das Paßwort, die Benutzeranschrift und andere Stammdaten. Sie enthält aber vielleicht auch sehr dynamische Daten wie zum Beispiel das Datum des letzten Logins. Datenbanktheoretisch gehört diese Information auch in die User-Tabelle, aber wegen der physikalischen Implementierung wird es sehr sinnvoll sein, eine künstliche 1:1 Relation einzuführen und das Paar (userid, lastlogin) in eine Extratabelle abzuspalten.&lt;/p&gt;
&lt;p&gt;Hier haben wir nun 8 Byte breite Rows in 16K großen Records, also bis zu 2048 Records pro Speicherseite (in Wirklichkeit wird die Seite nicht vollständig genutzt sein) oder ca. 500-700 stark veränderliche Speicherseiten (8M-12M) für die Lastlogindaten von einer Million Usern. Wenn man einen Usereintrag von um die 300 Byte inklusive Stammdaten annimmt, dann würden eine Million User ohne diese Aufspaltung stattdessen um die 18000-25000 (280M-400M) veränderliche Seiten erzeugen, d.h. wir hätten etwa 36 mal mehr veränderte Speicherseiten zu schreiben, nur weil die veränderlichen Daten weniger dicht gepackt sind.&lt;/p&gt;
&lt;p&gt;Dazu kommt, daß jeder Schreibzugriff auch alle Resultsets im MySQL Query Cache löscht, die von der beschriebenen Tabelle abstammen. Indem man häufig beschriebene Daten in Extratabellen isoliert bekommt man unter Umständen eine bessere Query Cache Hit Ratio und so bessere Performance.&lt;/p&gt;
&lt;p&gt;Aus dem gleichen Grund und noch einigen anderen Gründen will man auch unbedingt alle Spalten abtrennen, in denen Typen verwendet werden, die &amp;ldquo;TEXT&amp;rdquo; oder &amp;ldquo;BLOB&amp;rdquo; im Namen haben. Zu den &amp;ldquo;anderen Gründen&amp;rdquo; gehört hier in MySQL auch die Handhabung von &amp;ldquo;temp tables&amp;rdquo; in Queryplänen, bei denen &amp;ldquo;using temporary&amp;rdquo; bei &lt;em&gt;EXPLAIN&lt;/em&gt; gelistet wird.&lt;/p&gt;
&lt;h3 id=&#34;folgerung-5-writes-delayen-batchen-und-sortieren&#34;&gt;
    &lt;a href=&#34;#folgerung-5-writes-delayen-batchen-und-sortieren&#34;&gt;
	Folgerung 5: Writes delayen, batchen und sortieren
    &lt;/a&gt;
&lt;/h3&gt;
&lt;p&gt;Bei einem COMMIT schreibt InnoDB die geänderte 16K Seite nun nicht sofort zurück in den Tablespace, sondern notiert die Änderung erst einmal im Redo-Log und markiert die InnoDB-Seite als Dirty. Später wird die Dirty Page zur Disk gesendet und der entsprechende Redo-Log Pointer kann vorwärts bewegt werden um den Platz im Redo-Log wieder frei zu geben.&lt;/p&gt;
&lt;p&gt;Dadurch, daß alle Änderungen so erst einmal im Redo-Log landen, werden Schreibzugriffe, die eigentlich Random-Writes wären vorübergehend erst einmal als Lineare Writes abgehandelt: Wir hatten weiter oben ja schon etabliert, daß lineare Writes schneller sind. Außerdem spekuliert diese Aktion natürlich darauf, daß eine eben veränderte InnoDB Seite wegen Locality gleich noch einmal geändert wird und wir so Random I/O-Schreibzugriffe einsparen können.&lt;/p&gt;
&lt;p&gt;Wir können Locality abschätzen, indem wir die Größe des Redo-Logs mit der Menge der Pages vergleichen, die dirty sind. In &lt;em&gt;SHOW ENGINE INNODB STATUS\G&lt;/em&gt; finden wir:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-console&#34; data-lang=&#34;console&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;go&#34;&gt;---
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;go&#34;&gt;LOG
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;go&#34;&gt;---
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;go&#34;&gt;Log sequence number 0 1994670731
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;go&#34;&gt;Log flushed up to   0 1994670268
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;go&#34;&gt;Last checkpoint at  0 1993477319
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;go&#34;&gt;...
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;go&#34;&gt;----------------------
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;go&#34;&gt;BUFFER POOL AND MEMORY
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;go&#34;&gt;----------------------
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;go&#34;&gt;...
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;go&#34;&gt;Modified db pages  278
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Unser Redo-Log hat also bisher Null (0) Umdrehungen gemacht, und der Schreibzeiger steht bei Offset 1994670731, während der hintere Lesezeiger bei Offset 1993477319 steht. Es sind also 1994670731-1993477319 = 1193412 (ca. 1.1M) Redo-Log belegt. Dem stehen 278 16K große Seiten (ca. 4.4M) gegenüber, die als Dirty markiert sind. Wenn es uns gelingt, durch Umstrukturierung dieses Verhältnis zu verbessern, also die Anzahl der Seiten, die als Dirty markiert werden zu verkleinern, dann bekommen wir weniger Random-I/O und eine bessere Schreibleistung.&lt;/p&gt;
&lt;p&gt;MySQL wird die &amp;ldquo;modified db pages&amp;rdquo; dann verzögert und im Batch auf die Platte schreiben, wenn&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;das Redo-Log droht, vollzulaufen&lt;/li&gt;
&lt;li&gt;&lt;em&gt;innodb_max_dirty_pages_pct&lt;/em&gt; Prozent aller Pages im Buffer Pool als Dirty markiert sind&lt;/li&gt;
&lt;li&gt;oder InnoDB eine Pause zum Atemholen bekommt und einen Checkpoint fährt.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Das Schreiben der Dirty Pages erfolgt derzeit &lt;a href=&#34;http://www.mysqlperformanceblog.com/2007/07/18/how-innodb-flushes-data-to-the-disk/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;leider noch nicht sortiert&lt;/a&gt;

, obwohl das echt nützlich wäre.&lt;/p&gt;
&lt;p&gt;Wir können uns, wenn uns unsere Daten nicht so wichtig sind, sogar noch die Writes ins Redo-Log delayen. Indem wir innodb_flush_log_at_trx_commit auf den Wert 2 oder gar 0 setzen, erlauben wir es der Datenbank auch Einträge ins Redo-Log zu verzögern und zu batchen und können so die Schreibleistung noch weiter erhöhen.&lt;/p&gt;
&lt;h3 id=&#34;folgerung-6-mehr-spindeln&#34;&gt;
    &lt;a href=&#34;#folgerung-6-mehr-spindeln&#34;&gt;
	Folgerung 6: Mehr Spindeln
    &lt;/a&gt;
&lt;/h3&gt;
&lt;p&gt;Wir können so mit verschiedenen Tricks bei der Gestaltung des Datenbankschemas die Anzahl der notwendigen Schreibzugriffe unter Umständen drastisch verringern und wir können uns mit Hilfe des Redo-Log unter Umständen einige Random-I/Os sparen, indem wir stattdessen vorübergehend lineare Schreibzugriffe machen. Am Ende aber müssen die Blöcke auf die Platte.&lt;/p&gt;
&lt;p&gt;Eine einzelne Platte, so haben wir gelernt, gibt uns nicht mehr als 200 Seeks pro Sekunde. Auch ein RAID-1 Paar bekommt nicht mehr Daten auf die Platte, da ja jede Hälfte des Spiegelpaares dieselben Operationen durchführen muß. Von 14 Platten in einem RAID-10 (einem Stripe aus Mirrors) würden wir also ca. 7 mal 200 Seeks/sec = 1400 Seeks/sec erwarten.&lt;/p&gt;
&lt;p&gt;In einem RAID-5 ist es weitaus schlechter. Da Datenbanken ausschließlich RAID-5 &amp;ldquo;Short Writes&amp;rdquo; machen, wird jede einzelne logische Schreiboperation zu vier physikalischen Schreiboperationen: Zwei Reads und zwei Writes. Mit einem großen Cache kann man die beiden Reads weg cachen, aber die beiden Writes bleiben. Hat der RAID-5 Controller außerdem einen großen batteriegepufferten Cache, kann es sein, daß auch die Schreibzugriffe in akzeptabler Zeit abgewickelt werden, aber die sichere Empfehlung für eine Datenbank ist in der Regel &amp;ldquo;RAID-5 ist böse, man will RAID-10&amp;rdquo;.&lt;/p&gt;
&lt;p&gt;Für eine Datenbank wollen wir also ein Plattenarray kaufen, daß aus möglichst vielen kleinen Disks zusammen gesetzt ist - uns interessiert ausschließlich die Anzahl der Seeks pro Sekunde, die wir von dem Array bekommen können. MB/sec sind von untergeordneter Bedeutung.&lt;/p&gt;
&lt;p&gt;Die Sun Performance Blueprint &lt;a href=&#34;http://www.sun.com/blueprints/1000/layout.pdf&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Wide Thin Disk Striping&lt;/a&gt;

 erklärt wie man mit Partitionen auf Arrays umgehen sollte: Sie sollten sich immer über alle vorhandenen Platten des Array erstrecken und es sollten &lt;em&gt;keine&lt;/em&gt; dedizierten Disks für Logs, Indices oder einzelne Tabellen verwendet werden. Ab 6 Platten wird diese Strategie sinnvoll, ab 10 Platten ist sie dedizierten Disks auf jeden Fall überlegen.&lt;/p&gt;
&lt;p&gt;In großen Arrays will man sich nicht mehr mit Disks abgeben, sondern &amp;ldquo;Storage managen&amp;rdquo; - Partitionen sollten daher immer über alle Disks gehen und das Array gleichmäßig aufheizen, sodaß man keine Hotspots mehr bekommt. Wenn das Array überlastet wird, kauft man dann eben einfach mehr Platten und reorganisiert. &lt;em&gt;sar -d&lt;/em&gt;, &lt;em&gt;iostat -x&lt;/em&gt; oder &lt;em&gt;dstat&lt;/em&gt; sind des Storage- und des Datenbankadmins treue Freunde. Man sollte eine gewisse Nähe zu ihnen aufbauen.&lt;/p&gt;
&lt;h3 id=&#34;folgerung-7-software-raid-ist-nix-schlimmes&#34;&gt;
    &lt;a href=&#34;#folgerung-7-software-raid-ist-nix-schlimmes&#34;&gt;
	Folgerung 7: Software-Raid ist nix schlimmes
    &lt;/a&gt;
&lt;/h3&gt;
&lt;p&gt;Wenn wir ein RAID-10 bauen, dann ist die Realisierung des RAID sehr wenig aufwendig: Ein Write-Request wird einfach zu zwei verschiedenen Platten gesendet und endet erst dann, wenn beide Platten ihn bestätigt haben. Das ist sehr leicht in Software realisieren. Ein Hardware-RAID bringt hier nur wenig Gewinn.&lt;/p&gt;
&lt;p&gt;Bei RAID-5, wenn man durch äußere Umstände dazu gezwungen wird, sieht da schon anders aus: Die meisten Software-RAID-5 Implementierungen sind ziemlich schäbig und RAID-5 profitiert ganz enorm von einem batteriegepufferten RAM als Cache. Hier ist ein (guter, teurer) RAID-Controller mit einem fetten batteriegepufferten Cache wahrscheinlich von Vorteil.&lt;/p&gt;
&lt;p&gt;Ein Software-RAID hat gegenüber einem Hardware-RAID dann verschiedene Vorteile: Zum Beispiel braucht man sich nicht mit einem proprietären Treiber zu prügeln, kann das RAID zuverlässig über /proc/mdstat in Linux oder das entsprechende Windows-Äquivalent monitoren und kann zumindest in Linux auf die einzelnen Platte auch nach dem Splitten des Mirrors einzeln ohne RAID zugreifen, da Linuxraid die Metadaten hinten auf die Platten malt - eine RAID-Hälfte ohne RAID sieht dann zumindest read-only für einen Nicht-RAID-Zugriff ganz normal aus.&lt;/p&gt;
&lt;p&gt;Sogar &lt;a href=&#34;http://michael.fuckner.net/me/blog/index.php?/archives/367-SAS-Raid-mit-multipathing-unter-Linux.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;multipathen&lt;/a&gt;

 kann man das.&lt;/p&gt;
&lt;h3 id=&#34;cpu-leistung-verblaßt-neben-plattenleistung&#34;&gt;
    &lt;a href=&#34;#cpu-leistung-verbla%c3%9ft-neben-plattenleistung&#34;&gt;
	CPU Leistung verblaßt neben Plattenleistung
    &lt;/a&gt;
&lt;/h3&gt;
&lt;p&gt;Die oben angestellten Betrachtungen haben an keiner Stelle die Leistung der Prozessoren des Systems gewürdigt. Das ist deswegen so, weil Datenbanken in der Regel kaum CPU-Probleme haben. Eine CPU mit 3 GHz Takt arbeitet pro Sekunde und Core 3 Milliarden Prozessorzylen ab, und moderne CPUs sollten eigentlich größenordnungsmäßig bei jedem Zyklus auch einen Befehl fertigstellen. Wenn man also von Disk Seeks von einer 200stel Sekunde ausgeht, dann werden in der Wartezeit auf die Platte um die 15 Millionen Wartezyklen pro Core in der CPU freigesetzt.&lt;/p&gt;
&lt;p&gt;Oder anders gesagt: Eine Datenbank kann nur in zwei Fällen wirklich CPU-Probleme bekommen:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;Wir haben etwas ganz wildes mit Stored Procedures oder anderem Code in der Datenbank gemacht. Das hätten wir besser gelassen.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;Die Datenbank ist speichergesättigt und fräst nun wie wild mit der CPU durch ihre Speicherbänke, weil sie niemals auf die Platte warten muß. Klagen über &amp;ldquo;CPU ausgelastet&amp;rdquo; sind in diesem Fall wahrscheinlich Beschwerden auf sehr hohem Niveau.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In MySQL ist es außerdem so, daß wir in der Regel eine Query in einem Thread abarbeiten und wir eine bestimmte Menge an Concurrency benötigen, um ausreichend viele CPUs sättigen zu können.&lt;/p&gt;
&lt;p&gt;Insbesondere Replikation ist derzeit strikt seriell und kann nicht nennenswert mehr als einen Thread belegen.&lt;/p&gt;
&lt;h3 id=&#34;folgerung-8-ein-reiner-backup-slave-braucht-nur-einen-maximal-2-cores&#34;&gt;
    &lt;a href=&#34;#folgerung-8-ein-reiner-backup-slave-braucht-nur-einen-maximal-2-cores&#34;&gt;
	Folgerung 8: Ein reiner Backup-Slave braucht nur einen, maximal 2 Cores
    &lt;/a&gt;
&lt;/h3&gt;
&lt;p&gt;Da Replikation strikt seriell ist, kann ein Slave der nur repliziert und nicht auch noch Read-Queries abarbeitet oder Reports generiert niemals nennenswert mehr als einen Core busy halten. Es lohnt überhaupt nicht, hier viel Geld in Cores zu investieren. RAM oder Platten sind bessere Investitionsziele.&lt;/p&gt;
&lt;h3 id=&#34;folgerung-9-concurrency-schätzen-und-begrenzen&#34;&gt;
    &lt;a href=&#34;#folgerung-9-concurrency-sch%c3%a4tzen-und-begrenzen&#34;&gt;
	Folgerung 9: Concurrency schätzen, und begrenzen
    &lt;/a&gt;
&lt;/h3&gt;
&lt;p&gt;MySQL ist eine Datenbank die klar auf Commodity Hardware hin entwickelt worden ist und die durch die überall verfügbare und leicht zu konfigurierende Replikation bevorzugt horizontal zu skalieren ist. Es ist in vielen Fällen eher lohnend, einen zweiten Server aufzusetzen statt den einzigen Server weiter zu vergrößern.&lt;/p&gt;
&lt;p&gt;MySQL funktioniert derzeit recht gut mit 4 oder 8 Cores, aber 16 Cores wären schon grenzwertig und es wäre zu beweisen, daß eine 16 Core-Maschine mit MySQL tatsächlich besser funktioniert als zwei 8 Core-Maschinen. Speichergrößen von 32G und 64G können gut gehandhabt werden, aber für wesentlich größere Pools müßte nachgewiesen werden, daß keine Lockingprobleme existieren. Mit MySQL 5.0.30 und MySQL 5.0.37 wurden verschiedene Lockingprobleme für sehr große InnoDB Buffer Pools behoben, sodaß es unbedingt lohnend ist ein Upgrade durchzuführen wenn man sehr große Speichermengen hat und noch kleinere Versionen einsetzt. Aber selbst dann kann &lt;a href=&#34;http://www.mysqlperformanceblog.com/2007/07/27/more-gotchas-with-mysql-50/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;intensives Monitoring&lt;/a&gt;

 noch Locking triggern. Dieses Problem wird derzeit bearbeitet.&lt;/p&gt;
&lt;h3 id=&#34;recovery-gleich-mit-planen&#34;&gt;
    &lt;a href=&#34;#recovery-gleich-mit-planen&#34;&gt;
	Recovery gleich mit planen
    &lt;/a&gt;
&lt;/h3&gt;
&lt;p&gt;Im Falle einer Katastrophe oder eines Administrationsfehlers wird der eigene Chef rüberkommen und die üblichen drei Fragen haben:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Werden wir wieder online gehen können?&lt;/li&gt;
&lt;li&gt;Haben wir Daten verloren?&lt;/li&gt;
&lt;li&gt;Wie lange wird das alles dauern?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Der vorausschauende Admin hat für alle drei Fragen schon Antworten parat. Das kann er nur, wenn er die Recovery seiner Datenbank geplant, geübt und gebenchmarkt hat.&lt;/p&gt;
&lt;h3 id=&#34;folgerung-10-platz-um-sich-zu-bewegen&#34;&gt;
    &lt;a href=&#34;#folgerung-10-platz-um-sich-zu-bewegen&#34;&gt;
	Folgerung 10: Platz um sich zu bewegen
    &lt;/a&gt;
&lt;/h3&gt;
&lt;p&gt;Ein Backup-Slave, so vorhanden, sollte genug Platz und Power haben, um eine Recovery in endlicher Zeit durchführen zu können. In den meisten Fällen plant man 3 bis 5 mal mehr Plattenplatz ein als die Datenbankzielgröße ist. Teile dieses Platzes können langsamer sein (weniger Spindeln haben, also aus größeren Platten zusammengesetzt sein) als die eigentliche aktive Datenbank.&lt;/p&gt;
&lt;p&gt;Ein Test- oder Scratchrechner, etwa der Backup-Slave oder eine dritte Kiste, können sehr handlich sein, um Dinge zu testen, Datenextraktionen oder Loads vorzubereiten oder andere administrative Dinge zu stagen.&lt;/p&gt;
&lt;h2 id=&#34;der-einkaufszettel&#34;&gt;
    &lt;a href=&#34;#der-einkaufszettel&#34;&gt;
	Der Einkaufszettel
    &lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;Schätzhilfen:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Die Zielgröße der Datenbank.&lt;/li&gt;
&lt;li&gt;Die erwartete Schreiblast.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Prüfung: Lohnt es eine speichergesättigte Datenbank zu bauen?&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Ja:&lt;/strong&gt; Dies ist der Fall, wenn wir die benötigten Daten komplett ins RAM bekommen und die Schreibrate angemessen niedrig ist.&lt;/p&gt;
&lt;p&gt;In diesem Fall stecken wir alles Geld ins RAM und bauen Platten an die Datenbank, um die Schreibrate zu bewältigen und um unseren RAM-Cache beim Hochfahren voll zu saugen. Wir brauchen aber unter Umständen keine dicken Arrays mit vielen Spindeln.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Nein:&lt;/strong&gt; Wenn wir eine hohe Schreibrate haben oder unser Datenbestand so dick ist, daß wir mit den üblichen RAM-Größen keine Chance haben das alles weg zu cachen, nehmen wir das RAM eine Größe kleiner und stecken das frei werdende Geld in ein dickes Array mit vielen Spindeln. Das Array setzen wir als RAID-10 auf.&lt;/p&gt;
&lt;p&gt;Je nach zu erwartendem Grad von Concurrency bauen wir uns ein 2, 4 oder 8-Core-System. Richtig spannend wird die CPU-Nutzung aber aller Voraussicht nur bei speichergesättigten Datenbanken oder in spezialgelagerten Sonderfällen.&lt;/p&gt;
&lt;p&gt;Weil wir erwarten mehr als 2-4G Speicher zu verwenden, achten wir darauf, daß die CPU, das Betriebssystem und die Datenbank in 64 Bit-Versionen installiert werden.&lt;/p&gt;
&lt;p&gt;Konfigurationen, die ich beim Kunden gesehen habe waren etwa Dell 1950 mit einem MD1000 oder MD3000 hinten dran, HP DL 385 und DL 585 mit einem oder zwei MSA 30 hinten dran oder ähnliche Kisten von anderen Herstellern. Davor liegende Webserver waren oft Blades, zum Teil ohne Platten, mit 2G RAM und 32 Bit Betriebssystemen - für Webserver ist dies idR ausreichend und hier ist ein breites Array von Servernodes wichtiger als leistungsstarke einzelne Knoten, sobald die Latenz bei der Abarbeitung der Requests niedrig genug ist.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Ein Jahr auf der Straße</title>
      <link>https://blog.koehntopp.info/2006/10/31/ein-jahr-auf-der-strasse.html</link>
      <pubDate>Tue, 31 Oct 2006 23:00:00 +0000</pubDate>
      
      <guid>https://blog.koehntopp.info/2006/10/31/ein-jahr-auf-der-strasse.html</guid>
      <description>&lt;p&gt;&lt;p class=&#34;md__image&#34;&gt;
  &lt;img src=&#34;https://blog.koehntopp.info/uploads/train_delayed.jpg&#34; alt=&#34;&#34;  /&gt;
&lt;/p&gt;

&lt;/p&gt;
&lt;p&gt;Jetzt bin ich genau ein Jahr lang für MySQL auf der Straße gewesen.
Eigentlich begann alles schon ein wenig früher, als ich meinen Resturlaub Anfang September 2005 dazu verwendet habe, am MySQL Consulting Bootcamp 2005 in München teilzunehmen und mich dort auch zertifizieren zu lassen.
Zwei Monate später, am 1. November, habe ich dann meinen neuen Job angetreten.&lt;/p&gt;
&lt;p&gt;Die ersten zwei Wochen habe ich Peter Zaitsev beim c&amp;rsquo;t DVD-Shop Benchmark begleitet und dabei eine Menge über MySQL Performance Tuning gelernt.
Meine erste Reise hat mich nach Stockholm geführt, wo mir Tobias Asplund dann die Grundlagen des Geschäfts gezeigt hat und mein erster Alleinflug ging gleich danach nach
Trondheim, wo ich nicht nur Replikation bis zum Abwinken habe spielen können, sondern auch gleich noch gelernt habe, daß Migrationen nach 5.0 nicht immer ganz einfach sein müssen.
Den November habe ich in Amsterdam abgeschlossen, wo ich von Kai mit der &amp;ldquo;Using und Managing MySQL&amp;rdquo;-Class druckbetankt worden bin, und Kai und ich mit Eric vom (damals) JDBC-Connector-Team durch die Kneipen gezogen sind.&lt;/p&gt;
&lt;p&gt;&lt;p class=&#34;md__image&#34;&gt;
  &lt;img src=&#34;https://blog.koehntopp.info/uploads/helsinki_hotel.jpg&#34; alt=&#34;&#34;  /&gt;
&lt;/p&gt;

&lt;/p&gt;
&lt;p&gt;Im Dezember habe ich nicht nur Helsinki im Dunkeln gesehen, sondern auch gelernt, wie man betrunken über 2000 km nach Hause findet:
Der 6. Dezember ist in Finnland nämlich Nationalfeiertag und der Kunde und ich waren wahrscheinlich die einzigen Personen in ganz Finnland, die da gearbeitet haben.
Auf dem Flughafen haben sich unsere Wege dann getrennt: Ich 2000 km nach Süden, der Kunde noch mal nicht ganz so weit nach Norden&amp;hellip;
Aber nicht, ohne vorher in der Flughafenbar in Helsinki von einem Finnen Salmiakki erklärt zu bekommen.
Den Rest des Dezembers habe ich in Tübingen, in Dublin und in Lund, Schweden zugebracht.
Für die ersten zwei Monate keine schlechte Tour.&lt;/p&gt;
&lt;p&gt;&lt;p class=&#34;md__image&#34;&gt;
  &lt;img src=&#34;https://blog.koehntopp.info/uploads/rome_sunlight.jpg&#34; alt=&#34;&#34;  /&gt;
&lt;/p&gt;

&lt;/p&gt;
&lt;p&gt;Nach zwei Wochen Weihnachtspause habe ich dann das Jahr mit einer 4-Länder-an-einem-Tag-Tour begonnen:
Treffen mit Kollegen in Zürich, am selben Tag nach Frankreich, um von dort über London nach Dublin zu fliegen.
Was für eine Übung in Jet-Set!
Aber alles hatte geklappt und so habe ich dann im Januar meinen ersten Shadow in Dublin delivered, d.h. weitere Kollegen angelernt.
Im Januar hat auch einer der entschieden cooleren Aufträge angefangen:
Eine Oracle-Migration bei einem Kunden in Rom.
So kam es, daß ich an meinem Geburtstag in einem Cafe gegenüber dem Nationalmonument gesessen habe und meinen Espresso geschlürft habe.&lt;/p&gt;
&lt;p&gt;Um ein Haar wäre es mir in der Woche darauf gelungen, meine Mama unangekündigt an ihrem Geburtstag zu überraschen, denn ich hatte in Hamburg zu tun - zum Glück rief ich dann doch noch an, sonst hätte ich vor einer leeren Hütte gestanden.&lt;/p&gt;
&lt;p&gt;Der Februar ging sehr schnell vorbei: Rom, Zürich, Rom.&lt;/p&gt;
&lt;p&gt;&lt;p class=&#34;md__image&#34;&gt;
  &lt;img src=&#34;https://blog.koehntopp.info/uploads/hilton_sorrento.jpg&#34; alt=&#34;&#34;  /&gt;
&lt;/p&gt;

&lt;/p&gt;
&lt;p&gt;Nach einer kurzen Bürowoche dann Anfang März ein Einsatz für Training statt Consulting:
Kurs halten in Washington, DC - Yay!
Die Woche drauf war ich in Belgien und habe außerdem noch ein wenig Remote gearbeitet.
Dann Mitte März die MySQL Developers Conference in Sorrento mit Abschlußausflug nach
Pompeii.
Süditalien, wenn es noch nicht so heiß ist - wunderbar!
Die beiden Wochen danach waren ein wenig ruhiger:
Ein wenig Remote Work tut nach dieser Reiserei ganz gut.&lt;/p&gt;
&lt;p&gt;Anfang April war ich dann noch kurz in London auf Canary Wharf, bevor es zwei Wochen in den Urlaub nach Schottland ging, um Destillen, Gärten und Hightech zu bewundern und die Highlands zu erkunden.
Auf dem Weg haben wir dann auch noch Newcastle und York ein bisschen gesehen.
Nach dem Urlaub kommt die Arbeit - in meinem Fall die MySQL Users Conference 2006 in
Santa Clara.&lt;/p&gt;
&lt;p&gt;&lt;p class=&#34;md__image&#34;&gt;
  &lt;img src=&#34;https://blog.koehntopp.info/uploads/raygun.jpg&#34; alt=&#34;&#34;  /&gt;
&lt;/p&gt;

&lt;/p&gt;
&lt;p&gt;Gut daß ich nach der Rückkehr Anfang Mai relativ ruhig daheim bleiben konnte:
Jobs in Stuttgart, in Heidelberg und Remote Work für einen Kunden in den USA.
Eine mehrtägige Schulung über SkypeOut und &lt;code&gt;screen -x&lt;/code&gt; halten.
Das geht!
Der Mai war sowieso Monat der Kontraste - wie klingt &amp;ldquo;Olpe, Rahden, Washington DC&amp;rdquo;?
Washington war jetzt, Ende Mai, übrigens glühend heiß.
Wieder eine Schulung, was gut ist, weil man sich da die Zeit gut einteilen kann.
Ich habe sie benutzt, um das Air and Space Museum zu besichtigen.&lt;/p&gt;
&lt;p&gt;Den Juni habe ich dann in Stuttgart, Dresden, Zürich und Genf zugebracht.
Dabei habe ich in Genf einen uralten Freund wiederentdeckt:
Alexander Finger betrieb vor nicht ganz 20 Jahren syd.de, während ich als Teil von toppoint.de dasselbe in Kiel tat.
Inzwischen hat es ihn nach Genf verschlagen.
Ende Juni dann der erste Zweitages-Workshop Performancetuning in München und zwischendurch über das Mittsommer-Wochenende noch mal schnell in Skien, hinter Oslo, denn dort war
PHP Vikinger bei EZ Systems.
Nach der Rückkehr, quasi aus dem Flieger fallend, dann ein Talk für die Linux Users Group Karlsruhe über Performance Tuning und der Juni ist im Kasten.&lt;/p&gt;
&lt;p&gt;Eher häuslich geht es im Juli weiter:
PT in München, PT in Stuttgart und eine 1800 km Autotour: Karlsruhe-Rahden-Dresden-Karlsruhe in einer Woche.
München, Stuttgart, Olpe.
Und ich sagte noch: &amp;ldquo;Schickt mich aus Deutschland weg während der WM.&amp;rdquo;
Stattdessen kriege ich glühend heiße, überfüllte WM-Städte während da Spiele sind&amp;hellip; &lt;em&gt;grummel&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Der August beginnt mit Abkühlung, und mit Amsterdam.
Ich werde so halb krank, und so kann ich mir die für die 2. Augustwoche geplante Kiel/Dänemark-Tour abschminken.
Stattdessen bin ich die Woche drauf in
Oslo, in Bath, und dann mal wieder in Helsinki, um ein wenig von den Clustergöttern zu lernen.&lt;/p&gt;
&lt;p&gt;&lt;p class=&#34;md__image&#34;&gt;
  &lt;img src=&#34;https://blog.koehntopp.info/uploads/woking_martian.jpg&#34; alt=&#34;&#34;  /&gt;
&lt;/p&gt;

&lt;/p&gt;
&lt;p&gt;Das kann ich dann Anfang September zurückgeben, wo ich stattdessen Shadow für einen Kollegen in Woking mache und dann zwei Tage PT Workshop in Köln gebe.
In Köln treffe ich auch
&lt;a href=&#34;http://garv.in/serendipity/archives/976-Koelnisch-Walking-mit-Kris-und-Barbara-Schoeneberger.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Serendipity&amp;rsquo;s Garvin&lt;/a&gt;

.
Die Office-Woche darauf bringe ich in Kiel zu, um meine Eltern zu besuchen.
Die Woche darauf bin ich dann prompt richtig antibiotikamäßig krank statt in Amsterdam.
Danach bin ich Ende September dann aber immerhin so fit, daß ich das Projekt in Rom abschließen kann, und die zwei verbleibenden Tage der Woche nutze, um mit der Katze Rom zu erkunden.&lt;/p&gt;
&lt;p&gt;&lt;p class=&#34;md__image&#34;&gt;
  &lt;img src=&#34;https://blog.koehntopp.info/uploads/i_am_sterdam.jpg&#34; alt=&#34;&#34;  /&gt;
&lt;/p&gt;

&lt;/p&gt;
&lt;p&gt;Der Oktober ist dann schnell herumgebracht:
zur Hälfte in Amsterdam, zur anderen Hälfte in Karlsruhe&amp;hellip;
Und so werde ich dieses Jahr auch beschließen:
Neben einer Woche in Sheffield, UK steht bis zum Jahresende mehr oder weniger lückenlos Amsterdam auf dem Plan (Und ein Tag Köln!).&lt;/p&gt;
&lt;p&gt;Gefällt mir der Job?
Oh, ja.
Reisen macht mir Spaß und mit den Zielen habe ich Glück gehabt.
Die Arbeit macht Spaß und bietet jede Menge Dinge, die ich noch nicht kann, aber die ich schaffen kann.
Auf der Straße und dicht an der Technik scheint mir eher zu liegen als Papierschieberei&amp;hellip;
Ansonsten ist es das älteste Gewerbe der Welt:
Geh für Geld zum Kunden und mach&amp;rsquo; ihn glücklich.&lt;/p&gt;
&lt;p&gt;Ist der Job anstrengend?
Oh, ja.
Es ist der anstrengendste Job, den ich jemals hatte.
Aber, wenn man einen Rhythmus finden kann, bei dem man in passenden Abständen Home-Office machen kann, ist er durchhaltbar&amp;hellip;&lt;/p&gt;
&lt;p&gt;Was haben wir als Firma geschafft?
MySQL ist in diesem Jahr von 5.0.15 nach 5.0.27 gekommen und die 5.0 hat sich dabei langsam aber sicher in eine stabile Plattform verwandelt.
Meine Kunden haben im Laufe des Jahres die Features von 5.0 entdeckt und so erobert sich MySQL immer mehr Anwendungen, die der Datenbank vorher verschlossen geblieben sind.&lt;/p&gt;
&lt;p&gt;Meine Hauptthemen im Bereich Operating waren &amp;ldquo;Monitoring&amp;rdquo; und &amp;ldquo;Backup&amp;rdquo;, im Bereich DBA sind &amp;ldquo;Replikation&amp;rdquo; und &amp;ldquo;SQL-Optimierung&amp;rdquo;, im Bereich Entwicklung &amp;ldquo;InnoDB und Transaktionen&amp;rdquo;.
Seltsamerweise sind Stored Procedures und Trigger ein wichtiger Checkpoint, um ernst genommen zu werden, aber sie werden dann (glücklicherweise!) kaum eingesetzt - denn das Thema im Bereich Architektur war &amp;ldquo;Scale-Out&amp;rdquo; -
&lt;a href=&#34;https://blog.koehntopp.info/2006/07/30/leben-mit-fehlern-der-schluessel-zum-scaleout.html&#34;&gt;horizontales Wachstum&lt;/a&gt;

.
Intern war das wichtigste Thema für uns Consultants &amp;ldquo;Wachstum und Integration von neuen Mitarbeitern&amp;rdquo; und ist nun &amp;ldquo;Best Practice Building&amp;rdquo;.
Langsam, aber sicher ändert sich die Art der Arbeit von Pivot-Consulting to Projekt-Consulting&amp;hellip;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Erfahrungen mit Nonoffice</title>
      <link>https://blog.koehntopp.info/2006/07/05/erfahrungen-mit-nonoffice.html</link>
      <pubDate>Wed, 05 Jul 2006 14:35:20 +0000</pubDate>
      
      <guid>https://blog.koehntopp.info/2006/07/05/erfahrungen-mit-nonoffice.html</guid>
      <description>&lt;p&gt;Seit dem 1. November 2005 arbeite ich für MySQL Deutschland GmbH als Consultant. Damit mit bin ich Teil einer Firma mit 320 Mitarbeitern in 27 Ländern.
&lt;a href=&#34;http://www.c0t0d0s0.org/archives/1738-Erfahrungen-mit-Homeoffice.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Ein Office habe ich noch nie gesehen&lt;/a&gt;

.
Einige der Kollegen, mit denen ich am engsten zusammenarbeite habe ich auch noch nie gesehen.
Die anderen sehe ich so alle paar Monate mal.
Die Zusammenarbeit ist gut und sehr intensiv.&lt;/p&gt;
&lt;p&gt;Als ich von web.de zu MySQL gewechselt bin, war ich am Anfang sehr skeptisch und habe meine Interviewpartner gefragt, wie das denn wohl so ist, für eine &amp;ldquo;virtuelle&amp;rdquo; Firma zu arbeiten, in der die Kollegen so weit verstreut gesät sind.
Auch in den Fällen, in denen ich neue Kollegen interviewed habe ist dies die Frage, die mir in der Regel zuerst gestellt wird.&lt;/p&gt;
&lt;p&gt;Meine Antwort auf diese Frage ist inzwischen &amp;ldquo;Hast Du einmal in irgendeinem Open-Source-Projekt mitgearbeitet und Dich mit den Leuten dort abstimmen müssen?&amp;rdquo;
Wenn die Antwort &amp;ldquo;ja&amp;rdquo; lautet (und damit man von MySQL interviewed wird, muss sie in der Regel &amp;ldquo;ja&amp;rdquo; lauten), kann ich antworten &amp;ldquo;Es ist genau wie da, nur daß Du Geld dafür bekommst.&amp;rdquo;&lt;/p&gt;
&lt;p&gt;In der Praxis sieht das so aus, daß MySQL über einen von mehreren Wegen einen Lead hereinbekommt, der vom Sales-Team entweder telefonisch oder vor Ort in einen Auftrag umgewandelt wird.
Sales geht dabei mit dem Presales-Support und einigen Fragebögen daher und produziert so ein Informationspaket, bei dem die Schedulerin und Consulting meist eine relativ gute Idee haben, was das Projekt ist und welche Fähigkeiten dabei gefordert sind.
Zusammen finden wir die passenden Personen zur Abwicklung des Projektes und machen mit dem Kunden und dem Consultant einen Terminplan.
Der Consultant reist dann an, macht sein Ding und reist einen glücklichen Kunden hinterlassend wieder ab.&lt;/p&gt;
&lt;p&gt;So die Theorie, und im Regelfall auch die Praxis.&lt;/p&gt;
&lt;p&gt;MySQL als Firma besteht aus einer an mehreren Stellen konzentrierten Infrastruktur, die Sales, Presales, Scheduling, Consulting, Training, aber auch Support, Development, Maintenance und den die betriebswirtschaftlichen Dinge abwickelnden Geschäftsstellen Dienste anbietet.
Diese Dienste sind, wo immer es geht, web-basierend und so gestaltet, daß sie so Browser-unabhängig sind wie irgend möglich.
Zu diesen Diensten gehören verschiedene Firmen-Wikis, einige Eventum-Taskmanager-Instanzen, der Teamkalender für Training und Consulting und viele andere Dinge.
Auch Nicht-Webdienste, etwa Bitkeeper, Continous Build Services, ein Firmen-IRC-Server, Mail- und Newsdienste und eine verteilte Asterisk-Installation gehören dazu.&lt;/p&gt;
&lt;p&gt;Am Ende ist dies keine Sache, die so verschieden wäre von etwa dem Setup, das KDE intern verwendet, plus die Sales- und BWL-Seite dazu.&lt;/p&gt;
&lt;p&gt;Für mich als Consultant bedeutet dies, daß ich Zugriff auf meine Kollegen bei Consulting, Training und im Support habe, in dem ich Skype, Mail und IRC verwende.
Bei einer Firma, die so verteilt ist wie MySQL, ist zu jeder Tages- und Nachtzeit jemand zu sprechen, der mir helfen kann.
Wir kommunizieren dabei nicht nur dienstlich, sondern ich habe so wie beim normalen ircen auch einige gute Freunde gewonnen, von denen ich einen Teil noch nicht persönlich getroffen habe.
Die Zusammenarbeit ist noch intensiver beim Support-Team:
Arbeiten heißt für die ircen, und Tom Basil hat auf seine unvergleichliche Weise aus dem Team eine Art Familie gemacht, sodass &amp;ldquo;seine&amp;rdquo; Supporter (und einige Adoptivkinder aus anderen Abteilungen) quasi im Netz leben.&lt;/p&gt;
&lt;p&gt;Meine Arbeit organisiere ich weitgehend selbst:
Ich entscheide, wann ich arbeite, wie ich arbeite und was ich wie priorisiere.
MySQL folgt sehr strikt einem management-by-objectives Ansatz, sodass es letztendlich vollkommen egal ist, wie ich die Ziele erreiche, die ich mir mit meinem Team gesetzt habe.&lt;/p&gt;
&lt;p&gt;Wenn ich einen Home-Office-Tag habe, haue ich meistens morgens meine Mail weg.
Konkret bleibe ich auf dem Stand, was auf den Firmenmailinglisten so passiert, verfolge einige interessante Dinge im Bitkeeper und im Worklog, um bei der Weiterentwicklung des Servercodes auf Stand zu bleiben und beantworte die Mails, die Kunden reingeschickt haben, weil sie noch Fragen haben oder einfach nur so in Kontakt bleiben wollen.&lt;/p&gt;
&lt;p&gt;Nach dem Mittag ist Papierkram angesagt:
Expenses, Engagement Summaries, Knowledge Base Entries oder Whitepapers und die dazu notwendigen Experimente, oder den folgenden Einsatz vorbereiten.
Dazu gehören auch die anstehenden Kundenanrufe, die ich inzwischen routinemäßig alle über SkypeOut abwickle.
Oder ich nehme mir den Nachmittag frei und erledige die Dinge am Abend, bei denen ich mich nicht mit Kunden synchronisieren muss.&lt;/p&gt;
&lt;p&gt;Es kann auch sein, dass ich einen Remote Gig habe.
Dies ist in der Regel ein Einsatz bei einem Kunden in einer anderen Zeitzone, bei dem sich die Anreise wegen der Einsatzdauer nicht lohnt, oder wegen der Dringlichkeit nicht möglich ist.
In diesem Fall verschiebt sich mein Lebenszyklus ein wenig in Richtung der anderen Zeitzone, was mir natürlich ein wenig Freizeit zu ungewöhnlichen Zeiten beschert.&lt;/p&gt;
&lt;p&gt;Meistens hat der Kunde einen Sprung-Host in seiner DMZ, auf den ich per &lt;code&gt;ssh&lt;/code&gt; draufklettern kann, und auf dem ich ihn dann bitte einen &lt;code&gt;screen&lt;/code&gt; zu starten.
Nachdem ich mich mit &lt;code&gt;screen -x&lt;/code&gt; an seine Session angeklemmt habe, bitte ich ihn, mich huckepack mit nach drinnen in sein Netz zu nehmen.
Über seinen Firmen-IRC-Server, über Skype oder über SkypeOut können wir nun reden, während wir uns eine Shell-Session im &lt;code&gt;screen&lt;/code&gt; teilen und er sehen kann, was ich tippe.
Dies ist für die Teile der Arbeit, die synchron erledigt werden müssen, in den meisten Fällen genauso effektiv als wäre ich vor Ort.
Asynchrones Arbeiten geht im Grunde genau so, nur daß ich idR einen &lt;code&gt;ssh&lt;/code&gt;-Login bekomme, mit dem ich zu meinen Zeiten alleine arbeiten kann.&lt;/p&gt;
&lt;p&gt;Für die Dinge, die ich dabei auf eigenen Systemen ausprobieren muss, damit sie beim Kunden reibungslos klappen kann ich entweder auf meinem Laptop mit vmware Instanzen simulieren oder auf Rechnern in den firmeneigenen Labors in Cupertino oder Uppsala Rechenzeit reservieren.
Auch auf diese Rechner komme ich problemlos mit &lt;code&gt;ssh&lt;/code&gt; oder &lt;code&gt;rdesktop&lt;/code&gt; über das Firmen-VPN drauf.&lt;/p&gt;
&lt;p&gt;Bei einem regulären Kundeneinsatz bin ich nicht alleine.
Ich bin vielleicht der einzige MySQL-Mitarbeiter vor Ort, aber hinter mir steht über GSM, openvpn, https-VPN oder ssh-Tunnel der Zugriff auf Support und meine Kollegen von Training und Consulting, die gerade nicht beim Kunden sind.&lt;/p&gt;
&lt;p&gt;Auch die Katze arbeitet inzwischen bei MySQL - in ihrem Fall als Entwicklerin.
Ihre Arbeit ist damit noch näher am KDE-Modell als meine:
Bitkeeper, UnitTest-Harnesses und Continuos Build-Prozeduren auf einer ganzen Reihe von Plattformen der Buildfarm sind ihre Freunde.
Scrum im Irc und im Wiki sind ebenso Standard-Prozesse für Entwickler wie der Umgang mit einem Bugtracker.
Und wie in jedem regulären Irc in anderen Open-Source-Projekten entwickeln sich auch dort Freundschaften und persönliche Kontakte.&lt;/p&gt;
&lt;p&gt;Entwickler fahren alle mindestens einmal im Jahr zur firmeninternen Developer Conference, die dieses Jahr in Sorrento in Italien stattfand.
Dort finden sich auch Abgesandte aller anderen Abteilungen, sodass dies eine ausgezeichnete Methode ist, um bisher virtuelle Freundschaften einmal mit Personen und Gesichtern zu verbinden.
Weitere Gelegenheiten dieser Art sind die US-amerikanische und die europäische User Conference, MySQL Usergroup-Treffen, bei denen man neben Anwendern auch Kollegen aus demselben geografischen Gebiet treffen kann, und natürlich Abteilungsmeetings.
Wir in Consulting streben drei solcher Treffen im Jahr an, und für die anderen Abteilungen geschieht dies nach Bedarf&amp;hellip;&lt;/p&gt;
&lt;p&gt;Alles in allem kann ich nach 9 Monaten MySQL sagen, daß dies die fremdartigste Firma ist, in der ich je gearbeitet habe.
Keine &amp;ldquo;casual communication&amp;rdquo;, keinen Flurfunk zu haben, ist manchmal etwas anstrengend und kostet sicherlich mehr Energie als in einer traditionellen Firma.&lt;/p&gt;
&lt;p&gt;Andererseits habe ich mich sofort zu Hause gefühlt:
Während MySQL als Firma fremdartig ist, sind mir die Methoden der Zusammenarbeit vertraut, denn ich habe sie außerhalb der Firma in den Projekten, an denen ich mitgearbeitet habe, jahrelang gelebt.&lt;/p&gt;
&lt;p&gt;Neu ist im Grunde nur, daß das, was vorher mein Hobby war, jetzt mein Leben ist.
Ein anstrengendes, spannendes und überaus aufregendes Leben.&lt;/p&gt;
&lt;p&gt;Also liebe Kollegen, bekannter und unbekannterweise:
Wie ist es für Euch gewesen, als ihr hier angefangen habt?&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>

