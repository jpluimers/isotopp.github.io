<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>software on Die wunderbare Welt von Isotopp</title>
    <link>https://blog.koehntopp.info/tags/software.html</link>
    <description>Recent content in software on Die wunderbare Welt von Isotopp</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 26 Aug 2022 07:17:33 +0000</lastBuildDate><atom:link href="https://blog.koehntopp.info/tags/software/feed.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Architektur heißt umbauen</title>
      <link>https://blog.koehntopp.info/2012/03/06/architektur-hei-t-umbauen.html</link>
      <pubDate>Tue, 06 Mar 2012 13:42:47 +0000</pubDate>
      
      <guid>https://blog.koehntopp.info/2012/03/06/architektur-hei-t-umbauen.html</guid>
      <description>&lt;p&gt;&lt;p class=&#34;md__image&#34;&gt;
  &lt;img src=&#34;https://blog.koehntopp.info/uploads/Architekturheisstumbauen.jpg&#34; alt=&#34;Theatre of Marcellus&#34;  /&gt;
&lt;/p&gt;

&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Theatre_of_Marcellus&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Teatro di Marcello&lt;/a&gt;

, Rom&lt;/p&gt;
&lt;p&gt;Das auf dem Bild da ist das Theater des Marcellus, in Rom.  Das Foto habe
ich Anfang 2006 aufgenommen, als ich dienstlich bei einem Kunden ganz in der
Nähe war.&lt;/p&gt;
&lt;p&gt;Das Marcellustheater ist nach Marcus Marcellus benannt, einem Neffen von
Kaiser Augustus, und wurde so um 13 vor Christus fertig gestellt.  Es ist
später verfallen, dann im Mittelalter als Festung genutzt worden, im 16.
Jahrhundert dann in eine Palastresidenz umgewandelt worden.  Heute besteht
der obere Teil aus einer Reihe von Appartments und unten werden im Sommer
diverse Konzerte aufgeführt.&lt;/p&gt;
&lt;p&gt;&lt;p class=&#34;md__image&#34;&gt;
  &lt;img src=&#34;https://blog.koehntopp.info/uploads/Architekturheisstumbauen2.jpg&#34; alt=&#34;Umgebaute Umbauten&#34;  /&gt;
&lt;/p&gt;

&lt;/p&gt;
&lt;p&gt;Bei der Ausbildung von Software-Ingenieuren, und wahrscheinlich auch bei der
Ausbildung von Architekten, machen wir jungen Leuten falsche Hoffnungen.
Bei den Software-Ingenieuren bin ich mir sogar ziemlich sicher.&lt;/p&gt;
&lt;p&gt;Wir erzählen diesen Leuten an der Uni, daß sie Technik zum Ausprobieren
bekommen werden oder Wahlfreiheit haben werden in den Mitteln und Methoden,
die sie einsetzen werden.  Und wir machen Ihnen Hoffnung, daß sie neuen Code
schreiben werden.  Später, wenn diese Personen von der Uni abgehen, landen
sie in einer Umgebung, die erstens eine Technik und die Best Practice zu
ihrem Einsatz genau definiert und die zweitens einen Haufen existierenden
Code hat, der läuft und Geld verdient, aber der zu verändern oder zu
erweitern ist.&lt;/p&gt;
&lt;p&gt;Das erzeugt bei diesen Menschen enorme Umstellungsprobleme, denn sie kommen
mit vollkommen falschen Erwartungshaltungen in den Beruf, ja, in vielen
Fällen fehlen ihnen sogar Methodiken, die für das Überleben im ersten Job
essentiell sind.&lt;/p&gt;
&lt;p&gt;Darum will ich es hier einmal ganz offen sagen:&lt;/p&gt;
&lt;p&gt;Junger Informatiker, hoffnungsvolle Uni-Abgängerin!&lt;/p&gt;
&lt;p&gt;Hier ist, was Dich in Deinem Beruf erwartet:&lt;/p&gt;
&lt;p&gt;Du wirst mit altem Code zu tun haben, der offensichtliche Schwächen hat.  Du
wirst mit Werkzeugen und Umgebungen arbeiten müssen, die Deiner Meinung nach
nicht Stand der Technik sind.  Eine Deiner Hauptaufgaben wird sein, den
alten Code zu refaktorieren.  Dabei wird die Zeit nicht reichen, diese
Aufgabe zu Ende zu führen.  Du wirst die Versuchung verspüren, den alten
Kram wegzuwerfen und auf der grünen Wiese neu anzufangen.&lt;/p&gt;
&lt;p&gt;Die schlechte Nachricht:&lt;/p&gt;
&lt;p&gt;Weder wirst Du jemals auf der grünen Wiese neu anfangen dürfen, noch würde
es viel helfen, das zu tun.  Der komplizierte Code-Wirrwarr, mit dem Du es
zu tun hast, ist häßlich und besteht aus einem Haufen ekeliger Sonderfälle.
Wenn Du auf der grünen Wiese neu anfängst, wirst Du ein Design haben, das
die Hauptfälle in einem schönen Modell abdeckt, und an den Sonderfällen
umfassend versagt.&lt;/p&gt;
&lt;p&gt;Du wirst sie schrittweise nachrüsten wollen, und Du endest mit einem
Drahtverhau von vergleichbarer Komplexität zu dem, den Du jetzt hast.  Das
ist normal.  Denn der Code, mit dem Du es zu tun hast, wurde wahrscheinlich
nicht von sabbernden Idioten geschrieben, sondern von Leuten wie Dir, und er
war am Anfang genau wie Dein Code: Klar und einfach.&lt;/p&gt;
&lt;p&gt;Dann traf er auf eine Realität, die alles ist, aber weder klar noch einfach.
Heute ist er ein halbwegs korrektes Modell der Realität.  Und weit mehr als
die Hälfte des unübersichtlichen Designs mit dem Du es zu tun hast, ist
wahrscheinlich nicht auf die Unfähigkeit Deiner Vorgänger zurück zu führen,
sondern auf die Tatsache, daß die Realität nun einmal leider eine Ansammlung
von häßlichen Ausnahmen ist, die alle mit modelliert sein wollen.&lt;/p&gt;
&lt;p&gt;Die gute Nachricht:&lt;/p&gt;
&lt;p&gt;Es ist gar nicht notwendig, schönen Code zu bauen.  Anders als Dein
Universitätsprofessor verlangt Dein Arbeitgeber nicht, daß Dein Code
minimal, elegant, beweisbar oder sonstwie ist.  Das einzige Kriterium ist,
ob er den Job getan bekommt.  Genau genommen ist das Kriterium sogar, ob er
den Job gut genug getan bekommt.  Sobald die Kosten in zusätzlicher
Hardware, Kundensupport oder manueller Nachbearbeitung geringer sind, als
die Arbeitszeit, die Dein Team benötigt, um die letzten Warzen abzuschaben,
wirst Du aufhören können.  Sogar müssen, denn Du bist nicht mehr rentabel
und Deine Arbeit dient keinem betrieblichen Ziel.&lt;/p&gt;
&lt;p&gt;Die schlechte Nachricht, die daraus folgt:&lt;/p&gt;
&lt;p&gt;Befriedigung in gutem Handwerk zu finden wird für Dich vermutlich schwierig,
denn gutes Handwerk ist illegal.  Befriedigung in Closure zu finden, darin,
Sachen wirklich ganz und gar zu Ende zu bringen, full circle zu kommen, wird
auch schwierig.  Denn das ist vermutlich auch illegal, und es wird keine
Zeit dafür sein, denn so eine Pickliste mit Aufgaben ist nach unten offen.
Du wirst stattdessen vermutlich Gutes im Vorbeigehen tun müssen, also hier
in diesem oder jenem Projekt einen Teil mit anfassen müssen, der eigentlich
nicht strikt hätte angefaßt werden müssen, es aber verdient hat und außerdem
waren ja noch Stunden übrig.&lt;/p&gt;
&lt;p&gt;Die frustrierende Nachricht:&lt;/p&gt;
&lt;p&gt;Bei vielem Code, den Du schreibst, wird Deinen Auftraggebern am Anfang noch
nicht klar sein, ob das, was der Code machen wird, am Ende das
Geschäftsmodell tatsächlich verbessern wird.  Du weißt aus dem Open Source
Umfeld schon, daß die goldene Regel lautet:
&lt;a href=&#34;https://en.wikipedia.org/wiki/Release_early,_release_often&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Release Early, Release Often!&lt;/a&gt;

.&lt;/p&gt;
&lt;p&gt;Du solltest Dir vor Augen führen, daß das nicht nur für Dich und Dein
Scrum-Team gilt, sondern auch für Deinen Product Owner: In den weitaus
meisten Fällen hat er keine Ahnung, ob seine Idee
&lt;a href=&#34;https://www.youtube.com/watch?v=xEs67tv401o#t=26&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;gut für die Firma&lt;/a&gt;


ist oder sich am Ende schädlich auswirken wird.  Wenn das der Fall ist, ist
die einzig logische Aktivität, diesen Code wieder aus der Produktion zu
nehmen und zu verschrotten - Du hast dann für den Papierkorb entwickelt.&lt;/p&gt;
&lt;p&gt;Daher ist es wichtig, viele Ideen eines PO erst einmal sehr roh zu
implementieren und dann in der Realität zu testen, ob sie überhaupt auf der
Business-Ebene funktionieren.  Erst dann, wenn sicher gestellt ist, daß Code
business-positive ist, lohnt es überhaupt, die Sache noch einmal zu
reimplementieren oder refaktorieren auf eine Weise, die den Ansprüchen eines
ausgebildeten Informatikers würdig ist.  Weit mehr als 90% der Ideen Deines
PO sind blöder Scheiß und verdienen den Tod durch Patch Revert.  Es lohnt
also nicht, große architekturelle Zuckerbäckereien auszuarbeiten, solange
nicht bekannt ist, ob die Idee dahinter überhaupt in der Lage ist, den Lohn
für Dich und Dein Team zu verdienen.&lt;/p&gt;
&lt;p&gt;In dieser Phase - dem experimentellen Verifizieren der Requirements - ist
die einzige Metrik, wie viele Ideen und Varianten in möglichst kurzer Zeit
Dein Team released bekommt, egal wie schlecht, ineffizient oder kaputt Dein
Code ist.  Erst später, wenn Dein PO nicht nur glaubt zu wissen, was er
will, sondern belastbare Zahlen hat, die beweisen, daß das was er will auch
von der Firma gewollt werden kann, erst dann kannst Du Deine
Ingeniersausbildung auspacken und sauber arbeiten.&lt;/p&gt;
&lt;p&gt;So, jetzt ist es heraus.&lt;/p&gt;
&lt;p&gt;Eine der Aufgaben, die eine Firma lösen muß, wenn sie junge
Informatikerinnen und Uni-Abgänger einstellt, ist sie zu deprogrammieren.
Ihnen die Flausen aus dem Kopf zu pusten, die ihnen das Uni-Studium in den
Kopf gesetzt hat.  Sie mit den Realitäten der Welt vertraut zu machen.  Und
sie zu lehren, daß so wenig wie die wenigsten Städteplaner und
Landschaftsarchitekten mit einem leeren Plan anfangen können, die wenigsten
Softwarearchitekten und Entwickler mit einem leeren Editor starten.&lt;/p&gt;
&lt;p&gt;Hier sind die wichtigsten Fähigkeiten für einen Softwareentwickler:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Man kann ihn mit einer Bugnummer über unbekannten Code abwerfen, und auf
dem Weg nach unten erkennt er schon im Flug, was da kaputt ist.  Wenn er
gelandet ist, klärt er den Bug und während der Exfiltration macht er die
Gegend um seinen Weg nach draußen auch noch schön.&lt;/li&gt;
&lt;li&gt;Er kann existierenden Code zu umbauen, daß der Code nach der Operation
schöner, schneller und funktionaler ist als vorher und die neuen
Anforderungen erfüllt.  Dabei ist während jeder einzigen Sekunde der
Umbauphase (jeder Zwischencommit und jedes Zwischenrollout) in sich
lauffähig und korrekt, und die Datenformate sind kompatibel, sodaß keine
Betriebsunterbrechung für den Endnutzer sichtbar wird und man geschmeidig
zwischen den Versionen vor und zurück rollen kann.&lt;/li&gt;
&lt;li&gt;Er akzeptiert, daß Code ein Modell der Welt ist und daß sie Welt nicht
schön, elegant oder minimal ist, sondern dreckig, irregulär und
überkomplex.  Und er kommt damit klar.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Das Bild von dem Teatro di Marcello da oben illustriert das ganz gut.&lt;/p&gt;
&lt;p&gt;Gebaut vor mehr 2000 Jahren zu einem ganz anderen Zweck, ist es aufgelassen,
umgebaut, umgewidmet, modernisiert, renoviert und restauriert worden, und
wurde die meiste Zeit seiner Lebensdauer von Leuten genutzt.  Nichts an
diesem Gebäude ist so wie es sein soll, nichts an diesem Gebäude wird so
genutzt wie es einmal geplant war.  Nichts an der Stadt in der es steht ist
so.&lt;/p&gt;
&lt;p&gt;Dennoch ist dieser Ort voller Menschen, die dort leben und sich dort wohl
fühlen.&lt;/p&gt;
&lt;p&gt;Informatik ist genau so.&lt;/p&gt;
&lt;p&gt;(Weil towo danach gefragt hat)&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Fertig gelesen: The Lean Startup</title>
      <link>https://blog.koehntopp.info/2011/12/02/fertig-gelesen-the-lean-startup.html</link>
      <pubDate>Fri, 02 Dec 2011 19:44:03 +0000</pubDate>
      
      <guid>https://blog.koehntopp.info/2011/12/02/fertig-gelesen-the-lean-startup.html</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://www.amazon.de/Lean-Startup-Entrepreneurs-Continuous-ebook/dp/B004J4XGN6&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;The Lean Startup&lt;/a&gt;

,
Eric Ries, EUR 10.99&lt;/p&gt;
&lt;p&gt;&lt;p class=&#34;md__image&#34;&gt;
  &lt;img src=&#34;https://blog.koehntopp.info/uploads/lean_startup.jpg&#34; alt=&#34;Ries: The Lean Startup&#34;  /&gt;
&lt;/p&gt;

&lt;/p&gt;
&lt;p&gt;Das Buch &amp;ldquo;The Lean Startup&amp;rdquo; von Eric Ries wurde mir von &lt;a
href=&#39;https://www.xing.com/profile/JohannPeter_Hartmann&#39;&gt;Johann-Peter
Hartmann&lt;/a&gt; und den anderen Maiblümchen als Antwort auf meinen
Froscon-Vortrag dieses Jahr geschenkt, damit ich mich nicht mehr so alleine
fühle. :-) In der Tat beschreibt Ries eine ganze Reihe von Firmen, die in
einem Umfeld extremer Veränderung und Unsicherheit agieren - das ist Ries&#39;
Definition von Startup, und die kann auch recht große Firmen oder Behörden
abdecken. Sie beschreibt auch mein Arbeitsumfeld recht gut.&lt;/p&gt;
&lt;p&gt;Ries fragt sich, mit welchen Methoden Firmen in den
&lt;a href=&#34;http://en.wikipedia.org/wiki/Cynefin&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Quadranten des Cynefin-Modells&lt;/a&gt;


agieren können, die von &amp;ldquo;Simple&amp;rdquo; (Es existiert eine Best Practice und ein
quantitativer Prozeß zu ihrer Einhaltung und Verbesserung) verschieden sind.
Es geht also darum, wie ein Startup in sich verändernden, unbekannten oder
unentwickelten Märkten herausfinden kann, welche Dienste oder Produkte einem
Kunden bezahlenswert erscheinen. Hat eine Firma diesen Markt gefunden, geht
es weiter darum, wie man diesen Markt wachsen lassen kann bzw. in diesem
Markt wachsen kann.&lt;/p&gt;
&lt;p&gt;Er kommt zu dem Schluß (und belegt diesen), daß Firmen in
Startup-Situationen experimentieren müssen, ja, daß dies die wichtigste
Kommunikation mit dem Kunden ist. Firmen müssen aus diesen Experimenten
Lehren für ihre Produkte oder Dienste ziehen, und diese dann in der nächsten
Iteration umsetzen. Nach Ries ist es dabei sehr wichtig, früh, viel und
schnell zu experimentieren - und dies ist in einer Startup-Situation
wichtiger, als ein vollständiges, korrektes oder durchentwickeltes Produkt
zu haben.&lt;/p&gt;
&lt;p&gt;Er führt eine ganze Reihe von Beispielen auf, in denen Firmen Geld, Zeit und
Personen in die Entwicklung von Produkten gesteckt haben, die dann am Markt
nicht funktioniert haben. Fehler sind um so leichter, schneller und billiger
zu korrigieren, je früher die Phase der Produktentwicklung ist, in der sie
erkannt werden. In unsicheren oder unreifen Märkten ist es daher wichtig,
als &lt;em&gt;Erstes&lt;/em&gt; mit dem Kunden zusammen das Produkt zu testen und es
dann erst mit traditionellen Methoden fertig zu stellen (&lt;a href=&#34;https://blog.koehntopp.info/2011/12/02/testing-in-production.html&#34;&gt;Testing in Production&lt;/a&gt;


kann dabei helfen). So kann man sicherstellen, daß die
begrenzten Engineering-Kapazitäten des Startups nur auf
Produktiveränderungen angewendet werden von denen schon bewiesen ist, daß
sie sich positiv auf das Geschäft auswirken werden.&lt;/p&gt;
&lt;p&gt;Dabei legt Ries großen Wert darauf, nicht blind zu testen, sondern das
&lt;em&gt;corporate learning&lt;/em&gt; durch Experimente zu messen und zu validieren, die
nicht-monetäre Wertschöpfung eines Startups also quantifizierbar zu machen,
da diese Metriken Investoren oder Stakeholders Instrumente an die Hand
geben, erfolgreiche von nicht erfolgreichen Startups zu unterscheiden, auch
wenn diese noch keinen Gewinn machen. Ries mißt dazu Dinge wie verbesserte
Conversion, Adoption Rates oder andere wichtige Metriken, die zeigen, daß
sich das Unternehmen in seinem Zielmarkt besser bewegt, weil es jetzt mehr
darüber weiß.&lt;/p&gt;
&lt;p&gt;Auf der Grundlage dieser Metriken kann die Unternehmensführung dann
entscheiden, wie mit dem Produkt oder Dienst zu verfahren ist (&amp;ldquo;Pivot or
persevere&amp;rdquo; - Ändern oder weitermachen). Wenn ein Startup einen Pivot
durchführt, also grundlegende Änderungen am Produkt oder eine
Strategieänderung notwendig sind, dann ist dies eine Entscheidung, die oft
schwer zu kommunizieren ist. Also gibt Ries eine Reihe von Hinweisen, wie
Pivotpunkte zu erkennen, zu klassifizieren und erfolgreicher zu
kommunizieren sind.&lt;/p&gt;
&lt;p&gt;Abschließend konzentriert sich Ries dann darauf, den dargestellten
Forschungsmechanismus zu institutionalisieren und zu beschleunigen, und
dabei die Lerngeschwindigkeit der Firma meßbar zu machen.&lt;/p&gt;
&lt;p&gt;Alles in allem ein faszinierendes Buch, bei dem man sich zwar durch den
iterativen amerikanischen Lehr- und Erklärstil durchbeißen muß, das aber
eine ganze Menge Dinge in Perspektive setzt, mit denen ich in den letzten
Jahren täglich zu tun hatte.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Testing in Production</title>
      <link>https://blog.koehntopp.info/2011/12/02/testing-in-production.html</link>
      <pubDate>Fri, 02 Dec 2011 18:55:45 +0000</pubDate>
      
      <guid>https://blog.koehntopp.info/2011/12/02/testing-in-production.html</guid>
      <description>&lt;p&gt;Mitte November ist auf The Testing Planet ein Artikel von Seth Eliot
(Microsoft) erschienen mit dem Titel
&lt;a href=&#34;http://www.thetestingplanet.com/2011/11/the-future-of-software-testing-part-one-testing-in-production/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Testing in Production&lt;/a&gt;

.
Eliot schreibt über Software Services, also Dienste, die auf einer Website
laufen, sodaß die User keine Anwendungen installieren müssen (Wir erinnern
uns: Microsoft ist noch immer ganz groß darin, Software auf physikalischen
read-only Medien an Benutzer zu verschicken, auch wenn diese Software seit
einer Dekade kaum mehr als ein Loader für Updates über das Internet ist und
nach der Installation vom Medium erst einmal alle eben installierten Dateien
durch das heruntergeladene Update durch neuere Versionen ersetzt werden).&lt;/p&gt;
&lt;p&gt;In Software Services hat der Anbieter jedenfalls die Kontrolle darüber,
welche Version der Software welchem Kunden präsentiert wird, und er hat in
der Regel Zugriff und Meßmöglichkeiten im Data Center, auf dem die Software
läuft, kann also auf der Serverseite diagnostizieren, was wann wie und warum
schief geht.&lt;/p&gt;
&lt;p&gt;Eliot behauptet nun, daß User seltsamer sind als Tester sich vorstellen
können und man daher besser so früh als möglich mit echten Benutzern testet
(Testing in Production = TIP).  Vorhergehende synthetische Tests (Up Front
Testing = UFT) können gemacht werden, sollten aber nur so weit gemacht
werden, daß man sicher in der Produktion testen kann.&lt;/p&gt;
&lt;p&gt;Eliot weiter:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;For some TiP methodologies we can reduce risk by reducing the exposure of
the new code under test.  This technique is called “Exposure Control” and
limits risk by limiting the user base potentially impacted by the new
code.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Was er damit meint, wird weiter unten klar, wenn er erläutert, welche Klassen von TIP er unterscheidet.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;em&gt;Ramped Deployment&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Der zu testende Code wird ausgerollt, ist aber zunächst nicht aktiv.  Er
wird für einen Subset der Benutzer aktiviert und überwacht.  Dabei
können unterschiedliche Aspekte des Codes untersucht werden - wie er
sich auf die Geschäftsprozesse auswirkt, ob er technisch funktioniert
oder wie er skaliert etwa.  Benutzer können automatisch oder
handselektiert sein, und wissen entweder, daß die mit experimentellem
Code arbeiten oder nicht.&lt;/p&gt;
&lt;p&gt;Entscheidend ist, daß das Deployment von neuem Code und seine
Aktivierung voneinander getrennt werden.  Dies erlaubt es, Features
graduell einzuführen und schnell zu deaktivieren, wenn sich Probleme
entwickeln.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;em&gt;Controlled Test Flight&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ein a/b-Experiment, in der alte und der neue Code parallel für
unterschiedliche Benutzer aktiviert wird und die Benutzer nicht wissen,
in welcher Kategorie sie sich befinden.  Eine Unterkategorie von Ramped
Deployment.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;em&gt;Experimentation for Design&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;eine weitere Verfeinerung von Controlled Test Flight ist, die neue und
die alte User Experience parallel für unterschiedliche, repräsentative
Benutzergruppen zu aktivieren, um den Einfluß der neuen UX auf das
Geschäftsmodell zu prüfen.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;em&gt;Dogfood/Beta&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;wissen die Benutzer um die Tatsache, daß sie neuen Code testen, handelt
es sich nicht um Experimentation, sondern um eine Beta.  Sind die
Benutzer Mitarbeiter oder Freunde der Firma, handelt es sich um
Dogfooding.  Hier ist es oft zulässig, mit dem Wissen und Einverständnis
der Benutzer zusätzliche Telemetrie zu installieren und auszuwerten.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;em&gt;Synthetic Test in Production&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;das Anwenden von automatisierten UFT-Systemen auf Produktionssysteme.
Sie können verwenden werden, um das Produktionssystem oder sein
Monitoring zu validieren.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;em&gt;Load/Capacity Test in Production&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Last und Kapazitätstest in der Produktion, bei Eliot unter Verwendung
synthetischer Last gegen Produktionssysteme, meistens zusätzlich zur
existierenden Last durch reale Benutzer, um die Kapazität des Systems zu
bestimmen.
&lt;br/&gt;&lt;br/&gt;
Die mir bekannten Anwender solcher Verfahren spielen stattdessen eher
mit den Gewichten an ihren Load Balancern, um die externe Last durch
reale User auf weniger und weniger Backends zu konzentrieren.
&lt;br/&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;Synthetische Last wird dabei lediglich als Meßsonde verwendet, um die Latenz
von Requests zu überwachen - kommt zur typischen Think Time des Benchmarks
eine Wait Time hinzu, ist die den getesteten Frontends angebotene Load
größer als ihre Kapazität und es baut sich eine Queue auf.  Lastsättigung
ist erreicht und die Kapazität des Gesamtsystems kann durch einfache
Dreisätze bestimmt werden.  Bricht man den Test hier ab, ist die UX für die
realen User nicht destruktiv beeinflußt: Das System mag einigen Benutzern
für kurze Zeit langsam erscheinen, ist aber zu allen Zeiten normal
Funktionsfähig.
&lt;br/&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;Bricht man den Test nicht ab, sondern erhöht die Last vorsichtig weiter,
kann man den Failure Mode des Systems verifizieren: Art und Lage der
begrenzenden Ressource im Gesamtsystem wird offensichtlich, Qualität des
Monitorings und Prozesse im Operating werden mitgeprüft.  Diese Phase des
Tests erfordert schnelle Reaktion, um den Einfluß auf die UX der realen
Benutzer zu minimieren.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;em&gt;Outside-in load /performance testing&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ein Lasttest mit synthetischer Load, die von einer externen Quelle in
die Produktionsumgebung injeziert wird, also denselben Weg nach drinnen
nimmt wie die realen Benutzer.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;em&gt;User Scenario Execution&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Ausführung von Endbenutzer-Szenarien gegen ein Produktionssystem von den
Endpunkten echter Benutzer.  Kann manuelles Testen beinhalten.  Diese
Tests können regional unterschiedliche UX sichtbar machen (&amp;ldquo;Das System
ist schnell genug in Europa, von Asien aus aber kaum benutzbar.&amp;rdquo;)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;em&gt;Data Mining&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Die Logdaten echter Benutzer werden nach Problemen oder Testfällen
durchsucht, die spezifische Szenarien darstellen.  Die Fälle, die
auftreten, werden automatisch als Bugtickets eingetragen.  Das kann in
Echtzeit passieren.  &lt;br/&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;Echtzeitmonitoring kann auf viele verschiedene Weisen nützlich sein.
Insbesondere in den o.a.  Lasttests ist ein Echtzeit-Errormonitor
notwendig, um die Saturierung von der Überlast des Systems trennen zu
können, und um Lage und Failure Mode der überlasteten Komponente im
Produktionsweg schnell erkennen zu können.  Ohne ein solches
Echtzeitmonitoring ist diese Art von Test nicht sicher durchführbar.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;em&gt;Destructive Testing&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Injektion von Fehlern in Produktionssysteme, um Servicekontinuität im
Fehlerfall zu validieren (
&lt;a href=&#34;http://www.codinghorror.com/blog/2011/04/working-with-the-chaos-monkey.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Chaos Monkey&lt;/a&gt;


).&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;em&gt;Production Validation&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Echtzeitmonitore, die die verschiedenen Phasen der Produktion auf
Businessebene, Contentebene, Technischer Ebene, Netzwerkebene und so
weiter überwachen und visualisieren.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Eliot bringt dann verschiedene Beispiel für TIP: Googles und Bings
a/b-Experimente und 1% Launches werden genannt, sie sind Beispiele für
Experimentation for Design.  Controlled Test Flights werden dort ebenfalls
verwendet, dabei werden kritische Änderungen ausgerollt und parallel zu
getestetem Code betrieben - oft werden dabei Daten zweimal geschrieben: Der
alte Code führt das alte System weiter, der neue Code arbeitet im neuen
System mit anderen Dateien oder Datenbanktabellen.&lt;/p&gt;
&lt;p&gt;Chaosmonkey war der Vorläufer eines Systems für Destructive Testing, das
jetzt die
&lt;a href=&#34;http://techblog.netflix.com/2011/07/netflix-simian-army.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Simian Army&lt;/a&gt;


darstellt: Neben Chaos Monkey, der Komponenten zufällig aus dem System
entfernt gibt es nun Latency Monkey, der Dienste zufällig verzögert,
Conformity Monkey, der Systeme aus dem Dienst kippt, die nicht auf dem
erwarteten Stand sind und viele andere Dienstprüfer und Killer mehr.&lt;/p&gt;
&lt;p&gt;Eliot weist darauf hin, daß Tests in der Produktion gefährlich sein können
und sie deswegen so aufgebaut werden müssen, daß sie keine Produktionsdaten
verändern können und nur mit funktionierendem und schnellem Monitoring
durchgeführt werden können.&lt;/p&gt;
&lt;p&gt;Korrekt ausgeführt eröffnen sie aber eine Menge Lernmöglichkeiten, die
traditionellem Testen nicht zur Verfügung stehen.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Git &#34;gewinnt&#34;</title>
      <link>https://blog.koehntopp.info/2009/01/05/git-gewinnt.html</link>
      <pubDate>Mon, 05 Jan 2009 08:52:56 +0000</pubDate>
      
      <guid>https://blog.koehntopp.info/2009/01/05/git-gewinnt.html</guid>
      <description>&lt;p&gt;Irgendwann war allen klar, daß CVS es nicht mehr bringt und was Besseres her muss.
Das hat dazu geführt, daß ich statt einem Versionskontrollsystem in 2000 jetzt in 2009 etwa vier davon parallel verwenden muss.
Da wäre einmal das traditionelle &amp;ldquo;besser als CVS, aber sonst alles genauso&amp;rdquo; SVN, und dann eine Reihe von verteilten Versionskontrollsystemen, namentlich git, bzr (&amp;ldquo;Bazar&amp;rdquo;), hg (&amp;ldquo;Mercurial&amp;rdquo;).
Neben diesen gibt es dann einen Haufen relativ wenig Gebrauchtes oder experimentelles Zeugs, das sich mangels Community nicht anzusehen lohnt.&lt;/p&gt;
&lt;p&gt;Blickt man auf die Benutzerlandschaft in 2009, wird klar: Git gewinnt.
Einmal ist
&lt;a href=&#34;http://www.perlfoundation.org/perl5/index.cgi?perl_git_repositories&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;der Perl Source&lt;/a&gt;


samt History nun nach Git konvertiert, dann
&lt;a href=&#34;http://blogs.gnome.org/newren/2009/01/03/gnome-dvcs-survey-results/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;zeigt die Gnome-Umfrage&lt;/a&gt;


einen klaren Vorsprung von Git, der Kernel verwendet sowieso git und bei KDE denkt man auch über Git als verteiltes Versionsverwaltungssystem nach.
Auch der X-Server von X.org wird mit Git versioniert.&lt;/p&gt;
&lt;p&gt;Schön, daß hier nun endlich eine Konvergenz absehbar ist (nur mein MySQL-Zeugs muss ich wohl weiter mit bzr pullen).&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Steve Ballmer lernt etwas</title>
      <link>https://blog.koehntopp.info/2008/04/20/steve-ballmer-lernt-etwas.html</link>
      <pubDate>Sun, 20 Apr 2008 05:04:52 +0000</pubDate>
      
      <guid>https://blog.koehntopp.info/2008/04/20/steve-ballmer-lernt-etwas.html</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://blog.seattletimes.nwsource.com/techtracks/2008/04/microsoft_ceo_steve_ballmer_spoke.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Microsoft&amp;rsquo;s Ballmer gives unvarnished take on Windows, online businesses&lt;/a&gt;

:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;He sought feedback from the crowd of IT pros, many of whom have dedicated
their careers to becoming expert in Microsoft&amp;rsquo;s products, on which
Internet search engine they use. &amp;ldquo;How many of you use Live Search as your
default?&amp;rdquo; Ballmer asked.&lt;/p&gt;
&lt;p&gt;A smattering of hands went up. Tepid applause. &amp;ldquo;How many of you use Yahoo
search as your default?&amp;rdquo; Far fewer hands went up and the room was relative
quiet, until it filled with laughter.&lt;/p&gt;
&lt;p&gt;Ballmer, trying again, louder this time, &amp;ldquo;How many of you use Yahoo search
as your default?&amp;rdquo; The same response. &amp;ldquo;Wow, we offered 31 bucks a share,&amp;rdquo; he
said, to more laughter.&lt;/p&gt;
&lt;p&gt;&amp;ldquo;How many of you use Google as your default?&amp;rdquo; Ballmer asked. The vast
majority in the audience raised their hands, cheering and hooting.&lt;/p&gt;
&lt;p&gt;Ballmer looked around. Smiled. Scratched his cheek. Rubbed his face with
his hand.&lt;/p&gt;
&lt;/blockquote&gt;
</description>
    </item>
    
    <item>
      <title>Softwarepatente? Abgelehnt!</title>
      <link>https://blog.koehntopp.info/2005/07/06/softwarepatente-abgelehnt.html</link>
      <pubDate>Wed, 06 Jul 2005 10:52:19 +0000</pubDate>
      
      <guid>https://blog.koehntopp.info/2005/07/06/softwarepatente-abgelehnt.html</guid>
      <description>&lt;p&gt;Die Abstimmung zu Software-Patenten im EU-Parlament hat stattgefunden und das Parlament lehnt die umstrittene Richtlinie ab.
Golem berichtet in
&lt;a href=&#34;http://www.golem.de/0507/39055.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Softwarepatente? Abgelehnt!&lt;/a&gt;

:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Europäisches Parlament lehnt umstrittene Richtlinie ab
Wie sich gestern bereits abzeichnete, hat das Europäische Parlament am heutigen Mittwoch die Softwarepatent-Richtlinie mit einer Mehrheit von 648 Stimmen abgelehnt und damit das Gesetzgebungsverfahren beendet.
Zwar wurde nach außen hin fast einhellig gefordert, Softwarepatente nach dem US-Vorbild in Europa zu verhindern, in der Frage, wie weit diese Ablehnung gehen sollte, gab es jedoch große Differenzen, die zu einer regelrechten Lobbyschlacht führten.
Letztendlich einigte man sich nun darauf, besser keine Richtlinie zu verabschieden, statt einer, die dem jeweiligen Lager missfällt.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;Update:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.spiegel.de/netzwelt/technologie/0,1518,363904,00.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Europaparlament stimmt gegen Software-Patente&lt;/a&gt;

 (Spiegel Online)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.heise.de/newsticker/meldung/61446&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;EU-Parlament beerdigt Softwarepatentrichtlinie&lt;/a&gt;

 (Heise Newsticker)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.theregister.co.uk/2005/07/06/eu_bins_swpat/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;EU parliament bins software patent bill&lt;/a&gt;

 (The Register)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://futurezone.orf.at/futurezone.orf?read=detail&amp;amp;id=269918&amp;amp;tmp=55351http://futurezone.orf.at/futurezone.orf?read=detail&amp;amp;id=269918&amp;amp;tmp=55351&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Softwarepatente abgeschmettert&lt;/a&gt;

 (Futurezone)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://yro.slashdot.org/article.pl?sid=05/07/06/1156214&amp;amp;tid=155&amp;amp;tid=17&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;EU Says No To Software Patents&lt;/a&gt;

 (Slashdot)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.faz.net/s/Rub3E022E9C248F4E4A826CFF71F3383A63/Doc~EACF62D9734FE48788D4A2E097B1110FC~ATpl~Ecommon~Scontent.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Europäische Union: Keine Software-Patentrichtlinie&lt;/a&gt;

 (FAZ)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://tagesschau.de/aktuell/meldungen/0,1185,OID4497376_TYP6_THE_NAV_REF1_BAB,00.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Richtlinie zu Softwarepatenten vom Tisch&lt;/a&gt;

 (Tagesschau)&lt;/li&gt;
&lt;li&gt;[EU-Parlament lehnt Software-Patente ab&lt;/li&gt; (Computer Base)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://news.bbc.co.uk/2/hi/technology/4655955.stm&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Software patent bill thrown out&lt;/a&gt;

 (BBC News)&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
  </channel>
</rss>

