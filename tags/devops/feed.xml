<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>devops on Die wunderbare Welt von Isotopp</title>
    <link>https://blog.koehntopp.info/tags/devops.html</link>
    <description>Recent content in devops on Die wunderbare Welt von Isotopp</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 26 Aug 2022 07:17:33 +0000</lastBuildDate><atom:link href="https://blog.koehntopp.info/tags/devops/feed.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Empty commits and other wrong tools for the job</title>
      <link>https://blog.koehntopp.info/2021/10/06/empty-commits-and-other-wrong-tools-for-the-job.html</link>
      <pubDate>Wed, 06 Oct 2021 09:46:10 +0000</pubDate>
      
      <guid>https://blog.koehntopp.info/2021/10/06/empty-commits-and-other-wrong-tools-for-the-job.html</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://twitter.com/akrey/status/1445656529877680129&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;This&lt;/a&gt;

 is how you can make an empty commit:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-console&#34; data-lang=&#34;console&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;gp&#34;&gt;$&lt;/span&gt; git commit --allow-empty -m &lt;span class=&#34;s2&#34;&gt;&amp;#34;Kick it&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This has the disadvantage of also generating a commit message.
&lt;a href=&#34;https://twitter.com/akrey/status/1445656529877680129&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Another way&lt;/a&gt;

 to achieve this seems to be&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-console&#34; data-lang=&#34;console&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;gp&#34;&gt;$&lt;/span&gt; git commit --amend --no-edit &lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; git push -f
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;but that will make people hate you in other ways.&lt;/p&gt;
&lt;p&gt;So lets stop and ask:
Why would you want to make an empty commit?&lt;/p&gt;
&lt;p&gt;Most people want this because they attached a server-side action to a commit, a CI/CD activity.&lt;/p&gt;
&lt;h1 id=&#34;this-is-wrong&#34;&gt;
    &lt;a href=&#34;#this-is-wrong&#34;&gt;
	This is wrong
    &lt;/a&gt;
&lt;/h1&gt;
&lt;p&gt;This is wrong in the same way &lt;a href=&#34;https://blog.koehntopp.info/2021/01/05/using-python-to-bash.html&#34;&gt;writing Shell Scripts&lt;/a&gt;

 is wrong:
It kind of works, but now you have another, worse problem and still no solution to the original problem.&lt;/p&gt;
&lt;p&gt;You need to stop and question your life choices, and most importantly, wake up the engineer in you.&lt;/p&gt;
&lt;h2 id=&#34;but-i-need-to-debug-my-cicd-pipeline&#34;&gt;
    &lt;a href=&#34;#but-i-need-to-debug-my-cicd-pipeline&#34;&gt;
	But I need to debug my CI/CD pipeline
    &lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;Kick it off using the tooling provided to you.
Your environment has an API that is specifically built to enable you to do that.
Use it.&lt;/p&gt;
&lt;p&gt;In Gitlab:
&lt;a href=&#34;https://docs.gitlab.com/ee/ci/triggers/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Triggering pipelines through the API &lt;/a&gt;

&lt;/p&gt;
&lt;p&gt;In GitHub:
&lt;a href=&#34;https://docs.github.com/en/actions/managing-workflow-runs/manually-running-a-workflow#running-a-workflow-using-the-rest-api&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Running a workflow using the REST API&lt;/a&gt;

&lt;/p&gt;
&lt;p&gt;This not only works reliably, you can get proper error messages.
On top of that, you just did &lt;em&gt;not&lt;/em&gt; pee into your commit history.&lt;/p&gt;
&lt;h2 id=&#34;but-i-need-to-redeploy-because-i-need-a-terraform-run-after-i-just-lost-an-instance&#34;&gt;
    &lt;a href=&#34;#but-i-need-to-redeploy-because-i-need-a-terraform-run-after-i-just-lost-an-instance&#34;&gt;
	But I need to redeploy, because I need a Terraform run after I just lost an instance
    &lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;This is fractally broken, there is breakage in your breakage.&lt;/p&gt;
&lt;p&gt;The proper solution is a reconciliation loop of the kind Kubernetes has: Measure the existing state and compare it to the desired state. Then execute the actions necessary to transform the measured state into the desired state, in a loop.&lt;/p&gt;
&lt;p&gt;So if you are not on K8s, you need to move to K8s or re-invent K8s for your environment, badly.
Yes, Terraform, Harness and friends have it all wrong.&lt;/p&gt;
&lt;p&gt;Erecting infrastructure quickly and portably across backends surely is nice, but assumes a properly functioning declarative environment.
That is an environment where you describe the desired state of the infrastructure and the platform takes care of maintaining that desired state for you.&lt;/p&gt;
&lt;p&gt;Most platforms do not work that way.
Some fake it, badly.
For example, nobody uses AWS autoscalers to autoscale, but they surely are useful to protect your instance count.&lt;/p&gt;
&lt;h2 id=&#34;the-problem-inside-this-problem&#34;&gt;
    &lt;a href=&#34;#the-problem-inside-this-problem&#34;&gt;
	The problem inside this problem
    &lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;And since we are talking about CI/CD pipelines:
Don&amp;rsquo;t YAML them. Don&amp;rsquo;t JSON them. Don&amp;rsquo;t XML them.&lt;/p&gt;
&lt;p&gt;All of these things surely are nice to describe static objects that have static properties.
You can successfully use any of them to express the desired state of a thing in a declarative way.&lt;/p&gt;
&lt;p&gt;If you see anything that looks like &amp;ldquo;foreach&amp;rdquo;, &amp;ldquo;when&amp;rdquo;, &amp;ldquo;unless&amp;rdquo; or similar, it&amp;rsquo;s procedural.
These are control structures.
They are part of programming languages.
Which any of these three are decidedly not.&lt;/p&gt;
&lt;p&gt;Programming in any of these three is wrong use of tooling, and you should not do it.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;YAML, JSON and XML are for declarative things.&lt;/li&gt;
&lt;li&gt;Python, Go and Rust are for procedural things.&lt;/li&gt;
&lt;li&gt;Bash is for interactive use only.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Use the proper tooling for the job.
Be an engineer.&lt;/p&gt;
&lt;p&gt;Otherwise, you&amp;rsquo;ll just get your old bash rsync deployment scripts back, in a harder to debug packaging, and wrapped in conditionals and loops in YAML &amp;ldquo;syntax&amp;rdquo;.&lt;/p&gt;
&lt;p&gt;That is not what progress looks like.
At all.
Shoddy engineering begets pager calls, outages and suffering.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Using Python to bash</title>
      <link>https://blog.koehntopp.info/2021/01/05/using-python-to-bash.html</link>
      <pubDate>Tue, 05 Jan 2021 17:11:57 +0000</pubDate>
      
      <guid>https://blog.koehntopp.info/2021/01/05/using-python-to-bash.html</guid>
      <description>&lt;p&gt;Heise writes &lt;a href=&#34;https://www.heise.de/hintergrund/Einfuehrung-in-die-Bash-Programmierung-Minesweeper-in-der-Linux-Shell-entwickeln-5002358.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;an introduction to bash programming (in german)&lt;/a&gt;

:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Bash ist eine vollwertige Programmiersprache, mit der Sie allt√§gliche Aufgaben leicht automatisieren.&lt;/p&gt;
&lt;p&gt;Bash is a fully featured programming language that you can use to automate everyday tasks.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Bash is not a fully featured programming language at all, and nothing in bash is ever easy. You are advised to use a proper programming language early on in development, and if possible never put bash commands into a file.&lt;/p&gt;
&lt;p&gt;A few early warning signs to look out for:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Bash is somewhat okay to handle files. If you find yourself handling lines, words or characters instead of entire files, you are using the wrong tool. The script you are working on should have been written in something else.&lt;/li&gt;
&lt;li&gt;Bash is really bad at math. If you are doing math, especially if it is not small positive integers, you should have been using something else.&lt;/li&gt;
&lt;li&gt;Bash is really bad at handling any kind of UI. If you start thinking about curses, Tk or Qt, you should have been using something else.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Bash is also bad at  safely handling filenames with weird characters in them, bad at  handling Unicode, bad at handling Errors and bad at many other elementary things.&lt;/p&gt;
&lt;p&gt;Basically, it is better to start in something else right away if the things move away from an interactive command line and end up in a file. Use whatever you like as an interactive command line, but do not write bash or shell scripts.&lt;/p&gt;
&lt;p&gt;Shell is a thing you want to understand and then not use, because you learned to understand it. (&lt;a href=&#34;https://groups.google.com/g/de.comp.os.unix.shell/c/VkJ0T4P2ZVA/m/3G5MF3oLNYcJ&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;in German, from 1998&lt;/a&gt;

)&lt;/p&gt;
&lt;p&gt;For the rest of this discussion, we assume &amp;ldquo;Python 3&amp;rdquo; as an instance of &amp;ldquo;something else&amp;rdquo;, but if you are older than 50, feel free to use &amp;ldquo;Perl&amp;rdquo; instead.&lt;/p&gt;
&lt;p&gt;If you are already doing Python, the rest of this is not for you. You already know these things.&lt;/p&gt;
&lt;h2 id=&#34;do-not-modify-the-system-python&#34;&gt;
    &lt;a href=&#34;#do-not-modify-the-system-python&#34;&gt;
	Do not modify the system python
    &lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;Use the system Python, if possible, but do not try to modify the system Python installation. Use a virtual environment for packages, instead.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-console&#34; data-lang=&#34;console&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;gp&#34;&gt;$&lt;/span&gt; mkdir myscript
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;gp&#34;&gt;$&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;cd&lt;/span&gt; !$
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;gp&#34;&gt;$&lt;/span&gt; python3 -mvenv venv
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;gp&#34;&gt;$&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;source&lt;/span&gt; venv/bin/activate
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This will create a local (symlinked) copy of the system python, and activate it as the interpreter environment to modify if you install dependencies. You will want to update &lt;code&gt;pip&lt;/code&gt;, install &lt;code&gt;wheel&lt;/code&gt; and then maintain a file named &lt;code&gt;requirements.txt&lt;/code&gt; at the top level of the &lt;code&gt;myscript&lt;/code&gt; directory. It will contain the names of the packages (optionally with version pins) you depend on. You can install the dependencies using &lt;code&gt;pip install -r requirements.txt&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-console&#34; data-lang=&#34;console&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;gp&#34;&gt;$&lt;/span&gt; cat revenv.sh
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;gp&#34;&gt;#&lt;/span&gt;! /bin/bash
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;go&#34;&gt;deactivate
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;go&#34;&gt;rm -rf venv
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;go&#34;&gt;python3 -mvenv venv
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;go&#34;&gt;source venv/bin/activate
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;go&#34;&gt;pip install --upgrade pip
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;go&#34;&gt;pip install wheel
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;go&#34;&gt;pip install -r requirements.txt
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;go&#34;&gt;pip freeze -r requirements.txt &amp;gt; requirements-frozen.txt
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;It deactivates the venv, throws away the installed venv, and then re-makes it from the requirements.&lt;/p&gt;
&lt;p&gt;Yes, that is a shell script. There are ways to do the same things natively and better.&lt;/p&gt;
&lt;p&gt;It is extensively documented in &lt;a href=&#34;https://packaging.python.org/overview/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;An Overview of Packaging for Python&lt;/a&gt;

, for example &lt;a href=&#34;https://packaging.python.org/tutorials/managing-dependencies/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Managing Application Dependencies&lt;/a&gt;

 and &lt;a href=&#34;https://packaging.python.org/tutorials/packaging-projects/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Packaging Python Projects&lt;/a&gt;

.&lt;/p&gt;
&lt;p&gt;Running a local Python package registry is as simple as exposing a directory with a specific file structure using a web server, see &lt;a href=&#34;https://docs.python-guide.org/shipping/packaging/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;here&lt;/a&gt;

, and a step-by-step walkthrough for a kind of minimal setup can be found &lt;a href=&#34;https://python-packaging.readthedocs.io/en/latest/minimal.html#minimal-structure&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;here&lt;/a&gt;

.&lt;/p&gt;
&lt;h2 id=&#34;do-not-try-to-write-bash-in-python&#34;&gt;
    &lt;a href=&#34;#do-not-try-to-write-bash-in-python&#34;&gt;
	Do not try to write Bash in Python
    &lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;In an online discussion, &lt;a href=&#34;https://twitter.com/netzverweigerer/status/1346450864853159941&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;somebody remarked&lt;/a&gt;

:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;I do not think that&lt;/p&gt;
&lt;p&gt;&lt;code&gt;subprocesss.run([&amp;quot;ls&amp;quot;, &amp;quot;-l&amp;quot;, &amp;quot;/dev/null&amp;quot;], capture_output=True)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;is more intuitive or less error prone, but different people have different opinions.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;That is correct.&lt;/p&gt;
&lt;p&gt;The point here is that this is not useful at all, in a Python program. That line will then produce output such as&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;crw-rw-rw- 1 root root 1, 3 Dec  7 12:15 /dev/null&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;and that needs parsing to be useful for anything. You&amp;rsquo;d not do that at all in Python, ever.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kn&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;pathlib&lt;/span&gt; &lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Path&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;s&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Path&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;/dev/null&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;stat&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;s&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;os&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;stat_result&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;st_mode&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;8630&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;st_ino&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;6&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;st_dev&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;6&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;st_nlink&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;st_uid&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;st_gid&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;st_size&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;st_atime&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1607339753&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;st_mtime&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1607339753&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;st_ctime&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1607339753&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now we can talk. In Bash, everything always is a string.&lt;/p&gt;
&lt;p&gt;In a proper programming language, we have a wealth of basic data types, and can use them in containers to construct aggregate types or even objects, and we can make use of this.&lt;/p&gt;
&lt;p&gt;Using &lt;code&gt;Path().stat()&lt;/code&gt; we get access to the same information in useful form that combines nicely with any number of powerful language and library features.&lt;/p&gt;
&lt;h2 id=&#34;if-you-need-to-run-commands-consume-json&#34;&gt;
    &lt;a href=&#34;#if-you-need-to-run-commands-consume-json&#34;&gt;
	If you need to run commands, consume JSON
    &lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;So what if you have to run an external command to do things?&lt;/p&gt;
&lt;p&gt;Hopefully the external commands produce something structured such as JSON:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;subprocess&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;json&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;lvs&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;subprocess&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;run&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;([&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;lvs&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;--reportformat=json&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;],&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;capture_output&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;True&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;lvs_output&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;json&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;loads&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;lvs&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;stdout&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;k&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;lvs_output&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;report&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;][&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;][&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;lv&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;nb&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;k&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;lv_name&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;],&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;k&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;lv_size&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;])&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;blogbackup&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;20.00&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;g&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;dedibackup&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;100.00&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;g&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;disk_images&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;40.00&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;g&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;gitlab&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;10.00&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;g&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;halde&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;350.00&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;g&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;iot&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;30.00&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;g&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;kvm&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;60.00&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;g&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;unifi&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;10.00&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;g&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;backup&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;4.00&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;t&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;tm_aircat&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;1.00&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;t&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;tm_joram&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;1.50&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;t&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;tm_mini&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;512.00&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;g&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;win_kk&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;2.08&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;t&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;home&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;60.00&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;g&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;swap&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;32.00&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;g&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;ubuntu&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;80.00&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;g&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This imports the modules &lt;a href=&#34;https://docs.python.org/3/library/subprocess.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;code&gt;subprocess&lt;/code&gt;&lt;/a&gt;

 and &lt;a href=&#34;https://docs.python.org/3/library/json.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;code&gt;json&lt;/code&gt;&lt;/a&gt;

 for use.&lt;/p&gt;
&lt;p&gt;It then uses the command &lt;code&gt;lvs --reportformat=json&lt;/code&gt; to list all LVM2 logical volumes in the system. The command is specificed as an argument list, so no interim bash is spawned, instead the command is run directly from Python, using &lt;a href=&#34;https://docs.python.org/3/library/subprocess.html#using-the-subprocess-module&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;code&gt;subprocess.run()&lt;/code&gt;&lt;/a&gt;

, capturing the output.&lt;/p&gt;
&lt;p&gt;The output, being JSON formatted, is turned into Python native data structures, using &lt;a href=&#34;https://docs.python.org/3/library/json.html#json.loads&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;code&gt;json.loads()&lt;/code&gt;&lt;/a&gt;

. We then iterate the data we collected, printing a system report from Python.&lt;/p&gt;
&lt;p&gt;There are &lt;a href=&#34;https://github.com/xzased/lvm2py&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;other ways to do the same&lt;/a&gt;

: LVM2 offers liblvm2app and an API, and a binding of that API to Python exists (but seems to be rather unmaintained, so I&amp;rsquo;d rather use the JSON approach).&lt;/p&gt;
&lt;h2 id=&#34;useful-modules-that-come-with-the-system&#34;&gt;
    &lt;a href=&#34;#useful-modules-that-come-with-the-system&#34;&gt;
	Useful modules that come with the system
    &lt;/a&gt;
&lt;/h2&gt;
&lt;h3 id=&#34;sys-os-pathlib&#34;&gt;
    &lt;a href=&#34;#sys-os-pathlib&#34;&gt;
	sys, os, pathlib
    &lt;/a&gt;
&lt;/h3&gt;
&lt;p&gt;So you already know about &lt;a href=&#34;https://docs.python.org/3/library/sys.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;code&gt;sys&lt;/code&gt;&lt;/a&gt;

, and &lt;a href=&#34;https://docs.python.org/3/library/os.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;code&gt;os&lt;/code&gt;&lt;/a&gt;

. Maybe you use &lt;a href=&#34;https://docs.python.org/3/library/pathlib.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;code&gt;pathlib&lt;/code&gt;&lt;/a&gt;

 instead of &lt;a href=&#34;https://docs.python.org/3/library/os.path.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;code&gt;os.path&lt;/code&gt;&lt;/a&gt;

.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;sys&lt;/code&gt; is the meta about your Python environment. It offers you detailed introspection about the version, the base operating system platform, and many other things that relate to your runtime environment.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;os&lt;/code&gt; is the access to the operating system, allowing you to manipulate files and many other base operating system abstractions&lt;/p&gt;
&lt;p&gt;&lt;code&gt;pathlib&lt;/code&gt; is a higher level convenience interface built on top of that, which overloads the &lt;code&gt;/&lt;/code&gt; operator and allows you to manipulate operating system path names in a portable way. It offers functions to parse pathnames, is &lt;code&gt;os.stat()&lt;/code&gt; aware and has &lt;code&gt;basename()&lt;/code&gt; and &lt;code&gt;dirname()&lt;/code&gt; functionality, plus globbing.&lt;/p&gt;
&lt;p&gt;Path can completely replace os-like file access, and there is a handy table at the end of the manpage.&lt;/p&gt;
&lt;h3 id=&#34;shutil&#34;&gt;
    &lt;a href=&#34;#shutil&#34;&gt;
	shutil
    &lt;/a&gt;
&lt;/h3&gt;
&lt;p&gt;Basic shell file operations can be handled with &lt;a href=&#34;https://docs.python.org/3/library/shutil.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;code&gt;shutil&lt;/code&gt;&lt;/a&gt;

.&lt;/p&gt;
&lt;p&gt;This module has a number of file copy operations available, which are aware of operating system specifics and modern metadata presence. There are also copytree and rmtree operations. Since Python 3.8 there are operating system specific high-efficiency implementations available which are network drive aware and are automatically used (MacOS fcopyfile, os.sendfile(), and others).&lt;/p&gt;
&lt;p&gt;The module also offers a set of functions that deal with common archive formats such as &lt;code&gt;zip&lt;/code&gt;, &lt;code&gt;tar&lt;/code&gt;, and other compressors. There is a framework to register additional compressors and archive formats.&lt;/p&gt;
&lt;p&gt;Note that the &lt;a href=&#34;https://docs.python.org/3/library/stat.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;code&gt;walk()&lt;/code&gt;&lt;/a&gt;

 function is part of the &lt;code&gt;os&lt;/code&gt; module, not the &lt;code&gt;shutil&lt;/code&gt; module. It can be used to iterate over a filesystem subtree in a number of ways, offering &lt;code&gt;find(1)&lt;/code&gt; like functionality.&lt;/p&gt;
&lt;h3 id=&#34;argparse-click-docopt&#34;&gt;
    &lt;a href=&#34;#argparse-click-docopt&#34;&gt;
	argparse, click, docopt
    &lt;/a&gt;
&lt;/h3&gt;
&lt;p&gt;Python delivers &lt;a href=&#34;https://docs.python.org/3/library/argparse.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;code&gt;argparse&lt;/code&gt;&lt;/a&gt;

 with the standard libary, and has &lt;a href=&#34;https://docs.python.org/3/howto/argparse.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;extensive tutorials&lt;/a&gt;

 for it. It works pretty much as one would expect&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;ch&#34;&gt;#! /usr/bin/env python3&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;argparse&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;parser&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;argparse&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ArgumentParser&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;parser&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;add_argument&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;--size&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;help&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;file size&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;type&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;args&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;parser&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;parse_args&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;args&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;size&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;type&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;args&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;size&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;and&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-console&#34; data-lang=&#34;console&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;gp&#34;&gt;$&lt;/span&gt; ./keks.py --help
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;go&#34;&gt;usage: keks.py [-h] [--size SIZE]
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;go&#34;&gt;&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;go&#34;&gt;optional arguments:
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;go&#34;&gt;  -h, --help   show this help message and exit
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;go&#34;&gt;  --size SIZE  file size
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;go&#34;&gt;&lt;/span&gt;&lt;span class=&#34;gp&#34;&gt;$&lt;/span&gt; ./keks.py --size &lt;span class=&#34;m&#34;&gt;10&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;go&#34;&gt;10 &amp;lt;class &amp;#39;int&amp;#39;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;There are a number of more refined options that allow for positional, keyword and more restricted optional arguments (the type we have been using here), with typechecking and choices.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://click.palletsprojects.com/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;code&gt;click&lt;/code&gt;&lt;/a&gt;

 and &lt;a href=&#34;https://github.com/docopt/docopt&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;code&gt;docopt&lt;/code&gt;&lt;/a&gt;

 are not part of the standard libary, so it means picking up an external dependency.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;docopt&lt;/code&gt; is built around the concept of docstrings, so option parsers are configured from the program documentation at the start of the program.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;click&lt;/code&gt; is built around the concept of &lt;a href=&#34;https://realpython.com/primer-on-python-decorators/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Python decorators&lt;/a&gt;

, and allows things such as&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;ch&#34;&gt;#! /usr/bin/env python&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;click&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nd&#34;&gt;@click&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;command&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nd&#34;&gt;@click&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;option&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;--size&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;required&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;True&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;type&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;help&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;file size&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;size&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;size&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nb&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;size&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;type&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;size&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;vm&#34;&gt;__name__&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;__main__&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;size&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;and&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-console&#34; data-lang=&#34;console&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;gp&#34;&gt;$&lt;/span&gt; ./probe.py  --help
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;go&#34;&gt;Usage: probe.py [OPTIONS]
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;go&#34;&gt;&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;go&#34;&gt;Options:
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;go&#34;&gt;  --size INTEGER  file size  [required]
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;go&#34;&gt;  --help          Show this message and exit.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;go&#34;&gt;&lt;/span&gt;&lt;span class=&#34;gp&#34;&gt;$&lt;/span&gt; ./probe.py --size &lt;span class=&#34;m&#34;&gt;10&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;go&#34;&gt;10 &amp;lt;class &amp;#39;int&amp;#39;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Click is very complete, extensible and specifically the tool of choice for large commands that require the implementation of subcommands (&lt;code&gt;git log&lt;/code&gt;, &lt;code&gt;git add&lt;/code&gt;, &lt;code&gt;git commit&lt;/code&gt; type interfaces).&lt;/p&gt;
&lt;h3 id=&#34;fileinput&#34;&gt;
    &lt;a href=&#34;#fileinput&#34;&gt;
	fileinput
    &lt;/a&gt;
&lt;/h3&gt;
&lt;p&gt;In this context also useful is &lt;a href=&#34;https://docs.python.org/3/library/fileinput.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;code&gt;fileinput&lt;/code&gt;&lt;/a&gt;

, a helper that consumes pathnames from the command arguments and offers you the lines from the files named, in one single stream or separated.&lt;/p&gt;
&lt;p&gt;There is a number of support options for writing filters, in-place file changes and similar programs.&lt;/p&gt;
&lt;p&gt;It is possible to install decompressor/compressor hooks, as well as data encodoers/decoders.&lt;/p&gt;
&lt;h3 id=&#34;stat&#34;&gt;
    &lt;a href=&#34;#stat&#34;&gt;
	stat
    &lt;/a&gt;
&lt;/h3&gt;
&lt;p&gt;The &lt;code&gt;os.stat()&lt;/code&gt; example from the very beginning of this text is easier expanded on with the &lt;a href=&#34;https://docs.python.org/3/library/stat.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;code&gt;stat&lt;/code&gt;&lt;/a&gt;

 module, which has a number of constants and helpers that make more sense out of the data delivered by the operating system.&lt;/p&gt;
&lt;h3 id=&#34;glob-fnmatch&#34;&gt;
    &lt;a href=&#34;#glob-fnmatch&#34;&gt;
	glob, fnmatch
    &lt;/a&gt;
&lt;/h3&gt;
&lt;p&gt;Python has a &lt;a href=&#34;https://docs.python.org/3/library/glob.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;code&gt;glob&lt;/code&gt;&lt;/a&gt;

 and &lt;a href=&#34;https://docs.python.org/3/library/fnmatch.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;code&gt;fnmatch&lt;/code&gt;&lt;/a&gt;

 modules, but you are probably better off using &lt;a href=&#34;https://docs.python.org/3/library/pathlib.html#pathlib.Path.glob&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;code&gt;Path.glob&lt;/code&gt;&lt;/a&gt;

 from the more modern and portable &lt;code&gt;pathlib&lt;/code&gt; instead.&lt;/p&gt;
&lt;h3 id=&#34;tempfile&#34;&gt;
    &lt;a href=&#34;#tempfile&#34;&gt;
	tempfile
    &lt;/a&gt;
&lt;/h3&gt;
&lt;p&gt;Temporary filenames, files and file handles can be made safely with &lt;a href=&#34;https://docs.python.org/3/library/tempfile.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;code&gt;tempfile&lt;/code&gt;&lt;/a&gt;

, another standard libary.&lt;/p&gt;
&lt;h3 id=&#34;difflib-filecmp&#34;&gt;
    &lt;a href=&#34;#difflib-filecmp&#34;&gt;
	difflib, filecmp
    &lt;/a&gt;
&lt;/h3&gt;
&lt;p&gt;There are a number of modules that deal in comparisons of files, &lt;a href=&#34;https://docs.python.org/3/library/difflib.html#differ-example&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;code&gt;difflib&lt;/code&gt;&lt;/a&gt;

 computes diff-like output with a nice programming interface, and &lt;a href=&#34;https://docs.python.org/3/library/filecmp.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;code&gt;filecmp&lt;/code&gt;&lt;/a&gt;

 compares files and directory trees, finding files with different content or attributes.&lt;/p&gt;
&lt;h3 id=&#34;ini-files-yaml-and-json&#34;&gt;
    &lt;a href=&#34;#ini-files-yaml-and-json&#34;&gt;
	ini files, yaml and json
    &lt;/a&gt;
&lt;/h3&gt;
&lt;p&gt;The python standard libary offers readers and writers for &lt;a href=&#34;https://docs.python.org/3/library/configparser.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;code&gt;ini files&lt;/code&gt;&lt;/a&gt;

 and &lt;a href=&#34;https://docs.python.org/3/library/json.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;code&gt;json&lt;/code&gt;&lt;/a&gt;

. Handling &lt;a href=&#34;https://pyyaml.org/wiki/PyYAMLDocumentation&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;code&gt;yaml&lt;/code&gt;&lt;/a&gt;

 is an external dependency.&lt;/p&gt;
&lt;h3 id=&#34;sched-daemon-pidfile-and-pystemd&#34;&gt;
    &lt;a href=&#34;#sched-daemon-pidfile-and-pystemd&#34;&gt;
	sched, daemon, pidfile, and pystemd
    &lt;/a&gt;
&lt;/h3&gt;
&lt;p&gt;A simple-cronlike timer facility, &lt;a href=&#34;https://docs.python.org/3/library/sched.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;code&gt;sched&lt;/code&gt;&lt;/a&gt;

 comes with the system libraries.&lt;/p&gt;
&lt;p&gt;Actually becoming a background process with &lt;a href=&#34;https://pagure.io/python-daemon/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;code&gt;python-daemon&lt;/code&gt;&lt;/a&gt;

 picks up an external dependency. So does handling PIDfiles with &lt;a href=&#34;https://github.com/mosquito/python-pidfile&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;code&gt;python-pidfile&lt;/code&gt;&lt;/a&gt;

.&lt;/p&gt;
&lt;p&gt;The external dependency &lt;a href=&#34;https://github.com/facebookincubator/pystemd&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;code&gt;pystemd&lt;/code&gt;&lt;/a&gt;

 allows you to speak dbus to talk to systemd, but you would not notice that from the usage: you can deal with systemd units as native Python objects and query and control them.&lt;/p&gt;
&lt;h3 id=&#34;subprocess&#34;&gt;
    &lt;a href=&#34;#subprocess&#34;&gt;
	subprocess
    &lt;/a&gt;
&lt;/h3&gt;
&lt;p&gt;And of course, we already mentioned &lt;a href=&#34;https://docs.python.org/3/library/subprocess.html#using-the-subprocess-module&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;code&gt;subprocess.run()&lt;/code&gt;&lt;/a&gt;

, the swiss army knife of bad old shell interfacing. Make sure you prefer commands that can produce JSON, that will hurt a lot less.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Embracing the Stream</title>
      <link>https://blog.koehntopp.info/2020/12/09/embracing-the-stream.html</link>
      <pubDate>Wed, 09 Dec 2020 15:12:22 +0000</pubDate>
      
      <guid>https://blog.koehntopp.info/2020/12/09/embracing-the-stream.html</guid>
      <description>&lt;p&gt;So this happened: &lt;a href=&#34;https://lists.centos.org/pipermail/centos-announce/2020-December/048208.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CentOS Project shifts focus to CentOS Stream&lt;/a&gt;

&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The future of the CentOS Project is CentOS Stream, and over the next  year we‚Äôll be shifting focus from CentOS Linux, the rebuild of Red Hat Enterprise Linux (RHEL), to CentOS Stream, which tracks just ahead of a current RHEL release. CentOS Linux 8, as a rebuild of RHEL 8, will end at the end of 2021. CentOS Stream continues after that date, serving as
the upstream (development) branch of Red Hat Enterprise Linux.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;And a lot of people react like this:&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://twitter.com/nixcraft/status/1336348208184741888&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;p class=&#34;md__image&#34;&gt;
  &lt;img src=&#34;https://blog.koehntopp.info/uploads/2020/12/stream-migrate-now.png&#34; alt=&#34;&#34;  /&gt;
&lt;/p&gt;

&lt;/a&gt;

&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Oracle buys Sun: Solaris Unix, Sun servers/workstation, and MySQL went to /dev/null. IBM buys Red Hat: CentOS is going to &amp;gt;/dev/null. Note to self: If a big vendor such as Oracle, IBM, MS, and others buys your fav software, start the migration procedure ASAP. (&lt;a href=&#34;https://twitter.com/nixcraft/status/1336348208184741888&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Tweet&lt;/a&gt;

)&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;So it seems my opinion is the unpopular one: CentOS switching to Stream is not bad at all.&lt;/p&gt;
&lt;p&gt;When you wanted to run Openstack on CentOS in 2015, you needed to enable &lt;a href=&#34;https://www.rdoproject.org/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;RDO&lt;/a&gt;

 to even begin an install. The first thing this did was literally replace every single package in the install. That was, because CentOS at that time was literally making Debian Stale look young.&lt;/p&gt;
&lt;p&gt;And we see similar problems with Ubuntu LTS, for what it&amp;rsquo;s worth. Ubuntu LTS comes out every 2 years, and that&amp;rsquo;s kind of ok-ish, but it lasts 5 years, which is nonsensical. It was not, in the past.&lt;/p&gt;
&lt;h2 id=&#34;so-what-changed&#34;&gt;
    &lt;a href=&#34;#so-what-changed&#34;&gt;
	So what changed?
    &lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;Software Development.&lt;/p&gt;
&lt;p&gt;We have been moving to a platform based development approach, leveraging the wins from DevOps.&lt;/p&gt;
&lt;p&gt;&amp;ldquo;Kris, that&amp;rsquo;s corporate bullshit.&amp;rdquo; It&amp;rsquo;s not, though. Let me spell it out in plain for you.&lt;/p&gt;
&lt;h3 id=&#34;programming-languages-are-platforms-powered-by-tools&#34;&gt;
    &lt;a href=&#34;#programming-languages-are-platforms-powered-by-tools&#34;&gt;
	Programming languages are platforms powered by tools
    &lt;/a&gt;
&lt;/h3&gt;
&lt;p&gt;People these days do not program in an editor, with a compiler.&lt;/p&gt;
&lt;p&gt;They use Github or Gitlab, with many integrations, and a local IDE. They commit to a VCS (git, actually, the world converged on one single VCS), and trigger a bunch of things. Typechecks, Reformatters, Tests, but also Code Quality Metrics, and Security Scanners.&lt;/p&gt;
&lt;p&gt;Even starting a new programming language in 2020 is not as easy as it was in the past. Having a language is not enough, because you do not only need a language and maybe a standard library, but also a JetBrains Product supporting it, SonarQube support, XRay integration, gitlab-ci.yml examples and so on. Basically, there is a huge infrastructure system designed to support development and whatever you start needs to fit into it, right from the start.&lt;/p&gt;
&lt;p&gt;That is, because we have come to rely on an entire ecosystem of tooling to make our developers faster, and to enforce uniform standards across the group. And that is a good thing, which can help us to become better programmers.&lt;/p&gt;
&lt;h3 id=&#34;github-and-gitlab-are-tools-for-conversations-about-code-among-developers&#34;&gt;
    &lt;a href=&#34;#github-and-gitlab-are-tools-for-conversations-about-code-among-developers&#34;&gt;
	Github and Gitlab are tools for conversations about code among developers
    &lt;/a&gt;
&lt;/h3&gt;
&lt;p&gt;We also have come to rely on tooling to enable collaboration, and structured discussion about code, since we as programmers no longer work alone. A good part of the value of Gitlab, Github and similar is enabling useful cooperation between developers, in ways that Developers value.&lt;/p&gt;
&lt;p&gt;Another good part of the value is extracted at the production end of these platforms: We produce artifacts of builds, automatically and in reproducible ways.&lt;/p&gt;
&lt;p&gt;Which includes also knowing things about these artifacts - for example, what went into producing them and being able to report on these things:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Dependencies&lt;/li&gt;
&lt;li&gt;Licenses&lt;/li&gt;
&lt;li&gt;Versions&lt;/li&gt;
&lt;li&gt;Vulnerabilities&lt;/li&gt;
&lt;li&gt;Commit frequency and time to fix for each dependency, abandonware alert&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;and many more things. Using the repositories and proper processes and one other ingredient, we have made rollouts and rollbacks an automated and uniform procedure. That is, provided we find a way to manage and evolve persisted state properly.&lt;/p&gt;
&lt;p&gt;Compared to the hand crafted bespoke rollout and rollback procedures of the 2010s, this is tremendous progress.&lt;/p&gt;
&lt;h3 id=&#34;immutable-infrastructure-and-reproducible-builds&#34;&gt;
    &lt;a href=&#34;#immutable-infrastructure-and-reproducible-builds&#34;&gt;
	Immutable infrastructure, and reproducible builds
    &lt;/a&gt;
&lt;/h3&gt;
&lt;p&gt;This one other ingredient is immutable infrastructure.&lt;/p&gt;
&lt;p&gt;It is the basic idea that we do no longer manipulate the state of the base image we run our code on, ever, after it is deployed. It&amp;rsquo;s basically death to Puppet and its likes.&lt;/p&gt;
&lt;p&gt;Instead we change the build process, producing immutable images, and quickly rebuild and redeploy. We deploy the base image, and then supply secrets, runtime config and control config in other, more appropriate ways. Things like Vault, a consensus system such as Zookeeper, or similar mechanisms come to mind. It allows us to orchestrate change across a fleet of instances, all alike, in a way that guarantees consistency across our fleet, in an age where all computing has become distributed computing.&lt;/p&gt;
&lt;p&gt;The same thinking can be applied to the actual base operating system of the host, where we remove application installs completely from the base operating system. Instead we provide a mechanism to mount and unmount application installs, including their dependencies, in the form of virtual machine images, container images or serverless function deployments (also containers, but with fewer buttons).&lt;/p&gt;
&lt;p&gt;As a consequence, everything becomes single-user, single-tenant - one image contains only Postgres, another one only your static images webserver (images supplied from an external mountable volume), and a third one only your production Python application plus runtime environment. With only one thing in the container, Linux UIDs no longer have a useful separation function, and other isolation and separation mechanisms take their place:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;virtualization,&lt;/li&gt;
&lt;li&gt;CGroups,&lt;/li&gt;
&lt;li&gt;Namespaces,&lt;/li&gt;
&lt;li&gt;Seccomp,&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;and similar. They are arguably more powerful, anyway.&lt;/p&gt;
&lt;p&gt;This also forms a kind of argument in the great &amp;ldquo;Is curlbash or even sudo curlbash still a bad thing?&amp;rdquo; debate of our times, but I am unsure which (I&amp;rsquo;m not: in a single-user single-tenant environment curlbashing into that environment should not be a security problem, but you get problems proving the provenance of your code. Which you would not have, had you used another, less casual method of acquiring that dependency).&lt;/p&gt;
&lt;h3 id=&#34;images-as-building-blocks-for-applications&#34;&gt;
    &lt;a href=&#34;#images-as-building-blocks-for-applications&#34;&gt;
	Images as building blocks for applications
    &lt;/a&gt;
&lt;/h3&gt;
&lt;p&gt;So now we can use entire applications, with configuration provided and injected at runtime, to construct services, and we can add relatively tiny bits of our own code to build our own services on top of existing services, provided by the environment. We get Helm Charts for Kubernetes, we get &lt;a href=&#34;https://www.infoq.com/articles/serverless-sea-change/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;The Serverless Sea Change&lt;/a&gt;

, and Step Functions. We also get Nocode, Codeless or similar attempts at building certain things only from services without actual coding.&lt;/p&gt;
&lt;p&gt;But it is more pervasive than this:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The Unifi Control Plane uses multiple Java processes and one Mongodb. It can be dockered into one container, or can be provided as helm chart or as a docker-compose with multiple containers, for better scalability and maintenance.&lt;/li&gt;
&lt;li&gt;The gitlab Omnibus uses a single container, again, with Postgres, Redis and a lot of internal state plus Chef to deploy about a dozen components, but differentiated deploys for the individual components in a K8s context also exist.&lt;/li&gt;
&lt;li&gt;Things like a Jitsi setup can be packaged into a single, relatively simple docker-compose.yml, and will assemble themselves from images mostly automatically. The result will run on almost any operating system substrate, as long as it provides a Linux kernel syscall interface.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;fighting-conways-law&#34;&gt;
    &lt;a href=&#34;#fighting-conways-law&#34;&gt;
	Fighting Conway&amp;rsquo;s law
    &lt;/a&gt;
&lt;/h3&gt;
&lt;p&gt;At that is kind of the point: By packing all dependencies into the container or VM image itself, the base operating system hardly matters any more. It allows us to move on, each on their own speed, on a per-project basis.&lt;/p&gt;
&lt;p&gt;The project will bring its own database, cache, runtime and libraries with itself, without version conflicts, and without waiting for the distro to upgrade them, or to provide them at all. Conversely it allows the Distro to move to Stream: They are finally free from slow moving OSS projects preventing them from upgrading local components, because one of them is not yet ready to move.&lt;/p&gt;
&lt;p&gt;Even teams in the Enterprise are now free to move at their own speed, because they no longer have to wait for half a dozen stakeholders ot get to the Technical Debt Section of their backlog.&lt;/p&gt;
&lt;p&gt;The main point is, in my opinion, that it is okay and normal for the application to use a different &amp;ldquo;No longer a full OS&amp;rdquo; than what the host uses. In acknowledging that both can reduce scope and size, and optimize. This is a good thing, and will speed up development.&lt;/p&gt;
&lt;p&gt;So in a world where components and their dependencies are being packaged as single-user single-tenancy units of execution (virtual machines, containers and the like), CentOS moving to Streams is not only acknowledging that change, it also forced the slower half of the world to acknowledge this, and to embrace it.&lt;/p&gt;
&lt;p&gt;I say: This is a good thing.&lt;/p&gt;
&lt;p&gt;And if you rant &amp;ldquo;Stability goes out of the window!&amp;rdquo; - check your calendar and your processes.&lt;/p&gt;
&lt;p&gt;It&amp;rsquo;s 2020. Act like it. One of the major innovations in how we do computers in the last decade has been establishing the beginnings of a certifiable process for building the things we run.&lt;/p&gt;
&lt;p&gt;Or, as [Christoph Petrausch](Christoph Petrausch) puts it in &lt;a href=&#34;https://twitter.com/hikhvar/status/1336608880013488130&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;this tweet&lt;/a&gt;

: &amp;ldquo;If your compliance is based on certifying the running end product instead of the process that built it, your organisation will not be able to keep up with the development speed of others.&amp;rdquo;&lt;/p&gt;
&lt;h2 id=&#34;edit-some-enterprise&#34;&gt;
    &lt;a href=&#34;#edit-some-enterprise&#34;&gt;
	Edit: Some Enterprise
    &lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;So after careful Enterprise wide checking, it turns out that in fact nobody at work at this point is adverse to converting from CentOS 7 and CentOS 8 to CentOS Stream.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&amp;ldquo;We are already on a rolling release, kind of, with the security mandated patching strategy and the time limits this imposes.&amp;rdquo;&lt;/li&gt;
&lt;li&gt;&amp;ldquo;Where we are on image based workflows in VMs and containers, we do not really care about the base operating system image or the packaging and configuration tooling used by it; outside of the requirements of some security scanning tools.&amp;rdquo;&lt;/li&gt;
&lt;li&gt;&amp;ldquo;Each team basically takes a base operating system image, and then replaces the critical components for their workloads with their own images. Kernel, language platforms, web servers and the likes get replaced at the team level accoding to their need.&amp;rdquo;&lt;/li&gt;
&lt;li&gt;&amp;ldquo;In general, even Stream as a rolling release will be too slow to provide the packages we need for these teams. They will still need to modify the base OS images themselves. Maybe a few teams exist that can profit from Stream.&amp;rdquo;&lt;/li&gt;
&lt;li&gt;&amp;ldquo;We will be checking in on the state of Stream on a quarterly basis. We do still have dependencies on RPM and Puppet, but we expect both to go away within three years, anyway.&amp;rdquo;&lt;/li&gt;
&lt;li&gt;&amp;ldquo;For containerized workloads the vector is distroless in the guest, and the host OS is not carrying any workload besides the container system anyway.&amp;rdquo;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;So we will see how that goes, in quarterly intervals, and we will be past the point of caring much in three years time.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Gitlab in Docker</title>
      <link>https://blog.koehntopp.info/2020/11/22/gitlab-in-docker.html</link>
      <pubDate>Sun, 22 Nov 2020 20:33:10 +0000</pubDate>
      
      <guid>https://blog.koehntopp.info/2020/11/22/gitlab-in-docker.html</guid>
      <description>&lt;p&gt;These installation notes are mostly a note to myself, documenting the installation process of a Gitlab Omnibus Container in Docker, plus Gitlab Runners.&lt;/p&gt;
&lt;h2 id=&#34;os-setup&#34;&gt;
    &lt;a href=&#34;#os-setup&#34;&gt;
	OS Setup
    &lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;We are installing into &lt;code&gt;/export/gitlab&lt;/code&gt;, a 10G xfs slice from the local flash pool:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-console&#34; data-lang=&#34;console&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;gp&#34;&gt;#&lt;/span&gt; lvcreate -n gitlab -L 10G data
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;gp&#34;&gt;#&lt;/span&gt; mkfs -t xfs /dev/data/gitlab
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;gp&#34;&gt;#&lt;/span&gt; mkdir /export/gitlab
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;gp&#34;&gt;#&lt;/span&gt; mount /dev/data/gitlab /export/gitlab
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;gp&#34;&gt;#&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;/dev/data/gitlab\t/export/gitlab\txfs\tbsdgroups,usrquota,grpquota,attr2,nofail,noatime 1 2&amp;#34;&lt;/span&gt; &amp;gt;&amp;gt; /etc/fstab
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;gp&#34;&gt;#&lt;/span&gt; mkdir /export/gitlab/&lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;gitlab,gitlab-runner&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;gp&#34;&gt;#&lt;/span&gt; mkdir /export/gitlab/gitlab/&lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;config,data,logs&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;docker&#34;&gt;
    &lt;a href=&#34;#docker&#34;&gt;
	Docker
    &lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;We are using &lt;code&gt;docker-compose&lt;/code&gt; to run this, with a &lt;code&gt;.env&lt;/code&gt; (dotenv) like so:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-console&#34; data-lang=&#34;console&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;gp&#34;&gt;#&lt;/span&gt; cat .env
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;go&#34;&gt;GITLAB_HOME=/export/gitlab/gitlab
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;go&#34;&gt;GITLAB_DOMAIN=gitlab.home.koehntopp.de
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;go&#34;&gt;GITLAB_HTTP_PORT=81
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;go&#34;&gt;GITLAB_HTTPS_PORT=444
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;go&#34;&gt;GITLAB_SSH_PORT=2222
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;And a &lt;code&gt;docker-compose.yaml&lt;/code&gt; like so:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nn&#34;&gt;---&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;version&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;3&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;services&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;web&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;container_name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;gitlab&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;hostname&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;gitlab&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;image&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;gitlab/gitlab-ce:latest&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;restart&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;always&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;hostname&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;${GITLAB_DOMAIN}&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;environment&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;GITLAB_OMNIBUS_CONFIG&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;&lt;span class=&#34;sd&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;sd&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;external_url &amp;#34;https://gitlab.home.koehntopp.de&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;ports&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;- &lt;span class=&#34;s1&#34;&gt;&amp;#39;${GITLAB_HTTP_PORT}:80&amp;#39;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;- &lt;span class=&#34;s1&#34;&gt;&amp;#39;${GITLAB_HTTPS_PORT}:443&amp;#39;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;- &lt;span class=&#34;s1&#34;&gt;&amp;#39;${GITLAB_SSH_PORT}:22&amp;#39;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;volumes&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;- &lt;span class=&#34;s1&#34;&gt;&amp;#39;${GITLAB_HOME}/config:/etc/gitlab&amp;#39;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;- &lt;span class=&#34;s1&#34;&gt;&amp;#39;${GITLAB_HOME}/logs:/var/log/gitlab&amp;#39;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;- &lt;span class=&#34;s1&#34;&gt;&amp;#39;${GITLAB_HOME}/data:/var/opt/gitlab&amp;#39;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;c&#34;&gt;## vim: syntax=yaml ts=2 sw=2 sts=2 sr et ai&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;When starting this with &lt;code&gt;docker-compose up&lt;/code&gt;, we can follow the full horribleness of the installation process in the console: The Gitlab Omnibus container collects a large number of processes internally, including a postgres, puma, nginx and a number of additional components, and configures itself internally using Chef. It is the Anti-Container.&lt;/p&gt;
&lt;h2 id=&#34;gitlabrb&#34;&gt;
    &lt;a href=&#34;#gitlabrb&#34;&gt;
	gitlab.rb
    &lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;The initial run will produce a &lt;code&gt;gitlab.rb&lt;/code&gt; config file in &lt;code&gt;/export/gitlab/gitlab/config/gitlab.rb&lt;/code&gt;. The file is over 100KB in size, and will contain deactivated config.&lt;/p&gt;
&lt;p&gt;A very minimal, runnable base config for me looks like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# grep -v &amp;#34;^#&amp;#34; gitlab.rb | uniq&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;external_url&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;http://gitlab.home.koehntopp.de&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;gitlab_rails&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;smtp_enable&amp;#39;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kp&#34;&gt;false&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;gitlab_rails&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;gitlab_email_enabled&amp;#39;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kp&#34;&gt;false&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;gitlab_rails&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;gitlab_default_can_create_group&amp;#39;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kp&#34;&gt;false&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;gitlab_rails&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;gitlab_username_changing_enabled&amp;#39;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kp&#34;&gt;false&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;gitlab_rails&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;gitlab_shell_ssh_port&amp;#39;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2222&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;gitlab_kas&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;enable&amp;#39;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kp&#34;&gt;false&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;tls-forwarding-from-host-to-container&#34;&gt;
    &lt;a href=&#34;#tls-forwarding-from-host-to-container&#34;&gt;
	TLS Forwarding from host to container
    &lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;The internal ports need to be exported to the home network, so we need an Apache TLS forwarding config.&lt;/p&gt;
&lt;p&gt;We are using this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-apache&#34; data-lang=&#34;apache&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nt&#34;&gt;&amp;lt;VirtualHost&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;*:80&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nb&#34;&gt;ServerName&lt;/span&gt; gitlab.home.koehntopp.de
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nb&#34;&gt;ErrorLog&lt;/span&gt; ${APACHE_LOG_DIR}/gitlab-error.log
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nb&#34;&gt;CustomLog&lt;/span&gt; ${APACHE_LOG_DIR}/gitlab-access.log combined
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nb&#34;&gt;Alias&lt;/span&gt; /.well-known/acme-challenge &lt;span class=&#34;sx&#34;&gt;/var/lib/dehydrated/acme-challenges&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nt&#34;&gt;&amp;lt;Directory&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;/var/lib/dehydrated&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;nb&#34;&gt;Options&lt;/span&gt; Indexes FollowSymLinks
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;nb&#34;&gt;AllowOverride&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;None&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;nb&#34;&gt;Require&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;all&lt;/span&gt; granted
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nt&#34;&gt;&amp;lt;/Directory&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nt&#34;&gt;&amp;lt;If&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;!-f &amp;#39;%{REQUEST_FILENAME}&amp;#39;&amp;#34;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;nb&#34;&gt;RedirectMatch&lt;/span&gt; permanent ^/(.*) &lt;span class=&#34;s2&#34;&gt;&amp;#34;https://gitlab.home.koehntopp.de/$1&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nt&#34;&gt;&amp;lt;/If&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nt&#34;&gt;&amp;lt;/VirtualHost&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nt&#34;&gt;&amp;lt;VirtualHost&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;*:443&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nb&#34;&gt;ServerName&lt;/span&gt; gitlab.home.koehntopp.de
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nb&#34;&gt;ErrorLog&lt;/span&gt; ${APACHE_LOG_DIR}/gitlab-ssl-error.log
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nb&#34;&gt;CustomLog&lt;/span&gt; ${APACHE_LOG_DIR}/gitlab-ssl-access.log combined
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nb&#34;&gt;SSLEngine&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;on&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nb&#34;&gt;SSLCertificateFile&lt;/span&gt; &lt;span class=&#34;sx&#34;&gt;/var/lib/dehydrated/certs/home.koehntopp.de/cert.pem&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nb&#34;&gt;SSLCertificateKeyFile&lt;/span&gt; &lt;span class=&#34;sx&#34;&gt;/var/lib/dehydrated/certs/home.koehntopp.de/privkey.pem&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nb&#34;&gt;SSLCertificateChainFile&lt;/span&gt; &lt;span class=&#34;sx&#34;&gt;/var/lib/dehydrated/certs/home.koehntopp.de/chain.pem&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c&#34;&gt;#   SSLProxyEngine on&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nb&#34;&gt;ProxyPreserveHost&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;On&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nb&#34;&gt;ProxyPass&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;/&amp;#34;&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;http://127.0.0.1:81/&amp;#34;&lt;/span&gt; nocanon
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nb&#34;&gt;ProxyPassReverse&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;/&amp;#34;&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;http://127.0.0.1:81/&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nb&#34;&gt;AllowEncodedSlashes&lt;/span&gt; NoDecode
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nb&#34;&gt;DocumentRoot&lt;/span&gt; &lt;span class=&#34;sx&#34;&gt;/var/www/gitlab.home.koehntopp.de&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nt&#34;&gt;&amp;lt;/VirtualHost&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c&#34;&gt;# vim: syntax=apache ts=4 sw=4 sts=4 sr noet&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We are terminating the TLS at the Apache and forward plaintext to the nginx, which then forwards to the internal Ruby. This is silly, but I was not feeling like pulling that ball of string apart.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;ProxyPass ... nocanon&lt;/code&gt; and &lt;code&gt;AllowEncodedSlashes NoDecode&lt;/code&gt; are necessary to avoid internal Error on various URLs that require passing on of &lt;code&gt;//&lt;/code&gt; and &lt;code&gt;/-/&lt;/code&gt; URL fragments (several issues, for example &lt;a href=&#34;https://gitlab.com/gitlab-org/gitlab/-/issues/211500#note_381651793&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;here&lt;/a&gt;

).&lt;/p&gt;
&lt;h2 id=&#34;basic-setup&#34;&gt;
    &lt;a href=&#34;#basic-setup&#34;&gt;
	Basic Setup
    &lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;Admin Login is with &amp;ldquo;root&amp;rdquo;, and will guide you through a password change and some basic setup.&lt;/p&gt;
&lt;p&gt;I created users for the family, and groups for my work and for the little one.&lt;/p&gt;
&lt;p&gt;Once you have groups, pushing existing repositories into gitlab is quickly done with&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-console&#34; data-lang=&#34;console&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;gp&#34;&gt;#&lt;/span&gt; git push --set-upstream ssh://git@gitlab.home.koehntopp.de:2222/kris/&lt;span class=&#34;k&#34;&gt;$(&lt;/span&gt;git rev-parse --show-toplevel &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; xargs basename&lt;span class=&#34;k&#34;&gt;)&lt;/span&gt;.git &lt;span class=&#34;k&#34;&gt;$(&lt;/span&gt;git rev-parse --abbrev-ref HEAD&lt;span class=&#34;k&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This will create a repo for the user or group (here: &lt;code&gt;kris&lt;/code&gt;) that has a name identical to the current directory. The &lt;code&gt;xargs basename&lt;/code&gt; expression can be replaced with the desired literal name instead.&lt;/p&gt;
&lt;p&gt;Afterwards, it may be useful to &lt;code&gt;git remote remove origin&lt;/code&gt;, &lt;code&gt;git remote add origin ...&lt;/code&gt;. A quick &lt;code&gt;git pull --rebase&lt;/code&gt; and &lt;code&gt;git branch --set-upstream-to=origin/master master&lt;/code&gt; will exercise and config the local push and pull operations, too.&lt;/p&gt;
&lt;h2 id=&#34;a-hello-ci-project&#34;&gt;
    &lt;a href=&#34;#a-hello-ci-project&#34;&gt;
	A &amp;ldquo;hello-ci&amp;rdquo; project
    &lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;We are creating a basic Python project for gitlab-runner, for testing, &lt;code&gt;kk/probe&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# cat probe.py&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;#! /usr/bin/env python3&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;src&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;vm&#34;&gt;__name__&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;__main__&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nb&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;sa&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;Hi, &lt;/span&gt;&lt;span class=&#34;si&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;src&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;my_name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;!&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;and&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# cat src/__init__.py&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kn&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;src.main&lt;/span&gt; &lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;my_name&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;# noqa&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;and&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;# cat src/main.py
def my_name():
    return &amp;#34;Kris&amp;#34;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;In a &lt;code&gt;src/tests/&lt;/code&gt; directory, we are running &lt;code&gt;pytest&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;ch&#34;&gt;#! /usr/bin/env python3&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;src&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;test_my_name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;():&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;assert&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;src&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;my_name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;Kris&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;At the toplevel, we put our &lt;code&gt;requirements.txt&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-console&#34; data-lang=&#34;console&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;go&#34;&gt;flake8
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;go&#34;&gt;pytest
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;and a &lt;code&gt;tox.ini&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-console&#34; data-lang=&#34;console&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;go&#34;&gt;[flake8]
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;go&#34;&gt;exclude=.git,__pycache__,docs,*venv
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;go&#34;&gt;&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;go&#34;&gt;[pytest]
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;go&#34;&gt;addopts = -ra -q
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We can now build a &lt;code&gt;.gitlab-ci.yml&lt;/code&gt;, also at the toplevel:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nt&#34;&gt;default&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;image&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;python:3.8&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;before_script&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;- &lt;span class=&#34;l&#34;&gt;python --version&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;- &lt;span class=&#34;l&#34;&gt;pip install -r requirements.txt&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;stages&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;- &lt;span class=&#34;l&#34;&gt;Test&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;flake8&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;stage&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;Test&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;script&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;- &lt;span class=&#34;l&#34;&gt;flake8&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;pytest&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;stage&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;Test&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;script&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;- &lt;span class=&#34;l&#34;&gt;pwd&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;- &lt;span class=&#34;l&#34;&gt;ls -l&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;- &lt;span class=&#34;l&#34;&gt;export PYTHONPATH=&amp;#34;$PYTHONPATH:.&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;- &lt;span class=&#34;l&#34;&gt;python -c &amp;#34;import sys;print(sys.path)&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;- &lt;span class=&#34;l&#34;&gt;pytest src&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Yes, the testing cruft in the pytest setup can later go away&amp;hellip;&lt;/p&gt;
&lt;p&gt;Now, to make this work, we need to install gitlab-runner in a docker variant, and config it.&lt;/p&gt;
&lt;h2 id=&#34;gitlab-runner&#34;&gt;
    &lt;a href=&#34;#gitlab-runner&#34;&gt;
	Gitlab Runner
    &lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;At this point, the runner still needs to be &lt;code&gt;docker-compose&lt;/code&gt;&amp;lsquo;ed. I hacked it for testing like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-console&#34; data-lang=&#34;console&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;gp&#34;&gt;#&lt;/span&gt; mkdir -p /export/gitlab/gitlab-runner
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;gp&#34;&gt;#&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;cd&lt;/span&gt; !$
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;gp&#34;&gt;#&lt;/span&gt; mkdir config
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;gp&#34;&gt;#&lt;/span&gt; cat doit
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;go&#34;&gt;docker run -d --name gitlab-runner \
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;go&#34;&gt;  --restart always \
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;go&#34;&gt;  -v /export/gitlab/gitlab-runner/config:/etc/gitlab-runner \
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;go&#34;&gt;  -v /var/run/docker.sock:/var/run/docker.sock \
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;go&#34;&gt;  gitlab/gitlab-runner:latest
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This will create a &lt;code&gt;config.toml&lt;/code&gt; in the config directory. We can&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-console&#34; data-lang=&#34;console&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;gp&#34;&gt;#&lt;/span&gt; docker &lt;span class=&#34;nb&#34;&gt;exec&lt;/span&gt; -it gitlab-runner bash
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;go&#34;&gt;root@ffd124dab4aa:/# gitlab-runner register
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;go&#34;&gt;&lt;/span&gt;&lt;span class=&#34;gp&#34;&gt;#&lt;/span&gt; gitlab-runner  register
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;go&#34;&gt;Runtime platform                                    arch=amd64 os=linux pid=47 revision=8fa89735 version=13.6.0
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;go&#34;&gt;Running in system-mode.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;go&#34;&gt;&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;go&#34;&gt;Enter the GitLab instance URL (for example, https://gitlab.com/):
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;go&#34;&gt;https://gitlab.home.koehntopp.de/
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;go&#34;&gt;Enter the registration token:
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;go&#34;&gt;TheToken
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;go&#34;&gt;Enter a description for the runner:
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;go&#34;&gt;[ffd124dab4aa]: A test runner
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;go&#34;&gt;Enter tags for the runner (comma-separated):
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;go&#34;&gt;test
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The token required for registration can be obtained as described &lt;a href=&#34;https://docs.gitlab.com/runner/register/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;here&lt;/a&gt;

.&lt;/p&gt;
&lt;p&gt;I registered group runners for each of my two internal groups, and a shared runner for the (empty) rest.&lt;/p&gt;
&lt;p&gt;All of this will rewrite the &lt;code&gt;config.toml&lt;/code&gt;. I then upped the concurrency to 6 (8 threads available in the hardware).&lt;/p&gt;
&lt;p&gt;Later on, it will turn out that the docker images in my Ubuntu are not writeable as needed, a helper image needs to be added.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;helper_image&lt;/code&gt; line has been added manually below, according to &lt;a href=&#34;https://gitlab.com/gitlab-org/gitlab-runner/-/issues/26618&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;this note&lt;/a&gt;

:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-toml&#34; data-lang=&#34;toml&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c&#34;&gt;# cat /export/gitlab/gitlab-runner/config/config.toml&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nx&#34;&gt;concurrent&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;6&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nx&#34;&gt;check_interval&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;session_server&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;nx&#34;&gt;session_timeout&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1800&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;[[&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;runners&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;nx&#34;&gt;name&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;JX_Snack (Docker)&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;nx&#34;&gt;url&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;https://gitlab.home.koehntopp.de&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;nx&#34;&gt;token&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;TheToken
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s2&#34;&gt;  executor = &amp;#34;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;docker&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s2&#34;&gt;  [runners.custom_build_dir]
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s2&#34;&gt;  [runners.cache]
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s2&#34;&gt;    [runners.cache.s3]
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s2&#34;&gt;    [runners.cache.gcs]
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s2&#34;&gt;    [runners.cache.azure]
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s2&#34;&gt;  [runners.docker]
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s2&#34;&gt;    helper_image = &amp;#34;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;gitlab&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;gitlab-runner-helper&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;x86_64-6fbc7474&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s2&#34;&gt;    tls_verify = false
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s2&#34;&gt;    image = &amp;#34;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;python&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s2&#34;&gt;    privileged = false
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s2&#34;&gt;    disable_entrypoint_overwrite = false
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s2&#34;&gt;    oom_kill_disable = false
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s2&#34;&gt;    disable_cache = false
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s2&#34;&gt;    volumes = [&amp;#34;&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;cache&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nx&#34;&gt;shm_size&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;...&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;For easier testing, it may be useful to allow CI runs on untagged commits. This can be set up as &lt;code&gt;root&lt;/code&gt; in &lt;code&gt;https://.../admin/runners&lt;/code&gt; for the desired test runner.&lt;/p&gt;
&lt;p&gt;&lt;p class=&#34;md__image&#34;&gt;
  &lt;img src=&#34;https://blog.koehntopp.info/uploads/2020/11/gitlab-untagged.png&#34; alt=&#34;&#34;  /&gt;
&lt;/p&gt;

&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Allowing the runner to pick up untagged jobs can be useful for testing. It needs to be disabled later.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;With some random committing we can now trigger and debug the pipeline we defined earlier above. Eventually it will actually do something.&lt;/p&gt;
&lt;p&gt;&lt;p class=&#34;md__image&#34;&gt;
  &lt;img src=&#34;https://blog.koehntopp.info/uploads/2020/11/gitlab-runner.png&#34; alt=&#34;&#34;  /&gt;
&lt;/p&gt;

&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Eventually, a testing success.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Having a gitlab and a CI/CD pipeline allows us to package the Python Discord Bot development process for the little one in a way that allows him to focus on the various stages of the development process sequentially. For now, testing and deployment can happen magically, we will visit that only later.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>On the Observability of Outliers</title>
      <link>https://blog.koehntopp.info/2020/11/19/on-the-observability-of-outliers.html</link>
      <pubDate>Thu, 19 Nov 2020 17:08:09 +0000</pubDate>
      
      <guid>https://blog.koehntopp.info/2020/11/19/on-the-observability-of-outliers.html</guid>
      <description>&lt;p&gt;At work, I am in an ongoing discussion with a number of people on the Observability of Outliers. It started with the age-old question ‚ÄúHow do I find slow queries in my application?‚Äù aka ‚ÄúWhat would I want from tooling to get that data and where should that tooling sit?‚Äù&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;As a developer, I just want to automatically identify and isolate slow queries!&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Where I work, we do have &lt;a href=&#34;https://www.solarwinds.com/database-performance-monitor&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;SolarWinds Database Performance Monitor&lt;/a&gt;

 aka Vividcortex to find slow queries, so that helps. But that collects data at the database, which means you get to see slow queries, but maybe not application context.&lt;/p&gt;
&lt;p&gt;There is also work done by a few developers which instead collects query strings, query execution times and query counts at the application. This has access to the call stack, so it can tell you which code generated the query that was slow.&lt;/p&gt;
&lt;p&gt;It also channels this data into events (what we have instead of &lt;a href=&#34;https://www.honeycomb.io/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Honeycomb&lt;/a&gt;

), and that is particularly useful, because now you can generate aggregates and keep the link from the aggregates to the constituting events.&lt;/p&gt;
&lt;h2 id=&#34;how-do-you-find-outliers&#34;&gt;
    &lt;a href=&#34;#how-do-you-find-outliers&#34;&gt;
	How do you find outliers?
    &lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;‚ÄúThat‚Äôs easy‚Äù, people will usually say, and then start with the average plus/minus one standard deviation. ‚ÄúWe‚Äôll construct this ‚Äún stddev wide corridor around the average‚Äù and then look at all the things outside.‚Äù&lt;/p&gt;
&lt;p&gt;&lt;p class=&#34;md__image&#34;&gt;
  &lt;img src=&#34;https://blog.koehntopp.info/uploads/2020/11/obs-no.png&#34; alt=&#34;&#34;  /&gt;
&lt;/p&gt;

&lt;/p&gt;
&lt;p&gt;&lt;em&gt;No.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;That is descriptive statistics for normal distributions and for them to work we need to actually have a normal distribution.&lt;/p&gt;
&lt;p&gt;Averages and Standard Deviations work on normal distributions. So the first thing we need to do is to look at the data and ensure that we actually have a normal distribution.&lt;/p&gt;
&lt;p&gt;&lt;p class=&#34;md__image&#34;&gt;
  &lt;img src=&#34;https://blog.koehntopp.info/uploads/2020/11/obs-anscombe.png&#34; alt=&#34;&#34;  /&gt;
&lt;/p&gt;

&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Anscombe&amp;rsquo;s Quartet is a set of graphs having an identical number of points, and producing identical descriptive statistics, but being clearly extremely different distributions.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Because when you apply the Descriptive Statistics of Averages and Standard Deviations to things that are Not a Normal Distribution (see &lt;a href=&#34;https://en.wikipedia.org/wiki/Anscombe%27s_quartet&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Anscombe‚Äôs Quartet&lt;/a&gt;

) they do not tell you much about the data: all the graphs in the infamous Quartet have the same descriptive stats (more than just average and stddev, even), but are clearly completely different.&lt;/p&gt;
&lt;p&gt;So what we would want is a graph of the data. For a time series ‚Äì which is what we usually get when dealing with metrics ‚Äì a good way to plot the data is a heatmap. For the given problem, the heatmap more often than not looks like this:&lt;/p&gt;
&lt;p&gt;&lt;p class=&#34;md__image&#34;&gt;
  &lt;img src=&#34;https://blog.koehntopp.info/uploads/2020/11/obs-heatmap.png&#34; alt=&#34;&#34;  /&gt;
&lt;/p&gt;

&lt;/p&gt;
&lt;p&gt;&lt;em&gt;We partition the time axis into buckets of - say - 10s each, and then bucket execution times linearly or logarithmically. For each query we run, we determine the bucket it goes into and increment by one. The resulting numbers are plotted as pixels - darker, redder means more queries in that bucket. A flat 2D plot of three dimensional data.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;What you see here is a bi- or multipartite distribution. It is a common case when benchmarking: We have a (often larger) number of normally executed queries, and a second set (often smaller) of queries that need our attention because they are executed slower.&lt;/p&gt;
&lt;p&gt;The slow set is  also often run with unstable execution times ‚Äì an important secondary observation.&lt;/p&gt;
&lt;p&gt;&lt;p class=&#34;md__image&#34;&gt;
  &lt;img src=&#34;https://blog.koehntopp.info/uploads/2020/11/obs-mixture.png&#34; alt=&#34;&#34;  /&gt;
&lt;/p&gt;

&lt;/p&gt;
&lt;p&gt;This is not a normal distribution, but a thing composed of two other things (hence bipartite), each of which in itself hopefully can be adequately modelled as a normal distribution: A &lt;a href=&#34;https://en.wikipedia.org/wiki/Mixture_model#Gaussian_mixture_model&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;gaussian mixture&lt;/a&gt;

.&lt;/p&gt;
&lt;p&gt;Luckily we do not actually have to deal with the math of these mixtures (I hope you did not follow the Wikipedia link :-) ) when we want to find slow queries.&lt;/p&gt;
&lt;p&gt;We just want to be able to separate them, which could even be done manually, and then want the back pointer to the events that constitute the cluster of outliers we identified.&lt;/p&gt;
&lt;h2 id=&#34;unstable-execution-times&#34;&gt;
    &lt;a href=&#34;#unstable-execution-times&#34;&gt;
	Unstable execution times
    &lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;I mentioned above:‚ÄúThey are also often run with unstable execution times ‚Äì an important secondary observation.‚Äù&lt;/p&gt;
&lt;p&gt;Slow queries are often slow because they cannot use indexes. When a tree index can be used, the number of comparisons needed to find the elements we are searching for is some kind of log of the table size.&lt;/p&gt;
&lt;p&gt;The end result is usually 4 ‚Äì there are 3-5 lookups&lt;strong&gt;¬π&lt;/strong&gt; needed in about any tree index to do a point lookup of the first element of a result. That means that the execution time for any query using proper indexes is usually extremely stable.&lt;/p&gt;
&lt;p&gt;When indexes cannot be used, the lookup times are scan times ‚Äì linear functions of the result position or size. This varies a lot more, and so we get much more variable execution times for slow queries, and the jitter makes it only worse: your ‚Äúthis query takes 20s instead of 20ms to run‚Äù degrades to the even more annoying ‚Äúwell, sometimes it‚Äôs 5s, and sometimes 40s‚Äù.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;¬π&lt;/strong&gt; In MySQL, we work with 16KB block size, and in indexes we usually have a fan out of a few hundreds to one thousand per block or tree level. The depth of the index tree is the number of comparisons, and it is log to the base of (fan out) of the table length in records. This then becomes ln(table length)/ln(fan out), because that is how you get arbitrary base logs from ln().&lt;/p&gt;
&lt;p&gt;For a fan out of 100, we get a depth of 3 for 1 million, and 4.5 for 1 billion records.&lt;/p&gt;
&lt;p&gt;For a fan out of 1000, it‚Äôs 2 for the million, and 3 for the billion.&lt;/p&gt;
&lt;p&gt;Plus one for the actual record, so the magical database number is 4: It‚Äôs always 4 media accesses to get any record through a tree index - stable execution times for indexed queries, because math works.&lt;/p&gt;
&lt;h2 id=&#34;where-monitoring-ends-and-observability-begins&#34;&gt;
    &lt;a href=&#34;#where-monitoring-ends-and-observability-begins&#34;&gt;
	Where Monitoring ends and Observability begins
    &lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;With measurements, aggregations, and the visualisation as a heatmap, I can identify my outliers ‚Äì that is, I learn that I have them and where they are in time and maybe space (group of hosts).&lt;/p&gt;
&lt;p&gt;But with a common monitoring agents such as Diamond or Telegraf, what is being recorded are numbers or even aggregates of numbers - the quantisation into time and value buckets happens in the client and all that is recorded in monitoring is ‚Äúthere have been 4 queries of 4-8ms run time at 17:10:20 on host randomdb-2029‚Äù. We don‚Äôt know what queries they were, where they came from or whatever other context may be helpful.&lt;/p&gt;
&lt;p&gt;With events, we optionally get rich records for each query - query text, stack trace context, runtime, hostname, database pool name and many other pieces of information. They are being aggregated as they come in, or can be aggregated along other, exotic dimensions after the fact. And best of all, once we find an outlier, we can go back from the outlier and find all the events that are within the boundary conditions of the section of the heapmap that we have marked up as an outlier.&lt;/p&gt;
&lt;p&gt;This also is the fundamental difference between monitoring (‚ÄúWe know we had an abnormal condition in this section of time and space‚Äù) and observability (‚Äú&amp;hellip; and these are the events that make up the abnormality, and from them we can see why and how things went wrong.‚Äù).&lt;/p&gt;
&lt;p&gt;(Written after a longer call with a colleague on this subject).&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>On Touching Candles, And Error Budgets</title>
      <link>https://blog.koehntopp.info/2020/08/31/on-touching-candles.html</link>
      <pubDate>Mon, 31 Aug 2020 17:51:27 +0000</pubDate>
      
      <guid>https://blog.koehntopp.info/2020/08/31/on-touching-candles.html</guid>
      <description>&lt;p&gt;Ok, it&amp;rsquo;s &amp;ldquo;Dad Stories&amp;rdquo; Time (from &lt;a href=&#34;https://twitter.com/isotopp/status/1300414521169907713&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Twitter&lt;/a&gt;

). When my son was somewhat older than a year, he was learning to speak. He could already say &amp;ldquo;Mama&amp;rdquo; and &amp;ldquo;Papa&amp;rdquo;.&lt;/p&gt;
&lt;p&gt;It was around Christmas, and there was a candle on the table, glowing interestingly, so he wanted to touch it. &amp;ldquo;Nein, hei√ü&amp;rdquo; is what you would say in German.&lt;/p&gt;
&lt;p&gt;Of course, a toddler does not understand the meaning of &amp;ldquo;hei√ü&amp;rdquo;. I mean, he&amp;rsquo;s trying to imitate the sound of it, but the meaning of &amp;ldquo;hei√ü&amp;rdquo; is something specific. We connect an experience with the word. Something that any child can only learn by touching the candle. There is literally no other way to learn it.&lt;/p&gt;
&lt;p&gt;So the only thing I could do for him was to get a wet cloth and let him touch the candle. Safely. He did. He cried. I applied the wet cloth and soothing words. And the third word he learned was &amp;ldquo;hei√ü&amp;rdquo;.&lt;/p&gt;
&lt;h3 id=&#34;knowledge-experience-and-intuition&#34;&gt;
    &lt;a href=&#34;#knowledge-experience-and-intuition&#34;&gt;
	Knowledge, Experience and Intuition
    &lt;/a&gt;
&lt;/h3&gt;
&lt;p&gt;Computer Science is a lot like this, for some reason.&lt;/p&gt;
&lt;p&gt;People know here (&lt;em&gt;touches head&lt;/em&gt;), for example by reading the SRE book or other stuff. You can ask them, and they will repeat the key learnings from the book back to you correctly.&lt;/p&gt;
&lt;p&gt;But they do not know here (&lt;em&gt;touches heart&lt;/em&gt;), and they will still build centralized Zookeepers.&lt;/p&gt;
&lt;p&gt;It requires a few outages until they know here (&lt;em&gt;touches gut&lt;/em&gt;) how to design systems properly and what is important in design.&lt;/p&gt;
&lt;p&gt;So that person over there, with the centralized Zookeeper cluster. And that person over there with the schemaless, &lt;a href=&#34;http://mikehadlow.blogspot.com/2012/05/configuration-complexity-clock.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;much simpler config language&lt;/a&gt;

. And that one yonder, with the (type, length, value) BER-like data format. I could tell you &amp;ldquo;hei√ü&amp;rdquo; and you would not &lt;em&gt;understand&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Go and touch that candle. It&amp;rsquo;s the only way to learn &lt;em&gt;properly&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://twitter.com/jof/status/1300421558490587136&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Jonathan&lt;/a&gt;

:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;I lament that so many orgs/people/uptimes have to suffer to build the wisdom.&lt;/p&gt;
&lt;p&gt;I dream of a university/bootcamp of &amp;ldquo;candle touching&amp;rdquo; where learners practice scaling a service.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Another &amp;ldquo;Dad Story&amp;rdquo;: I once worked at a company which used to own the domain &lt;a href=&#34;https://wahl.de&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;wahl.de&lt;/a&gt;

 (&amp;ldquo;election.de&amp;rdquo;). They did not do much with it, they usually gave it do apprentices to play with. Usually the apprentices built elaborate PHP based websites that did pre-election mix- and match &amp;ldquo;Find the party that matches my interests&amp;rdquo;.&lt;/p&gt;
&lt;p&gt;Never did the apprentices stop to consider what will happen on election day, Sunday at 6pm. Because that&amp;rsquo;s when the die is cast, so hordes of people will drop onto the site and what they want - the &lt;em&gt;only&lt;/em&gt; thing they want - is the results, as they develop. With no amount of hardware running PHP you will be able to handle this.&lt;/p&gt;
&lt;p&gt;And that does not matter, because all you need at that time is a single static page, updated in the background, with current results.&lt;/p&gt;
&lt;p&gt;But the thing is - as an apprentice, you only learn - like &amp;ldquo;&lt;em&gt;touches gut&lt;/em&gt; really learn&amp;rdquo; -  when you had that site burn down underneath you in the most critical way.&lt;/p&gt;
&lt;p&gt;So we let them.&lt;/p&gt;
&lt;p&gt;Yes, we could make it safer. Yes, we could have warned them. Yes, we could have gently steered them towards a curated, safe solution. We didn&amp;rsquo;t. It was &lt;a href=&#34;https://memory-alpha.fandom.com/wiki/Kobayashi_Maru_scenario&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Kobayashi Maru&lt;/a&gt;

 all the way. It was quite important to let them do it, and let them fail at it, the real thing.&lt;/p&gt;
&lt;p&gt;Or as &lt;a href=&#34;https://twitter.com/mausdompteur/status/1300439329614057473&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;a good friend phrases it&lt;/a&gt;

:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&amp;ldquo;Error Budget&amp;rdquo;: How much infrastructure you&amp;rsquo;re allowed to set on fire to learn the meaning of the word &amp;ldquo;hei√ü&amp;rdquo;. Every organization has an error budget, but most don&amp;rsquo;t plan for it.&lt;/p&gt;
&lt;/blockquote&gt;
</description>
    </item>
    
    <item>
      <title>Pizza, People, Projects and Processes</title>
      <link>https://blog.koehntopp.info/2020/06/15/pizza-people-projects-and-processes.html</link>
      <pubDate>Mon, 15 Jun 2020 10:37:23 +0000</pubDate>
      
      <guid>https://blog.koehntopp.info/2020/06/15/pizza-people-projects-and-processes.html</guid>
      <description>&lt;p&gt;&lt;em&gt;An older talk from 2 years ago, which for some reason I was not able to find in the blog.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;For reasons that do not need exploration at this junction I had to explain Processes and Process Maturity some time ago, and a colleague asked me to put my thinking into a talk. So this is going to be boring, because you are likely to know most of this already, but on the other hand, it is good to be on the same page when it comes to models and vocabulary.&lt;/p&gt;
&lt;p&gt;So you want Pizza. What is pizza?&lt;/p&gt;
&lt;p&gt;&lt;p class=&#34;md__image&#34;&gt;
  &lt;img src=&#34;https://blog.koehntopp.info/uploads/2020/06/pizza/scooter.png&#34; alt=&#34;&#34;  /&gt;
&lt;/p&gt;

&lt;/p&gt;
&lt;p&gt;&lt;em&gt;A deliverable: A defined product delivered at a deadline.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Pizza is a project. Projects have a deliverable (a defined product) that is available at a certain deadline, latest. So, a Margherita within the next 20 minutes is a project.&lt;/p&gt;
&lt;p&gt;&lt;p class=&#34;md__image&#34;&gt;
  &lt;img src=&#34;https://blog.koehntopp.info/uploads/2020/06/pizza/margherita-project.png&#34; alt=&#34;&#34;  /&gt;
&lt;/p&gt;

&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Pizza as a project&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;If you phone up a Pizza, you are outsourcing. That is, you offer money for Pizza as a Service. On the other hand, the shop at the other hand is delivering Pizza as a Service. How are they able to do that?&lt;/p&gt;
&lt;p&gt;They need a Pizza Delivery Process, in order to be able to pull that off repeatedly and reliably, at a projected cost and speed. So, we get process because we have ‚ÄúA regular demand on an organisation, and the organisation wants the capability to handle the repeated demand in a predictable fashion.‚Äù&lt;/p&gt;
&lt;p&gt;&lt;p class=&#34;md__image&#34;&gt;
  &lt;img src=&#34;https://blog.koehntopp.info/uploads/2020/06/pizza/process-demand.png&#34; alt=&#34;&#34;  /&gt;
&lt;/p&gt;

&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Why process?&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;So if something is a one-off, you will not get process and you should not. Instead it‚Äôs ‚Äúindividual heroics‚Äù. If something is done a second or a third time, it‚Äôs probably time to make it official. You put it on the service catalog, you plan for it, and you create structure in your org around it.&lt;/p&gt;
&lt;p&gt;In the end, it can look like this:&lt;/p&gt;
&lt;p&gt;&lt;p class=&#34;md__image&#34;&gt;
  &lt;img src=&#34;https://blog.koehntopp.info/uploads/2020/06/pizza/pizza-as-a-service.png&#34; alt=&#34;&#34;  /&gt;
&lt;/p&gt;

&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&lt;a href=&#34;https://www.wibas.com/cmmi/service-establishment-and-delivery-cmmi-svc&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CMMI for services, Service Delivery&lt;/a&gt;

 (pretty much the same as ITIL SD)&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;CMMI for services 1.3 creates a set of processes interacting to structure service delivery. It looks complicated, but it‚Äôs not. There is the customer, and service delivery delivers. There might be an incident such as the oven being on fire, and Incident Resolution takes care of that. The Strategic Service Management looks at how we set up the kitchen, and what goes on the menu - the production process. Service Development thinks up the way the kitchen is structured and works, and Service Transition makes sure the kitchen is being built and that cooks and servers are trained. The Incident Resolution in ITIL has deeper structure, looking at larger scale problems that can be extracted from individual services, and interacts with the Service Transition in Change Management.&lt;/p&gt;
&lt;p&gt;Nothing here deals with billing, that would be service management - contracts for supplies, subscriptions, catering for events or individual pizza sales, and quality control (complaints).&lt;/p&gt;
&lt;p&gt;What we build here could be a single pizzeria, but also a chain that deals with Pizza at a scale.&lt;/p&gt;
&lt;p&gt;&lt;p class=&#34;md__image&#34;&gt;
  &lt;img src=&#34;https://blog.koehntopp.info/uploads/2020/06/pizza/sd-process.png&#34; alt=&#34;&#34;  /&gt;
&lt;/p&gt;

&lt;/p&gt;
&lt;p&gt;&lt;em&gt;The ideal outcome of proper process&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;When you perform process, you are in a cycle. The stages of the cycle are named differently, depending on your management ideology, but it‚Äôs always a planning stage, a doing stage (‚Äúa sprint‚Äù in Agile), and a stage where you look back at how things work and what we can learn (‚Äúa retrospective‚Äù in Agile, ‚ÄúCheck‚Äù in PDCA). Then you implement potential improvements (‚ÄúAct‚Äù in &lt;a href=&#34;https://en.wikipedia.org/wiki/PDCA&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;PDCA&lt;/a&gt;

).&lt;/p&gt;
&lt;p&gt;&lt;p class=&#34;md__image&#34;&gt;
  &lt;img src=&#34;https://blog.koehntopp.info/uploads/2020/06/pizza/pcda.png&#34; alt=&#34;&#34;  /&gt;
&lt;/p&gt;

&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&amp;ldquo;continuous improvement&amp;rdquo; goes by many names&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;No matter what you call these things, these cycles form the bones of a continuous improvement process.&lt;/p&gt;
&lt;p&gt;&lt;p class=&#34;md__image&#34;&gt;
  &lt;img src=&#34;https://blog.koehntopp.info/uploads/2020/06/pizza/checking.png&#34; alt=&#34;&#34;  /&gt;
&lt;/p&gt;

&lt;/p&gt;
&lt;p&gt;&lt;em&gt;From closest to furthest, looking at product and process.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Checking can be done by continually distancing yourself from the product and the process.&lt;/p&gt;
&lt;p&gt;So the closest way of looking at a thing is checking for compliance: Are we following the recipe? If not, maybe we should fix that.&lt;/p&gt;
&lt;p&gt;Then you can ask yourself if that recipe is the most efficient way of getting the result. Are there other ways of getting the same outcome, in which we need fewer resources or can do it faster, with fewer people or less training?&lt;/p&gt;
&lt;p&gt;Then, is the recipe effective? That is, is the Pizza any good? If not, can we fix that?&lt;/p&gt;
&lt;p&gt;And finally, is the process still applicable? There is little point to having a Pizza Process in an Artisanal Burger Shop, is there?&lt;/p&gt;
&lt;p&gt;After the retrospective, the checking, we have a list of changes. How do we implement them?&lt;/p&gt;
&lt;p&gt;That, in itself, is a meta-project: We want to change the recipe (adjust the written documentation), and the minds of the people (training them to follow the new recipe), then test that the change happened. And we want to have done that by $DEADLINE.&lt;/p&gt;
&lt;p&gt;So processes spawn meta-projects to change themelves.&lt;/p&gt;
&lt;p&gt;&lt;p class=&#34;md__image&#34;&gt;
  &lt;img src=&#34;https://blog.koehntopp.info/uploads/2020/06/pizza/acting.png&#34; alt=&#34;&#34;  /&gt;
&lt;/p&gt;

&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Change is a Meta-Project. It has deliverables, and a deadline.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;We always need to take all three pillars into account: There is always an organisation, with roles that have defined tasks, skills, and that need staffing. There are people that staff the roles, they need training to get the skills they need and to understand the specific tasks they are supposed to perform, and there is the Tech that is supposed to support People to perform their roles. For some reason that Tech is always the least important thing in a process.&lt;/p&gt;
&lt;p&gt;So &lt;a href=&#34;https://en.wikipedia.org/wiki/File:Characteristics_of_Capability_Maturity_Model.svg&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;on a scale of 1-5&lt;/a&gt;

, how good are we at a thing?&lt;/p&gt;
&lt;p&gt;Suppose you are a Pizzeria, and you are really good at Pizza as a Service. Now somebody comes in, and wants Spaghetti. Bologna, of all things. You happen to have the noodles, and you have the sauce, because of the Pizza of the same style you serve.&lt;/p&gt;
&lt;p&gt;So, you make it. You just went from 0 to 1: Not Performed to Individual Heroics. That was a success!&lt;/p&gt;
&lt;p&gt;&lt;p class=&#34;md__image&#34;&gt;
  &lt;img src=&#34;https://blog.koehntopp.info/uploads/2020/06/pizza/noodles-as-a-service.png&#34; alt=&#34;&#34;  /&gt;
&lt;/p&gt;

&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Getting Noodles as a Service.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;The next level would be 2: Planned &amp;amp; Tracked. That means, it‚Äôs on the menu. You buy noodles, train the servers and the cooks (plan performance), you track noodle dish popularity, and customer satisfaction.&lt;/p&gt;
&lt;p&gt;Then you get a pasta section on the menu: Level 3 - you have a standard noodle process next to your pizza process, and you derive individual noodle dishes from that by adjusting the noodle process.&lt;/p&gt;
&lt;p&gt;Level 4 - quantitative tracking, is the next step. You start to measure, and compare. That is not possible for one-offs, you need iterations. It‚Äôs also not possible for rare things, because statistics need large numbers, and you don‚Äôt even know the relevant numbers are when you start out. It‚Äôs also not possible when you hypergrow, because each iteration will be very different from the previous iteration - if you grow 10x, the process to achieve the same deliverables is too different from the previous iterations for meaningful comparison.&lt;/p&gt;
&lt;p&gt;Anyway, we now track Pizza and Pasta properly, across all of our outlets in our global Italian Fast Food chain, account for regional differences (‚ÄúCalzone Hutspot‚Äù does seem to be popular only in the Netherlands, and is frowned upon in Italy, for example) and we take that into account.&lt;/p&gt;
&lt;p&gt;Finally, you get a continuous improvement process that tracks change quantitatively and has the appropriate controls to make change accessible to management.&lt;/p&gt;
&lt;p&gt;So where do we invest when we care about improvement?&lt;/p&gt;
&lt;p&gt;&lt;p class=&#34;md__image&#34;&gt;
  &lt;img src=&#34;https://blog.koehntopp.info/uploads/2020/06/pizza/where-to-improve.png&#34; alt=&#34;&#34;  /&gt;
&lt;/p&gt;

&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Where to put money and time for improvement?&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;We have to sort processes by Criticality, obviously, by Maturity (no need to invest into things that are already in shape) and then decide how much we can and should spend.&lt;/p&gt;
&lt;p&gt;Maybe we give up Pizza production, and outsource ourselves, or just pre-products and reduce our capability to assembly.&lt;/p&gt;
&lt;p&gt;&lt;p class=&#34;md__image&#34;&gt;
  &lt;img src=&#34;https://blog.koehntopp.info/uploads/2020/06/pizza/outsourcing.png&#34; alt=&#34;&#34;  /&gt;
&lt;/p&gt;

&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Must be at least this tall to successfully outsource.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;In any case: that will fail, if we and our partner are below level 4, each, in process maturity. Without a shared understanding of the deliverable and the relevant metrics, there is no common understanding of what is being sold or bought, and a lot of pain and finger pointing will be the result. That is, without process maturity, you need to do stuff yourself, no matter what.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Waffle House Index of Tooling</title>
      <link>https://blog.koehntopp.info/2020/06/08/waffle-house-index-of-tooling.html</link>
      <pubDate>Mon, 08 Jun 2020 11:46:42 +0000</pubDate>
      
      <guid>https://blog.koehntopp.info/2020/06/08/waffle-house-index-of-tooling.html</guid>
      <description>&lt;p&gt;Charity Majors was &lt;a href=&#34;https://twitter.com/mipsytipsy/status/1268418428542443520&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;on fire and on target, again&lt;/a&gt;

:&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://twitter.com/mipsytipsy/status/1268418428542443520&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;p class=&#34;md__image&#34;&gt;
  &lt;img src=&#34;https://blog.koehntopp.info/uploads/2020/06/waffle-house-index.png&#34; alt=&#34;&#34;  /&gt;
&lt;/p&gt;

&lt;/a&gt;

&lt;/p&gt;
&lt;p&gt;What is a &lt;a href=&#34;https://en.wikipedia.org/wiki/Waffle_House_Index#Levels&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Waffle House Index&lt;/a&gt;

?&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The Waffle House Index is an informal metric named after the Waffle House restaurant chain and is used by the Federal Emergency Management Agency (FEMA) to determine the effect of a storm and the &lt;strong&gt;likely scale of assistance required for disaster recovery&lt;/strong&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;A &amp;ldquo;Waffle House Index for Tooling&amp;rdquo; would be an indicator how bad the situation on the ground in an IT department is. Charity Majors suggest &amp;ldquo;CPU load alerts&amp;rdquo; as a tooling emergency indicator.&lt;/p&gt;
&lt;p&gt;Why? CPU load or %CPU used is a useful metric, because it tells you how &amp;ldquo;full&amp;rdquo; the compute part of a thing is.&lt;/p&gt;
&lt;h3 id=&#34;rightsizing-capacity-is-not-easy&#34;&gt;
    &lt;a href=&#34;#rightsizing-capacity-is-not-easy&#34;&gt;
	&amp;ldquo;Rightsizing capacity&amp;rdquo; is not easy
    &lt;/a&gt;
&lt;/h3&gt;
&lt;p&gt;Alerting on it is a very weird idea, though, and still I find people doing this all of the time. Usually these people are in dire need of a better education, though.&lt;/p&gt;
&lt;p&gt;If you right size your infrastructure, your goal is to have as little overhead as possible in provisioned resources: Only provision as little as needed, just as much as necessary to deliver.&lt;/p&gt;
&lt;p&gt;But if you did that, a CPU alert would be going off all of the time, because ideally you want your boxes loaded to the limit, right?&lt;/p&gt;
&lt;h3 id=&#34;alerting-or-provisioning&#34;&gt;
    &lt;a href=&#34;#alerting-or-provisioning&#34;&gt;
	Alerting or provisioning?
    &lt;/a&gt;
&lt;/h3&gt;
&lt;p&gt;Or you can&amp;rsquo;t, because this is complicated: there are a lot of preconditions that go into even being able to load boxes to this limit. If you can&amp;rsquo;t, then a CPU load alert would also be useless, because it would either never fire, or if it did, it would be too late.&lt;/p&gt;
&lt;p&gt;Web workloads, specifically, are usually spiky. Your workload may be within the provisioned capacity most of the time, but there will be very sudden, very short spikes that are not. These spikes are usually way shorter than the time it takes to grow your capacity. The way to handle that is to provision not for a median needed capacity, or even low 90ies percentile of required capacity, but to provision for max or 99.9 in order to be able to ride the waves.&lt;/p&gt;
&lt;p&gt;If you alert on CPU load in such an environment, by the time the alert goes off, it will be too late already. Also, if you could alert, you could also size.&lt;/p&gt;
&lt;h3 id=&#34;experimentation-has-effects-on-capacity&#34;&gt;
    &lt;a href=&#34;#experimentation-has-effects-on-capacity&#34;&gt;
	Experimentation has effects on capacity
    &lt;/a&gt;
&lt;/h3&gt;
&lt;p&gt;Or you may be in an environment where the code is unpredictable, because you change it a lot with experiments going in and out of the codebase, or from 1%-on to full-on.&lt;/p&gt;
&lt;p&gt;When experimenting, it is important to expose code to users really quickly. That code being efficient is not a priority, because most of it will be scrapped as having a net-negative outcome anyway. It is not worth it putting engineering into code before you have the business side of things right.&lt;/p&gt;
&lt;p&gt;Being able to run experiments means you need to overprovision capacity.&lt;/p&gt;
&lt;h3 id=&#34;detailed-many-dimensional-highly-tagged-metrics&#34;&gt;
    &lt;a href=&#34;#detailed-many-dimensional-highly-tagged-metrics&#34;&gt;
	Detailed, many-dimensional, highly tagged metrics
    &lt;/a&gt;
&lt;/h3&gt;
&lt;p&gt;But that of course means you need to alert on change in variants, and compare code path variants not only with respect to business metrics, but also on technical metrics in order to offset business wins. With proper experimentation, you cannot only say &amp;ldquo;This code is making us x Euro/h richer than the base variant.&amp;rdquo; You also need to be able to say &amp;ldquo;To run this we will have to pay y Euro/h more&amp;rdquo; and &amp;ldquo;Refactoring this for efficiency will cost z Euro in Engineering Time over a potential lifecycle of n hours, so y Euro/h more&amp;rdquo;.&lt;/p&gt;
&lt;p&gt;This not only enables quantified reasoning over the change the experiment introduces, but also about how to proceed with the codebase when it goes full-on: Do we leave it as is and just buy more machinery, or do we put engineers on it to make it nice?&lt;/p&gt;
&lt;h3 id=&#34;production-load-testing-numbers-for-capacity&#34;&gt;
    &lt;a href=&#34;#production-load-testing-numbers-for-capacity&#34;&gt;
	Production load testing numbers for capacity
    &lt;/a&gt;
&lt;/h3&gt;
&lt;p&gt;But in order to allow developers to experiment safely, you need to have accurate capacity metrics, which CPU load is not. Testing in production, safely, specifically automated load tests with actual production users and separate monitoring of experiment codepaths (and consumption attribution at the request level to experiment variants) will provide these numbers.&lt;/p&gt;
&lt;p&gt;And that is the way to go: From reactive scaling (&amp;ldquo;CPU Load too high, raise capacity&amp;rdquo;) to predictive scaling (&amp;ldquo;Our capacity is x req/m per box, and we have n. Evening peak will be m, so we need y boxen more by 16:00.&amp;rdquo;). Which brings us back to the spiky loads where we started.&lt;/p&gt;
&lt;h2 id=&#34;tldr&#34;&gt;
    &lt;a href=&#34;#tldr&#34;&gt;
	TL;DR
    &lt;/a&gt;
&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;If CPU load alerting worked, reactive autoscaling would work, too.&lt;/li&gt;
&lt;li&gt;In a web workload environment, it usually doesn&amp;rsquo;t.&lt;/li&gt;
&lt;li&gt;If you experiment, you need to attribute cost and benefit to experiment variants.
&lt;ul&gt;
&lt;li&gt;That means load tests with production users.&lt;/li&gt;
&lt;li&gt;That means detailed, many-dimensional metrics with many tags, and a lot of ad-hoc metrics exploration.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Once you have that, you are also ready for predictive autoscaling, which actually works.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;and&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;If your shop uses CPU load alerting, chances are that their tooling and education is in need of emergency updating.&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Rolling back a rollout</title>
      <link>https://blog.koehntopp.info/2020/01/17/rolling-back-a-rollout.html</link>
      <pubDate>Fri, 17 Jan 2020 19:53:49 +0000</pubDate>
      
      <guid>https://blog.koehntopp.info/2020/01/17/rolling-back-a-rollout.html</guid>
      <description>&lt;p&gt;Florian Haas &lt;a href=&#34;https://twitter.com/xahteiwi/status/1217903825824120834&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;asks on Twitter&lt;/a&gt;

:&lt;/p&gt;
&lt;p&gt;&lt;p class=&#34;md__image&#34;&gt;
  &lt;img src=&#34;https://blog.koehntopp.info/uploads/2020/01/rolling-back.png&#34; alt=&#34;&#34;  /&gt;
&lt;/p&gt;

&lt;/p&gt;
&lt;p&gt;&amp;ldquo;How do you solve reliable rollback. The definition of a reliable rollback being: &amp;lsquo;get reset &amp;ndash;hard &lt;ref&gt;&amp;rsquo;, &amp;lsquo;git push -f&amp;rsquo; and then magic happening that returns your infra to the exact state it was at &lt;ref&gt;.&amp;rdquo;&lt;/p&gt;
&lt;p&gt;The problem is relatively easy to solve with modern infrastructure-as-code for anything that is stateless. It becomes a bit more involved when you are dealing with things with state, such as database instances or Zookeepers or similar things.&lt;/p&gt;
&lt;p&gt;My reply on Twitter begins &lt;a href=&#34;https://twitter.com/isotopp/status/1218162310956638209&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;here&lt;/a&gt;

. I am basing my writeup on that reply.&lt;/p&gt;
&lt;h2 id=&#34;devops-what-does-that-even-mean&#34;&gt;
    &lt;a href=&#34;#devops-what-does-that-even-mean&#34;&gt;
	&amp;ldquo;Devops&amp;rdquo;, what does that even mean?
    &lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;In 2015, I gave a talk titled &amp;ldquo;&lt;a href=&#34;https://blog.koehntopp.info/2015/03/27/go-away-or-i-will-replace-you.html&#34;&gt;Go away, or I will replace you with a little shell script&lt;/a&gt;

&amp;rdquo; as a keynote for the GUUG FFG 2015 in Stuttgart. The german language slides are &lt;a href=&#34;https://www.slideshare.net/isotopp/go-away-or-i-will-replace-you-with-a-little-shell-script&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;here&lt;/a&gt;

, the english slides are &lt;a href=&#34;https://www.slideshare.net/isotopp/go-away-of-i-will-replace-you-with-a-little-shell-script-english&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;here&lt;/a&gt;

 and a Youtube video of the Froscon version of the talk is &lt;a href=&#34;https://www.youtube.com/watch?v=e0CCv7pSK4s&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;here&lt;/a&gt;

. Unfortunately, the video is the german language version of that talk.&lt;/p&gt;
&lt;p&gt;The talk focuses on how the sysadmin profession started to die out somewhere around 2001, when we invented horizontal scaleout and &lt;a href=&#34;https://twitter.com/yesthattom&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Tom Limoncelli&lt;/a&gt;

 published the first edition of &amp;ldquo;&lt;a href=&#34;https://the-sysadmin-book.com&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;The Practice of System Administration&lt;/a&gt;

&amp;rdquo;. That book explained in one chapter the role of the sysadmin in the greater corporate organisation and how to cooperate with, not fight against users. The term and the practice of Devops evolved in this decade, until in 2008 &lt;a href=&#34;https://twitter.com/patrickdebois&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Patrick Debois&lt;/a&gt;

 coined the actual term &amp;ldquo;Devops&amp;rdquo;, which we use today.&lt;/p&gt;
&lt;p&gt;The term has been abused a lot, but what does it actually mean? In one slide I show this:&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://www.slideshare.net/isotopp/go-away-of-i-will-replace-you-with-a-little-shell-script-english#19&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;p class=&#34;md__image&#34;&gt;
  &lt;img src=&#34;https://blog.koehntopp.info/uploads/2020/01/rolling-away.jpg&#34; alt=&#34;Go away or I will replace you with a little Shell Script (english) - Slide 19&#34;  /&gt;
&lt;/p&gt;

&lt;/a&gt;

&lt;/p&gt;
&lt;p&gt;The modern development environment according to Devops, and the technical meaning of the term.&lt;/p&gt;
&lt;p&gt;In todays language, I would phrase these items as follows:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Infrastructure as code&lt;/li&gt;
&lt;li&gt;Version Control&lt;/li&gt;
&lt;li&gt;CI/CD&lt;/li&gt;
&lt;li&gt;Separation of Rollout and Activation&lt;/li&gt;
&lt;li&gt;Proper Observability with centralized, structured logs&lt;/li&gt;
&lt;li&gt;Good instant communication&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;em&gt;Infrastructure As Code&lt;/em&gt; describes a way of declaring the execution environment for your code, in code. Code that can be checked in and versioned like the application code itself. Openstack Heat Scripts, AWS Cloud Formation, Kubernetes Deployment Specifications or your Terraform all qualify as this.&lt;/p&gt;
&lt;p&gt;With this, you can recreate and redeploy your execution environment together with your application, as part of the build and deployment automation. It also means that you get rid of the endlessly fragile state manipulation engines that are Puppet, Ansible, Chef, Salt and CFEngine. You create, build and deploy images and you run immutable infrastructure.&lt;/p&gt;
&lt;p&gt;Because all of that code and infrastructure declaration are files, you want &lt;em&gt;Version Control&lt;/em&gt;, which in 2020 means, you want all of this in git. This is so normal by now that anything that is not git-able is considered broken and weird.&lt;/p&gt;
&lt;p&gt;What you check in, you want to be processed automatically. So you push it through a &lt;em&gt;CI/CD pipeline&lt;/em&gt;, which pushes things through whatever pre-production environments you have (many have Dev, Staging and Prod). This, in 2020, probably includes formatting to coding standards, linting, sonarcubing, and whatever tests you wrote.&lt;/p&gt;
&lt;p&gt;Eventually, your code is rolled out. And a key invention - one that is not yet done by enough people - is &lt;em&gt;separation of Rollout and Activation&lt;/em&gt; by the means of an experiment framework. More on that below.&lt;/p&gt;
&lt;p&gt;When application code runs, it is appending messages, measurements and context to a hash of hashes. This collection will be pushed into an event processor at the end of a request. Ours is called &amp;ldquo;Booking Events&amp;rdquo;. If you happen to work elsewhere, an Observabilty tool such as &lt;a href=&#34;https://honeycomb.io&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Honeycomb.io&lt;/a&gt;

 is the closest to Booking Events I have been able to find outside of Booking.&lt;/p&gt;
&lt;p&gt;Using this, you alert and push alerts out through a multitude of channels, including Pagerduty, and whatever you use instead of Slack. Humans are being alerted to a situation, and can act on it.&lt;/p&gt;
&lt;h2 id=&#34;separation-of-rollout-and-activation-and-dual-use-experimentation&#34;&gt;
    &lt;a href=&#34;#separation-of-rollout-and-activation-and-dual-use-experimentation&#34;&gt;
	Separation of Rollout and Activation, and Dual Use Experimentation
    &lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;As I mentioned above, the separation of rollout and activation is a key invention that makes rollouts possible. It also makes testing in production safe.&lt;/p&gt;
&lt;p&gt;In the first iteration, an experiment framework allows you to push code into production that never runs. You can then, through feature flags, activate your code for yourself, or a chosen subset of customers based on whatever selectors your frame work offers. I often quote &amp;ldquo;5% of the population of guest country .jp with a user-agent string that suggests MacOS&amp;rdquo; as an example, but it is really a function of the experiment framework you build.&lt;/p&gt;
&lt;p&gt;See a very old talk from 2012 of mine: &amp;ldquo;&lt;a href=&#34;https://www.slideshare.net/isotopp/8-rollouts-a-day&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;8 rollouts a day&lt;/a&gt;

&amp;rdquo; (&lt;a href=&#34;https://www.youtube.com/watch?v=6qFNwNEeG1w&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;video&lt;/a&gt;

) for an ancient take on all of this. This is not new technology, we have been doing this for ages, and just iterated on this.&lt;/p&gt;
&lt;p&gt;Having an experiment framework means that the scaffolding for activation in code is formalized and tested, so errors in gating entry to new code are unlikely to happen.&lt;/p&gt;
&lt;p&gt;It also means that a control framework exists where you can see experiments that are active, who is exposed to them, and that participation in an experiment is recorded in a user click history. You probably want to record experiment config changes in your monitoring wallgraphs so that a change in observed behavior is linked to possible causes for that in an obvious and in-your-face way.&lt;/p&gt;
&lt;p&gt;This is also important for customer support: A CS agent needs to be able to see what the customers sees or has seen, if an experiment is a UI/UX experiment. UI/UX variants should be available to CS agents at will, so that they are able to match and retrace customer experience.&lt;/p&gt;
&lt;p&gt;Having experimentation available obviously means that variant code is in execution concurrently. Or in terms of rollouts: Old and new code run at the same time.&lt;/p&gt;
&lt;p&gt;For state management, it means that schema changes or similar data adjustments need to be done in advance. They also need to be done in a way that is compatible with the old and the new code. That is not hard to do, and can be done in a robust testable way. You want to package it, and run a bunch of checks on schema changes automatically, so you can detect best practice violation and prevent these from being checked into staging and prod.&lt;/p&gt;
&lt;p&gt;And yes, you need that table change framework anyway, because SOX will eventually want that from you. You probably will end up with a web frontend and API for &lt;a href=&#34;https://www.percona.com/doc/percona-toolkit/LATEST/pt-online-schema-change.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;pt-online-schema-change&lt;/a&gt;

 accessible to end users in a way that also advises them automatically on best practice. This also scales better than your DBAs checking manually for the presence of a PK, NULLable columns, columns that are DOUBLE but suggest monetary values in their names, and similar things.&lt;/p&gt;
&lt;p&gt;Ok, at this point you can push code into staging and prod in a way that the old and new variants of the code can coexist on whatever schema you have and can run concurrently, depending on what variant of which experiment the user is in. You can finally &lt;em&gt;activate&lt;/em&gt; code for a few users, and see what happens.&lt;/p&gt;
&lt;p&gt;Your second iteration of the experiment framework will therefore measure the &lt;em&gt;impact&lt;/em&gt; of the experiment, and by that I do not only mean the business impact, but also the technical impact.&lt;/p&gt;
&lt;p&gt;Business impact measurements would answer questions such as &amp;ldquo;What influence has Experiment 17 on conversion?&amp;rdquo; or &amp;ldquo;Does variant B of experiment 17 not only improve conversion, but also customer support call rate, and if so, it is still a positive experiment in the monetary sense&amp;rdquo;?&lt;/p&gt;
&lt;p&gt;But as a gate to the entry of code paths, the experiment framework can also encapsulate Probes that collect metrics over a Span, delivering technical measurements about the performance cost of an experiment. I can ask questions such as &amp;ldquo;Show me all messages in variant B of rollout 64fd32f that never appear when running variant A&amp;rdquo;, or &amp;ldquo;What messages appear since rollout 64fd32f that did not appear before&amp;rdquo;.&lt;/p&gt;
&lt;p&gt;I can also carry metrics and classify them by experiment related selectors. &amp;ldquo;Show me SQL time spent in variant B compared to variant A of rollout 64fd32f in all sections guarded by experiment 13, normalized by number of executions&amp;rdquo;. In other words, what exactly is the latency contribution of experiment 13b, since 64fd32f?&lt;/p&gt;
&lt;p&gt;And because I have access to the unshortened, unaggregated raw event data persisted elsewhere, at any point in time I can ask the framework to actually show me the SQL, once I have a selector that finds me the delta I was looking for, and highlight the things that are only present here and not elsewhere.&lt;/p&gt;
&lt;p&gt;That is the Dual Use value of an experiment framework: You get the business value out of that, testing hypothesis on draft code in production before you spend engineering hours on things that aren&amp;rsquo;t going to make you richer. That is, in terms of bug stages, finding bugs in requirements.&lt;/p&gt;
&lt;p&gt;&lt;p class=&#34;md__image&#34;&gt;
  &lt;img src=&#34;https://blog.koehntopp.info/uploads/2020/01/rolling-relative-bugfix-cost.png&#34; alt=&#34;&#34;  /&gt;
&lt;/p&gt;

&lt;/p&gt;
&lt;p&gt;&lt;em&gt;From &lt;a href=&#34;https://www.slideshare.net/isotopp/8-rollouts-a-day&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;8 rollouts a day (2012), Slide 19&lt;/a&gt;

: Relative cost of a bugfix in various stages of the code lifecycle. Fixing broken requirements is the cheapest.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;But you also get the technical cost of that, in terms of running the prototype code. That enables you to assess the added execution cost vs. the estimated engineering effort to speed it up. In other words, your engineers only ever work on code that is proven to make you richer, &lt;em&gt;and&lt;/em&gt; you also know how much running it will cost you in AWS units or engineering hours and you can prioritise things properly.&lt;/p&gt;
&lt;p&gt;And finally, since A and B variants coexist, if B is known to be bad, you not only can roll that back, you don&amp;rsquo;t even have to. Simply turning off activation of B gives you instant silence in production - the known bad variant is still present, but never run for anybody. You can then triage and come up with a resolution of the situation on your own terms. Either you eliminate the B variant and roll back, or you fix B and roll forward. Either way, this is done completely out of the execution path and also without any time pressure constraints on the decision making.&lt;/p&gt;
&lt;h2 id=&#34;the-sum-of-all-these-parts&#34;&gt;
    &lt;a href=&#34;#the-sum-of-all-these-parts&#34;&gt;
	The Sum of All These Parts
    &lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;The sum of these parts is much more than each individual capability gives you. Together they give you an environment that allows you to roll back and forward, at will. And you will be doing this in an informed way. You can reason about code in production, and act on the outcome of that discussion. And you are doing this outside of crisis mode and any time constraints.&lt;/p&gt;
&lt;p&gt;Separation of Rollout and Activation is a Key Invention here. Put this into an Experimentation Framework, and create a dashboard/control/overview board around this that gives information about running and disabled experiments, experiment outcomes in terms of business and technical data, and that links to raw events and metrics generated from the raw events directly.&lt;/p&gt;
&lt;p&gt;Marrying an experiment framework + dashboard with a Honeycomb-like observability system, and with pointers to tags, releases and rollouts in your code base allows naviagation between all of these things in an integrated way. It enables product and tech people alike in a unique way to reason about code, what that code does to the business, UX, income, and also resource consumption.&lt;/p&gt;
&lt;p&gt;It can direct business decisions, because it allows safe rapid development and deployment of draft business expierments.&lt;/p&gt;
&lt;p&gt;It can direct engineering decisions, because it tells you what is safe, and what isn&amp;rsquo;t, what is good enough and what isn&amp;rsquo;t.&lt;/p&gt;
&lt;p&gt;It informs product management and backlog decisions, because it links technical cost, potential business income and resource usage cost so that business and tech reason about code at eye level - one single source of truth, and one single set of metrics spanning the lowest levels of tech to business metrics like conversion, cuca call rates, cancellations and other things.&lt;/p&gt;
&lt;p&gt;After doing that a while, your code will be littered with Experiment Gateways that either protect and measure code that is full-on or perma-off. All of that code is technical debt and needs to be evaluated, and cleaned up. In this way, the experiment framework, even in the final stage of its usefulness acts as visual markup for technical debt assessment and as a guide for garbage code collection.&lt;/p&gt;
&lt;h2 id=&#34;reliable-rollbacks-and-testing-in-production&#34;&gt;
    &lt;a href=&#34;#reliable-rollbacks-and-testing-in-production&#34;&gt;
	Reliable Rollbacks and Testing In Production
    &lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;You can even use this data to build predictors for expected business behavior, and alert on deviations. &amp;ldquo;According to observed growth and data from last year, last month and last week, we would expect x bookings per minute, but see m fewer, so something is likely wrong. That started 10 minutes ago at the yellow activation line of experiment 13&amp;rdquo; is a thing where I live, and turning off 13 before even looking for possible root causes is a complete no-brainer. In 95% of the cases or more it actually fixes the incident for now, so that any followup is done again outside of panic mode.&lt;/p&gt;
&lt;p&gt;&lt;p class=&#34;md__image&#34;&gt;
  &lt;img src=&#34;https://blog.koehntopp.info/uploads/2020/01/rolling-production.jpg&#34; alt=&#34;&#34;  /&gt;
&lt;/p&gt;

&lt;/p&gt;
&lt;p&gt;That is: Testing In Production Is A Safe Thing To Do - if you build an environment that makes it survivable. The key ingredients are&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Education&lt;/li&gt;
&lt;li&gt;Awareness&lt;/li&gt;
&lt;li&gt;Empowerment&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I reference that in both talks I linked above: Education means you not only need your general craft, the IT you learned at school, in university or in previous jobs. You also need to learn the local knowledge. We encapsulate that in the two questions&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;If you break it, will you even notice?&lt;/li&gt;
&lt;li&gt;If you break it, can you fix it?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The first question asks if you do know you dependencies and dependents for any subsystem that you change. If you don&amp;rsquo;t that&amp;rsquo;s okay, we will teach you. That&amp;rsquo;s why we are here.&lt;/p&gt;
&lt;p&gt;But if you write a patch, gate it in an experiment and then ask &amp;ldquo;Is this good? Can I roll that out?&amp;rdquo;, you are asking the wrong person. There is one expert on the whole planet for that change you just wrote, and that is you. You need to be able to answer the question &amp;ldquo;If you break it, will you even notice&amp;rdquo; with a confident yes in order to be admitted to production. Nobody but you will know the proper answer to that question, ever. We can only help you to find the &amp;ldquo;Yes&amp;rdquo; by teaching you.&lt;/p&gt;
&lt;p&gt;This is also a question of attitude, and it has to be coming from the top. Back in the day when &lt;a href=&#34;https://twitter.com/keeskoolen&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Kees&lt;/a&gt;

 was CEO, he usually ate with everybody else in the canteen.&lt;/p&gt;
&lt;p&gt;A typical conversation that happened similarly more than once is Kees asking somebody: &amp;ldquo;I haven&amp;rsquo;t seen you before. Are you new?&amp;rdquo; &amp;ldquo;Yes, of course. I started 3 weeks ago.&amp;rdquo; &amp;ldquo;And&amp;rdquo;, Kees would ask, in one way or the other, &amp;ldquo;did you break production already?&amp;rdquo; The newbie would of course answer &amp;ldquo;No, of course not!&amp;rdquo; and get the usual response &amp;ldquo;So what am I paying you for?&amp;rdquo;.&lt;/p&gt;
&lt;p&gt;The moral in this is that errors and downtimes are a part of doing business. Of course we would like to have infrastructure where these things do not happen, or minimise impact, but velocity and risk taking are a thing of value to a fast company. By having an error budget (the integral between the predicted income and the actual income) and checking that things are within the error budget, management has a control that allows them to check on the state of the engineering culture. If we are over the error budget, we probably need to look at our ways, and the state of our education and practice. If we are under error budget a lot, we are probably not moving fast enough and are too risk averse.&lt;/p&gt;
&lt;p&gt;All the instrumentation around this - CI/CD, dev and staging, experiment framework and observability framework - exist to make better use of the error budget and get most out of our invest into corporate improvement and organisational learning.&lt;/p&gt;
&lt;p&gt;The second question asks if you know how to fix the things that your change may break. It is not only a question about scope, but also a question about your network. That is, because in any reasonably large system you won&amp;rsquo;t be able to put it together alone.&lt;/p&gt;
&lt;p&gt;You should expect to need help.&lt;/p&gt;
&lt;p&gt;It&amp;rsquo;s people that help, not positions.&lt;/p&gt;
&lt;p&gt;So you should not answer &amp;ldquo;I will need a DBA around just in case&amp;rdquo;, but you should know if Debs, Greg or Simon would be better to have around in your case.&lt;/p&gt;
&lt;p&gt;With your education covered, and especially the necessary local knowledge amending your general education, you&amp;rsquo;d then have to be aware of your environment. That ties back to the upper part of this writeup. With probes and annotions from Spans covering Experiment gateways, you will have to access the data collected in your event logging system, your observability pipeline to understand the state and health of your system.&lt;/p&gt;
&lt;p&gt;And it is that exact state, and the detailed data that will tell you the story.&lt;/p&gt;
&lt;p&gt;Aggregations are important, they point you into a general direction. But it is the raw data that contains the evidence you need. It is the ability to slice and dice the raw data along arbitrary dimensions at will that will allow you to make the precise cut which isolates the buggy cases from the non-buggy behavior. It will allow you to look at the precise delta in exposed state of your distributed system of dependencies that causes the abnormal behavior.&lt;/p&gt;
&lt;p&gt;Logs and metrics are good, essential for checks and alerts, to handle known cases and navigate known waters safely. Events, and the ability to search, sort, aggregate and correlate on events at will, are what enable you to see and debug a distributed and developing production system. Experiments, separation of rollout and activation, with integrated Probes in Spans, allow you to collect this data, and to act, by disabling code that introduces undesireable behavior.&lt;/p&gt;
&lt;p&gt;The rollout is likely to be safe, because any new code you roll out is never executed in production. Unless you activate it. In the end you will find that it is not the rollout sparklines in your graphs that matter, it&amp;rsquo;s the config change sparklines that need watching. You can turn on things for yourself, for a subset of the population, or, if you have gradually built confidence, full on.&lt;/p&gt;
&lt;p&gt;Full on (or full off and writing the change off as worthless, in 19 of 20 cases) is a precondition then for cleaning up: Removing either the Experiment tooling around one new codepath, removing the old codepath completely, or the other way around.&lt;/p&gt;
&lt;p&gt;Leaving experimentation instrumentation in the code, but having things full on (or off) is a very easy and visible way to assess technical debt. So even after the experiment has come to a conclusion one way or the other, the experiment framework is useful as a way to demarcate in some way or the other technical debt in source files.&lt;/p&gt;
&lt;p&gt;And finally, empowerment. Empowerment is giving developers the power to make decisions, and at the same time demanding from them that they make them. You can do that only in a safe environment, and in a blame-free culture where this comes from the top. Hence the importance of Kees eating in the Canteen and asking the questions as told above. Hence, too, the importance of the error budget, and exposing it to all people that roll out.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Be simple. Be boring. Be obvious.</title>
      <link>https://blog.koehntopp.info/2016/09/01/be-simple-be-boring-be-obvious.html</link>
      <pubDate>Thu, 01 Sep 2016 08:08:46 +0000</pubDate>
      
      <guid>https://blog.koehntopp.info/2016/09/01/be-simple-be-boring-be-obvious.html</guid>
      <description>&lt;p&gt;On Core.Infra day, I was invited to speak. This is my talk. There were many like it, but this was mine.&lt;/p&gt;
&lt;p&gt;&lt;p class=&#34;md__image&#34;&gt;
  &lt;img src=&#34;https://blog.koehntopp.info/uploads/2016/09/obvious/obvious.001.jpg&#34; alt=&#34;&#34;  /&gt;
&lt;/p&gt;

&lt;/p&gt;
&lt;h2 id=&#34;in-operations-code-is-not-your-friend&#34;&gt;
    &lt;a href=&#34;#in-operations-code-is-not-your-friend&#34;&gt;
	In operations, code is not your friend.
    &lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;This is about what I did the two years I have not been around here. I first worked for Booking in 2006 as a MySQL consultant doing databasey things. I joined Booking as an employee later, in 2008. By then, I was working in Amsterdam, but living in Berlin, so I was flying around quite a bit. In 2014, that became unworkable and I signed on with a Berlin based eCommerce hoster to do some awesome stuffs.&lt;/p&gt;
&lt;p&gt;SysEleven had about 3000 customers, mostly German eCommerce or news sites. The company had less then 50 employees in 2014 and grew to 70 people now. I joined a newly formed team, whose task was to build the new hosting platform for SysEleven.&lt;/p&gt;
&lt;p&gt;&lt;p class=&#34;md__image&#34;&gt;
  &lt;img src=&#34;https://blog.koehntopp.info/uploads/2016/09/obvious/obvious.004.jpg&#34; alt=&#34;&#34;  /&gt;
&lt;/p&gt;

&lt;/p&gt;
&lt;p&gt;Given that we were to build the new platform, there has to be an old one. The old platform was based on single machines with all storage local, and maybe a NetApp or two mounted from external. Hosting was done on OpenVZ based containers, and the Underlay (Hypervisor) was generally managed by puppet. The Overlay (contents of the container), too, mostly. But due to limitations in Puppet, architectural decisions of the past and the nature of the workload imposed by customers that was not done consistently and completely. There was a lot of fuzz around the edges, and some things were completely on manual.&lt;/p&gt;
&lt;p&gt;&lt;p class=&#34;md__image&#34;&gt;
  &lt;img src=&#34;https://blog.koehntopp.info/uploads/2016/09/obvious/obvious.005.jpg&#34; alt=&#34;&#34;  /&gt;
&lt;/p&gt;

&lt;/p&gt;
&lt;p&gt;The new platform was based on Openstack, with a software designed storage solution, and a software designed network solution underneath, no local storage on the machine (all bytes always come from the SDS). Underlay and Overlay were to be completely controlled by Puppet, and in fact, the actual installation process was to be done by Puppet as well.&lt;/p&gt;
&lt;p&gt;We actually succeeded in doing this.&lt;/p&gt;
&lt;p&gt;&lt;p class=&#34;md__image&#34;&gt;
  &lt;img src=&#34;https://blog.koehntopp.info/uploads/2016/09/obvious/obvious.006.jpg&#34; alt=&#34;&#34;  /&gt;
&lt;/p&gt;

&lt;/p&gt;
&lt;p&gt;So you have several racks full of HP DL380s, all powered off and cold. The bootstrap talks to the iLOs, turns on the hardware, inventories everything, zaps fresh ROMs and iLOs onto everything, and then paints a base operating system onto the machines that is just enough to bootstrap Puppet. Puppet then continues to install and personalise the machines and build an Openstack from this, including SDS and SDN cluster builds before the Openstack install.&lt;/p&gt;
&lt;p&gt;The total installation time was 30-45 minutes, if everything went well, but usually not everything went well. :-) Also, Puppet as a tool is extremely focused on managing a single host and does not work well with the concept of a cluster. If you want to build such a thing, you end up coding a lot of stuff against the internal logic of Puppet, using Stages to have synchronisation points, or invoking very ugly hacks written as external Python scripts that sync up the cluster before allowing everybody to continue to the next phase.&lt;/p&gt;
&lt;p&gt;I learned that there is a place that can genuinely and rightfully be called Puppet Hell.&lt;/p&gt;
&lt;p&gt;&lt;p class=&#34;md__image&#34;&gt;
  &lt;img src=&#34;https://blog.koehntopp.info/uploads/2016/09/obvious/obvious.007.jpg&#34; alt=&#34;&#34;  /&gt;
&lt;/p&gt;

&lt;/p&gt;
&lt;p&gt;We made the decision to not write Puppet modules when we could reuse external work. That turned out to be a not so smart solution. We imported external repositories into our internal Gitlab, and in order to structure things, we set up a bunch of different segregated areas, teams. In the end we had about 200 repos, in six different teams.&lt;/p&gt;
&lt;p&gt;&lt;p class=&#34;md__image&#34;&gt;
  &lt;img src=&#34;https://blog.koehntopp.info/uploads/2016/09/obvious/obvious.008.jpg&#34; alt=&#34;&#34;  /&gt;
&lt;/p&gt;

&lt;/p&gt;
&lt;p&gt;That led to a lot of problems. We did not set out to have these problems, it just kind of inevitably happened.&lt;/p&gt;
&lt;p&gt;200 Repos is quite a lot, and even with tooling you end up making mistakes. Some people will not be able to see some repos, not because they should not, but because of mistakes. Some things are done manually, others are done automatically, but rules change or team members move, but the rules are not adjusted and other stuff.&lt;/p&gt;
&lt;p&gt;Anyway, you inevitably end up in a situation where you are making a change and you are not aware of all the consumers of the change - either because you can‚Äôt see them, or because you did not bother to check out that repo, or because your search did not find them. Not fixing your consumers will break them, and hence the build. That is annoying.&lt;/p&gt;
&lt;p&gt;You also can‚Äôt make your changes atomically. You may make your change at the source, and merge it, but you still need to merge and push the 13 consumers of your change, and that can take time, or fail. Until you complete the merge in all Repos, nobody in the team can roll out. That sucks.&lt;/p&gt;
&lt;p&gt;Finally, if visibility is limited, it may be that two people are producing or importing duplicate solutions for a problem. Worse, it may be that these duplication are actually duplicate external imports, but at different version requirements. That makes it very hard to manage project dependencies and size.&lt;/p&gt;
&lt;p&gt;&lt;p class=&#34;md__image&#34;&gt;
  &lt;img src=&#34;https://blog.koehntopp.info/uploads/2016/09/obvious/obvious.009.jpg&#34; alt=&#34;&#34;  /&gt;
&lt;/p&gt;

&lt;/p&gt;
&lt;p&gt;We are doing Puppet, so what is it that we import when we import stuff from Puppetlabs, or github?&lt;/p&gt;
&lt;p&gt;Well, mostly generalised configuration management classes for Puppet.&lt;/p&gt;
&lt;p&gt;What is that?&lt;/p&gt;
&lt;p&gt;Most configuration files are actually Hashes of Hashes with a unique kind of syntactic sugar. MySQL my.cnf files, Bind configuration, Openstack ini-Files, and so on - the are all HoH‚Äôs.&lt;/p&gt;
&lt;p&gt;So what you get is a YAML-shovel that will generate the HoH that is, say, an Apache vHost-definition from the Hash of Hashes inside Puppet variables. Which in turn are being loaded from the Hash of Hashes that is a Hiera YAML file.&lt;/p&gt;
&lt;p&gt;When you want to make a config change, you can‚Äôt edit a native Apache config file. You need to read the code, seeing how the Puppet in-memory HoH is being transformed into the actual Apache config. Then you need to look further back and understand how the twelve dozen Hiera files actually overlay each other to form these Puppet structures, and inject your change in the right place.&lt;/p&gt;
&lt;p&gt;Then you need to try this out and actually see what config is being generated.&lt;/p&gt;
&lt;p&gt;&lt;p class=&#34;md__image&#34;&gt;
  &lt;img src=&#34;https://blog.koehntopp.info/uploads/2016/09/obvious/obvious.010.jpg&#34; alt=&#34;&#34;  /&gt;
&lt;/p&gt;

&lt;/p&gt;
&lt;p&gt;You need a lab. For a config change.&lt;/p&gt;
&lt;p&gt;That is because your config and your config generation became so complicated that it is no longer obvious. It is no longer obvious what that code does, and it is no longer obvious what your change does.&lt;/p&gt;
&lt;p&gt;In our case the test environment is an entire datacenter, the vanguard data center. That is clearly insane.&lt;/p&gt;
&lt;p&gt;How did we end up in this place?&lt;/p&gt;
&lt;p&gt;Let me introduce &lt;a href=&#34;http://mikehadlow.blogspot.com/2012/05/configuration-complexity-clock.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;The Configuration Complexity Clock&lt;/a&gt;

.&lt;/p&gt;
&lt;p&gt;&lt;p class=&#34;md__image&#34;&gt;
  &lt;img src=&#34;https://blog.koehntopp.info/uploads/2016/09/obvious/obvious.011.jpg&#34; alt=&#34;&#34;  /&gt;
&lt;/p&gt;

&lt;/p&gt;
&lt;p&gt;You write a piece of actual code, in a proper programming language. Values are pieces of code, constants. They are baked in. It is noon on the config clock.&lt;/p&gt;
&lt;p&gt;Things change, values need to change. You need different values in different places, so you load variables from a file, the config file. It is now 3.&lt;/p&gt;
&lt;p&gt;Somebody needs more than that - there are rules. ‚ÄúSome rooms are only available at some price if the stay includes a Saturday‚Äù is such a rule. Or ‚ÄúThe amount of memory we give to the Innodb buffer pool is all machine memory minus 20% or 4GB, whichever is smaller, unless it‚Äôs a mz box with all that Blob stuff going on.‚Äù is another such rule. It is now 6 on the config clock.&lt;/p&gt;
&lt;p&gt;Of course some things can no longer be expressed as rules. You need a fully blown language with data structures, control structures, loops and include files. You get a config management DSL. Something like puppet. It‚Äôs 9 on the config clock.&lt;/p&gt;
&lt;p&gt;&lt;p class=&#34;md__image&#34;&gt;
  &lt;img src=&#34;https://blog.koehntopp.info/uploads/2016/09/obvious/obvious.012.jpg&#34; alt=&#34;&#34;  /&gt;
&lt;/p&gt;

&lt;/p&gt;
&lt;p&gt;¬ªThe team spend most of their time writing code in the new DSL.&lt;/p&gt;
&lt;p&gt;After some embarrassing episodes, they now go through a complete release cycle before deploying new DSL code.&lt;/p&gt;
&lt;p&gt;The DSL text files are version controlled and each release goes through regression testing before being deployed.¬´&lt;/p&gt;
&lt;p&gt;That‚Äôs SysEleven, doing puppet. That‚Äôs us, doing Puppet - if not now, then it‚Äôs going to be us very soon.&lt;/p&gt;
&lt;p&gt;&lt;p class=&#34;md__image&#34;&gt;
  &lt;img src=&#34;https://blog.koehntopp.info/uploads/2016/09/obvious/obvious.013.jpg&#34; alt=&#34;&#34;  /&gt;
&lt;/p&gt;

&lt;/p&gt;
&lt;p&gt;That is, because what we are doing is no longer obvious, so we need to check the presence and type of parameters to our Puppet classes.&lt;/p&gt;
&lt;p&gt;We need to write tests that check the validity and content of the subconfigs generated.&lt;/p&gt;
&lt;p&gt;We then need to do integration testing, in order to prevent catastrophic loss of the entire site from centralised config changes.&lt;/p&gt;
&lt;p&gt;&lt;p class=&#34;md__image&#34;&gt;
  &lt;img src=&#34;https://blog.koehntopp.info/uploads/2016/09/obvious/obvious.014.jpg&#34; alt=&#34;&#34;  /&gt;
&lt;/p&gt;

&lt;/p&gt;
&lt;p&gt;At SysEleven, when we were at that point, we stopped. We threw away our complete stack of ‚ÄúSetup Openstack from scratch‚Äù and started over.&lt;/p&gt;
&lt;p&gt;We chose a different config management system, in our case that was Ansible, but that is not really important.&lt;/p&gt;
&lt;p&gt;We did choose something else than Puppet, mainly so that we were unable to directly reuse any component we previously wrote.&lt;/p&gt;
&lt;p&gt;We did come up with some rules in order to prevent ourselves from descending into Puppet Hell again. Our goal was to enforce simplicity, and obviousness.&lt;/p&gt;
&lt;p&gt;&lt;p class=&#34;md__image&#34;&gt;
  &lt;img src=&#34;https://blog.koehntopp.info/uploads/2016/09/obvious/obvious.015.jpg&#34; alt=&#34;&#34;  /&gt;
&lt;/p&gt;

&lt;/p&gt;
&lt;p&gt;We did switch to a Monorepo, at least as much as possible. There were other, external dependencies with other parts of the company that prevented us from going completely Monorepo, but it kind of worked well enough for us.&lt;/p&gt;
&lt;p&gt;We did use Ansible, and while the actual choice of the config management system officially did not matter as long as it is not Puppet, Ansible does have a number of advantages that Puppet does not have. One of them being that it deals much better with distributed software than Puppet can do, and the other, much more important one being that it is very limited.&lt;/p&gt;
&lt;p&gt;It is impossible to do complicated things in Ansible. At some point, if Ansible is not sufficient, you need to stop ansibilizing and switch to Python. That‚Äôs a good point to raise the issue with the team and asking around what‚Äôs actually the problem and how an Ansible extension written in Python is going to make this better.&lt;/p&gt;
&lt;p&gt;This is good, because it gives you a point where reflection and goal-setting are in order, and a hook where project management processes can be invoked.&lt;/p&gt;
&lt;p&gt;We also looked at our YAML shovels and asked ourselves what they are good for. We found that they are overgeneralised solutions for our problems. We do not need to be able to write any conceivable Apache config from our config management code, we only need to be able to write our Apache config from it.&lt;/p&gt;
&lt;p&gt;Or, more generally:&lt;/p&gt;
&lt;h2 id=&#34;feature-development-is-about-generalisation-avoiding-limits-delaying-decisions-and-being-more-flexible&#34;&gt;
    &lt;a href=&#34;#feature-development-is-about-generalisation-avoiding-limits-delaying-decisions-and-being-more-flexible&#34;&gt;
	Feature development is about generalisation, avoiding limits, delaying decisions and being more flexible.
    &lt;/a&gt;
&lt;/h2&gt;
&lt;h2 id=&#34;infrastructure-development-is-about-being-concrete-making-decisions-setting-limits-and-being-obvious&#34;&gt;
    &lt;a href=&#34;#infrastructure-development-is-about-being-concrete-making-decisions-setting-limits-and-being-obvious&#34;&gt;
	Infrastructure development is about being concrete, making decisions, setting limits and being obvious.
    &lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;I cannot stress the importance of that enough. It was at the core of all of our problems.&lt;/p&gt;
&lt;p&gt;We decided to write config files directly. If there is an Apache config, write that Apache config file in Apache config file syntax into the Ansible template directory, and install it as literally as possible. Changes will be obvious in what they do.&lt;/p&gt;
&lt;p&gt;Do not use variables, unless you can show that in our config there is actually variation.&lt;/p&gt;
&lt;p&gt;We did catch ourselves in review in anticipating problems we didn‚Äôt have, introducing complexity we didn‚Äôt need. Good thing we did establish review, because every single team member failed at being as simple as possible, multiple times.&lt;/p&gt;
&lt;p&gt;We did have a few cases were it was in order to write code, remove duplication and generate stuff in a loop or similar things, but these cases were few and far between.&lt;/p&gt;
&lt;p&gt;&lt;p class=&#34;md__image&#34;&gt;
  &lt;img src=&#34;https://blog.koehntopp.info/uploads/2016/09/obvious/obvious.016.jpg&#34; alt=&#34;&#34;  /&gt;
&lt;/p&gt;

&lt;/p&gt;
&lt;p&gt;Our new setup was an order of magnitiude smaller and much, much easier to understand.&lt;/p&gt;
&lt;p&gt;We did bring in external people and tried to explain to them what we did, and how things work, and the new setup was so much easier to work with that this was actually possible.&lt;/p&gt;
&lt;p&gt;We did not need tests any more, because changes were obvious. Code that is not present does not need to be tested in the first place.&lt;/p&gt;
&lt;p&gt;&lt;p class=&#34;md__image&#34;&gt;
  &lt;img src=&#34;https://blog.koehntopp.info/uploads/2016/09/obvious/obvious.017.jpg&#34; alt=&#34;&#34;  /&gt;
&lt;/p&gt;

&lt;/p&gt;
&lt;p&gt;So, looking at us here: What‚Äôs in it for us?&lt;/p&gt;
&lt;p&gt;I do believe, after reading a lot of code in our Puppet and in other places, that Simplicity as a value in itself would work well for us, too.  Code isn‚Äôt our friend, either, especially in Core.Infra and Operations related places. We are here to make decisions, not delay them, and to be obvious, and as simple as we can get away with. Which is hard enough given the fact that our size and growth force more and more distributed stuff on us, which by it‚Äôs very nature has a high inherent complexity.&lt;/p&gt;
&lt;p&gt;I think the entire container thing is a brilliant idea, and we should be doing it more.&lt;/p&gt;
&lt;p&gt;A lot more.&lt;/p&gt;
&lt;p&gt;Immutable containers, being created and then loading values from a Zookeeper or Consul, instead of running Puppet on every host, painting state changes over state changes that may or may not have been previously applied.&lt;/p&gt;
&lt;p&gt;Eventually we will no longer have any need for Puppet at all any more, despite the fact that we are a larger company that is doing a lot more distributed stuff than now.&lt;/p&gt;
&lt;h2 id=&#34;the-tao-of-operations&#34;&gt;
    &lt;a href=&#34;#the-tao-of-operations&#34;&gt;
	The Tao of Operations:
    &lt;/a&gt;
&lt;/h2&gt;
&lt;h3 id=&#34;be-simple-be-boring-be-obvious&#34;&gt;
    &lt;a href=&#34;#be-simple-be-boring-be-obvious&#34;&gt;
	Be simple. Be boring. Be obvious.
    &lt;/a&gt;
&lt;/h3&gt;
&lt;h3 id=&#34;because-every-time-you-arent-you-get-to-write-a-postmortem&#34;&gt;
    &lt;a href=&#34;#because-every-time-you-arent-you-get-to-write-a-postmortem&#34;&gt;
	Because every time you aren‚Äôt, you get to write a postmortem.
    &lt;/a&gt;
&lt;/h3&gt;
</description>
    </item>
    
    <item>
      <title>Go away, or I will replace you with a very small shell script</title>
      <link>https://blog.koehntopp.info/2015/03/27/go-away-or-i-will-replace-you.html</link>
      <pubDate>Fri, 27 Mar 2015 09:12:22 +0000</pubDate>
      
      <guid>https://blog.koehntopp.info/2015/03/27/go-away-or-i-will-replace-you.html</guid>
      <description>&lt;p&gt;This is the writeup for the english variant of the talk &amp;ldquo;Go away or I will replace you with a very small Shell script&amp;rdquo;. The original version of the talk was given in German at &lt;a href=&#34;https://guug.de/veranstaltungen/ffg2015/abstracts.html#3_1_1&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;GUUG FFG 2015&lt;/a&gt;

 in Stuttgart. &lt;a href=&#34;https://www.youtube.com/watch?v=e0CCv7pSK4s&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;A recorded version in german language&lt;/a&gt;

 has been made at Froscon in August 2015.&lt;/p&gt;
&lt;p&gt;&lt;p class=&#34;md__image&#34;&gt;
  &lt;img src=&#34;https://blog.koehntopp.info/uploads/2015/03/devops-en.001.jpg&#34; alt=&#34;&#34;  /&gt;
&lt;/p&gt;

&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Go Away Or I Will Replace You With A Very Small Shell Script or There Is No Such Thing As A Devops Team&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;I came up with this talk, because I was invited to the GUUG FFG with the ask &amp;ldquo;to give some thoughts about Devops&amp;rdquo;. I ended up with something that in some way is a reflection about what changed in how we do computers, between approximately the years 2000 and 2010.&lt;/p&gt;
&lt;p&gt;&lt;p class=&#34;md__image&#34;&gt;
  &lt;img src=&#34;https://blog.koehntopp.info/uploads/2015/03/devops-en.005.jpg&#34; alt=&#34;&#34;  /&gt;
&lt;/p&gt;

&lt;/p&gt;
&lt;p&gt;At Devops.com, Rajat Bhargava tries to explain in &lt;a href=&#34;https://devops.com/devops_and-enterprises/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;DevOps and Enterprises: It&amp;rsquo;s a culture thing&lt;/a&gt;

 that&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;DevOps is about increasing company performance through better IT execution. The hypothesis is that by more closely aligning what cus with what gets built in a more timely fashion, organizations will sell more products and services. That‚Äôs not a small company or SMB issue, that‚Äôs an every company issue.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;In general, change in companies does not happen by itself - companies by construction try to repeatedly execute the same thing with the same results over and over. Change only happens because of outside pressures. So if companies change the way they do IT to &amp;ldquo;increase company performance through better IT execution&amp;rdquo;, there are outside influences at work that exert pressure on the processes, forcing change.&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s look at these outside influences.&lt;/p&gt;
&lt;h2 id=&#34;maturity-of-market-and-process-and-growth-matters&#34;&gt;
    &lt;a href=&#34;#maturity-of-market-and-process-and-growth-matters&#34;&gt;
	Maturity of Market and Process, and Growth matters
    &lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;&lt;p class=&#34;md__image&#34;&gt;
  &lt;img src=&#34;https://blog.koehntopp.info/uploads/2015/03/devops-en.012.jpg&#34; alt=&#34;&#34;  /&gt;
&lt;/p&gt;

&lt;/p&gt;
&lt;p&gt;&lt;em&gt;A maturing environment (left hand side) allowed the development and establishment of quantitatively governed processes. After reaching a certain process maturity level (right hand side), outsourcing of processes in full or in part becomes possible, enabling a make-or-buy decision at the management level.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;The Cynefin model is a soft thing, a model or frame of mind that is used by people to have words and categories to express what tools and project structures make sense in a given context: It can be used to classify &amp;ldquo;decision making contexts&amp;rdquo;. A decision making context is for example a market in which a company is going to act, and then it would become a way to express &amp;ldquo;market maturity&amp;rdquo;.&lt;/p&gt;
&lt;p&gt;If you apply it to &amp;ldquo;the development of the early Internet&amp;rdquo; or &amp;ldquo;the Dotcom bubble before 2000&amp;rdquo;, then you see the very early Dotcom bubble as &amp;ldquo;Nobody has a clue how to even make money on the Internet, much less how to structure a company around this idea&amp;rdquo;. This is the Chaotic domain, subject of the &amp;ldquo;Research&amp;rdquo; model, in which you try out things, and see what sticks. You do not know the rules at all, not even if they are static or changing. You need to get any structure at all. The work model is &amp;ldquo;Act&amp;rdquo; - try a thing, &amp;ldquo;Sense&amp;rdquo; - see what happens and &amp;ldquo;Respond&amp;rdquo; - discard the attempt or if it works, try to modify it and see what changes. With &amp;ldquo;Novel&amp;rdquo; practice you work with very small teams of highly qualified people - a research team - and try to establish and formulate some ground rules. You expect to lose money and to throw away many experiments, quickly.&lt;/p&gt;
&lt;p&gt;Once you have found a working business model, and successfully extract any money at all, you can switch to the &amp;ldquo;Complex&amp;rdquo; domain and build on your emergent practice. You secure the position you have found and try out small things, instead of wild guesses all over the place. Again, you try to register what that does to your business and improve (instead of trying something else entirely). Basically you have the business model and now try to build practice at all. You try to move things from Research to Engineering. This also changes team structure - you would work with your Researchers moving to Lead positions with a bunch of applied sciences or engineering grade people working for them. This is now multiple small teams at work, on different aspects of incremental improvement. You focus on iteration, small improvements and may experiment with some basic automation. In the Complex you know there are rules, but they may be not easily discoverable, and they may be changing and stateful.&lt;/p&gt;
&lt;p&gt;As the market and the business matures, it may move to the &amp;ldquo;Complicated&amp;rdquo; domain, in which a Business Model and Basic Practice exists and you now try to find dimensions along which to judge these practices (&amp;ldquo;What are the metrics?&amp;rdquo;) and then try to establish measuring processes for this. Using the metrics you can sense, and exert control by analyzing the metrics and how they change. This is no longer research at all, but engineering at the verge of pure business excecution, preparing for scaleout. You remove the researchers, and add engineering bureaucrats that establish the framework for quantification. In the Complicated market rules exist, and are discoverable, and usually are static or the rules by which they change are also known.&lt;/p&gt;
&lt;p&gt;In the Complex and especially in the Complicated, companies are growing in a growing market, and focus is not so much on efficiency as on land grab. Management says things like &amp;ldquo;Do not spend more than we earn at any time, but first and foremost, do not stall growth.&amp;rdquo;&lt;/p&gt;
&lt;p&gt;Finally things move into &amp;ldquo;Simple&amp;rdquo; or &amp;ldquo;Obvious&amp;rdquo; domain, which has well established procedural handbooks, metrics and can draw on past iterations that are similar to the current. So you measure, sense, then look up the proper response and execute it. Best Practice and quantified metrics exist, and you can scale out the process by hiring and training moderately trained people working from the book you prepared in the previous step. This is a mature and stable market, with obvious and discoverable rules and playbooks for all situations. In a mature market, growth is usually only possible at the cost of others, as the market itself is not growing and there is no unclaimed or untapped market share. Instead, growth often is created by efficieny improvements. This is the domain of bureaucrats and beancounters.&lt;/p&gt;
&lt;p&gt;At the right hand side, we have a process maturity model - here it is &lt;a href=&#34;https://en.wikipedia.org/wiki/Capability_Maturity_Model_Integration&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CMMI&lt;/a&gt;

, but any will do, really. The point being that process maturity follows market maturity: Establishing mature, quantified processes means that you need to be able to iterate, and iterations need to be comparable. So this is basically impossible in the Chaotic and Complex, and also not in the parts of the Complicated where the company is still growing rapidly. If you experiment internally, or if you grow by 10x every other year, your processes will change, even if the deliverables stay the same. That also means that establishing comparable metrics on process execution is impossible.&lt;/p&gt;
&lt;p&gt;For outsourcing decisions that means they are impossible. In order to have agreement on what is being bought and what has been delivered, it is necessary to have metrics (and before that, a taxonomy). Only then it is possible for both parties to agree what the product is and if it has been delivered as agreed. That also means that Pre-Obvious or Fast-Growing companies will bias towards insourcing, whereas companies where efficiency matters can make the Make-or-Buy decision and decide to outsource.&lt;/p&gt;
&lt;h2 id=&#34;scale-up-vs-scale-out&#34;&gt;
    &lt;a href=&#34;#scale-up-vs-scale-out&#34;&gt;
	Scale-Up vs. Scale-Out
    &lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;&lt;p class=&#34;md__image&#34;&gt;
  &lt;img src=&#34;https://blog.koehntopp.info/uploads/2015/03/devops-en.013.jpg&#34; alt=&#34;&#34;  /&gt;
&lt;/p&gt;

&lt;/p&gt;
&lt;p&gt;At the beginning of the Dotcom bubble, running IT mostly meant Enterprise IT. Some somebody somewhere had a data center, and in the data center was a large computer called server. Somebody else now connected the data center network to the Internet. After figuring out a few basic concepts such as Firewalls, DMZ and basic network security, people started about thinking connecting the internal IT to the Internet. At that time the Web came around.&lt;/p&gt;
&lt;p&gt;As the Web grew, more people used it, and the load on the existing large computers grew. What to do?&lt;/p&gt;
&lt;p&gt;Obviously: buy a larger, faster and newer computer. &lt;a href=&#34;https://en.wikipedia.org/wiki/Moore%27s_law&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Moore&amp;rsquo;s Law&lt;/a&gt;

 gives you an annual growth of around 45% year on year, and that should be right, shouldn&amp;rsquo;t it?&lt;/p&gt;
&lt;p&gt;&lt;p class=&#34;md__image&#34;&gt;
  &lt;img src=&#34;https://blog.koehntopp.info/uploads/2015/03/devops-en.014.jpg&#34; alt=&#34;&#34;  /&gt;
&lt;/p&gt;

&lt;/p&gt;
&lt;p&gt;&lt;em&gt;One of twelve Enterprise 10000 &amp;ldquo;Starfire&amp;rdquo; at mobilcom, Germany, around 2002.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;We see some seriously large machines at around that time - there were twelve 64 CPU Enterprise 10000 &amp;ldquo;Starfire&amp;rdquo; machines present at the mobilcom Data Center in Germany in the early 2000&amp;rsquo;s, for example, and many more were deployed in other places just in the area I worked in.&lt;/p&gt;
&lt;p&gt;&lt;p class=&#34;md__image&#34;&gt;
  &lt;img src=&#34;https://blog.koehntopp.info/uploads/2015/03/devops-en.015.jpg&#34; alt=&#34;&#34;  /&gt;
&lt;/p&gt;

&lt;/p&gt;
&lt;p&gt;Yet it became obvious rather quickly that this was not an approach that worked, and even if it worked, it often was prohibitively complex, expensive and slow. Once that became clear, people started to automate basic tasks, learned to mange large fleets of moderately sized machines and then tried a different approach - &amp;ldquo;scale out&amp;rdquo; instead of &amp;ldquo;scale up&amp;rdquo;. Use more computers instead of larger computers.&lt;/p&gt;
&lt;p&gt;This triggered a lot of learnings at all levels of the profession - network, data center structure and operations practice needed revision. This talk will focus on the latter, but the other topics are also of interest.&lt;/p&gt;
&lt;h2 id=&#34;operations-change-in-response-to-scale-out&#34;&gt;
    &lt;a href=&#34;#operations-change-in-response-to-scale-out&#34;&gt;
	Operations change in response to scale-out
    &lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;&lt;p class=&#34;md__image&#34;&gt;
  &lt;img src=&#34;https://blog.koehntopp.info/uploads/2015/03/devops-en.016.jpg&#34; alt=&#34;&#34;  /&gt;
&lt;/p&gt;

&lt;/p&gt;
&lt;p&gt;I have been known to annoy people with saying that &amp;ldquo;Whenever you are using ssh, you might as well open a ticket.&amp;rdquo;&lt;/p&gt;
&lt;p&gt;If you need to login to a box manually to look something up, you are looking at a monitoring defect - make a ticket for that. If you need to login to a box manually to change something, you are looking at an automation defect - make a ticket for that. I have literally been beaten for saying that.&lt;/p&gt;
&lt;p&gt;We get cfengine 3 (2004), and later Puppet (2005), Salt (2011) and Ansible (2012). Also, somewhere at the end of the observed time frame virtualisation becomes viable, and with that we get automated provisioning of hardware and &amp;ldquo;Infrastructure in Code&amp;rdquo;.&lt;/p&gt;
&lt;p&gt;&lt;p class=&#34;md__image&#34;&gt;
  &lt;img src=&#34;https://blog.koehntopp.info/uploads/2015/03/devops-en.017.jpg&#34; alt=&#34;&#34;  /&gt;
&lt;/p&gt;

&lt;/p&gt;
&lt;p&gt;The thinking that permeates software development can now be applied to hardware and infrastructure resources: If there is a problem with a setup, recreate that setup, and the problem in a branch. Then modify the branch to see if that fixes the problem. When it does, merge the branch, and redeploy automatically.&lt;/p&gt;
&lt;p&gt;We get alignment of tooling in operations with tooling in development. This, and &amp;ldquo;zero manual interactions&amp;rdquo; grade of automation have a great impact:&lt;/p&gt;
&lt;p&gt;&lt;p class=&#34;md__image&#34;&gt;
  &lt;img src=&#34;https://blog.koehntopp.info/uploads/2015/03/devops-en.018.jpg&#34; alt=&#34;&#34;  /&gt;
&lt;/p&gt;

&lt;/p&gt;
&lt;p&gt;Automating things makes them reproducible: The same change applied to many instances always produces the same outcome.&lt;/p&gt;
&lt;p&gt;If that actually works, and has zero manual interactions, we can apply the change to the entire fleet in parallel, instead of filtering it through a single person and serializing it that way.&lt;/p&gt;
&lt;p&gt;Once you can do things fully automated and in parallel, it does no longer matter so much if a single thing fails - you do not care about individual instances any more. Instead you care more about always having sufficient capacity in general, and how to orchestrate all your instances so that this condition is never ever violated.&lt;/p&gt;
&lt;p&gt;It is this stage where we see people moving from &amp;ldquo;highly available setups&amp;rdquo; using Pacemaker and Active/Passive pairs to loadbalancers with &lt;em&gt;n&lt;/em&gt; workers, all of them active at a sufficiently low utilization factor to buffer away a loss of &lt;em&gt;m&lt;/em&gt; units of capacity. All computing becomes distributed computing at some point - more about that in another talk.&lt;/p&gt;
&lt;h2 id=&#34;this-requires-a-different-mindset-and-different-qualifications&#34;&gt;
    &lt;a href=&#34;#this-requires-a-different-mindset-and-different-qualifications&#34;&gt;
	This requires a different mindset, and different qualifications
    &lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;&lt;p class=&#34;md__image&#34;&gt;
  &lt;img src=&#34;https://blog.koehntopp.info/uploads/2015/03/devops-en.019.jpg&#34; alt=&#34;&#34;  /&gt;
&lt;/p&gt;

&lt;/p&gt;
&lt;p&gt;When we change the tooling and the methods to be more closely aligned with Developers, culture also has to change.&lt;/p&gt;
&lt;p&gt;&lt;p class=&#34;md__image&#34;&gt;
  &lt;img src=&#34;https://blog.koehntopp.info/uploads/2015/03/devops-en.020.jpg&#34; alt=&#34;&#34;  /&gt;
&lt;/p&gt;

&lt;/p&gt;
&lt;p&gt;A figure of the pre-2000 USENET sysadmin culture has been the BOFH - the &lt;a href=&#34;http://bofh.bjash.com/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Bastard Operator From Hell&lt;/a&gt;

. These are the stories about an outright hostile systems operator, written by Simon Traviaglia and posted to USENET. Parts of that have been sold to magazines and printed later on.&lt;/p&gt;
&lt;p&gt;A lot of people picked up on the concept, and the USENET groups alt.sysadmin.recovery and de.alt.sysadmin.recovery were born. People met, for example in German at the series of Cannossa parties.&lt;/p&gt;
&lt;p&gt;&lt;p class=&#34;md__image&#34;&gt;
  &lt;img src=&#34;https://blog.koehntopp.info/uploads/2015/03/devops-en.021.jpg&#34; alt=&#34;&#34;  /&gt;
&lt;/p&gt;

&lt;/p&gt;
&lt;p&gt;This is not a good mindset or culture. It not only rejects development, and change per se, it is also toxic and hostile, even to the people who actually pay the bill. Never a good idea.&lt;/p&gt;
&lt;p&gt;Of course it is a joke, or satire, but unfortunately, stories influcence minds, even when they are meant to be funny or satire.&lt;/p&gt;
&lt;p&gt;Around the same time, Thomas A. Limoncelli wrote the proto-devops book &amp;ldquo;The practice of System Administration&amp;rdquo;, which interestingly contained a chapter on how not be to a BOFH - it asked the system administrator to reflect on the structure and processes of the larger company and their place in them. Limoncelli then goes on about how to build useful supporting and reporting structures to function successfully in that structure. He closes with advice on how to respond to unexpected demands without too much toil and effort. It foreshadows a lot of development that caught on later under the label devops.&lt;/p&gt;
&lt;p&gt;&lt;p class=&#34;md__image&#34;&gt;
  &lt;img src=&#34;https://blog.koehntopp.info/uploads/2015/03/devops-en.022.jpg&#34; alt=&#34;&#34;  /&gt;
&lt;/p&gt;

&lt;/p&gt;
&lt;p&gt;&lt;em&gt;The current, updated edition of that book is titled &amp;ldquo;The Practice of Systems and network Administration&amp;rdquo;.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;The term &amp;ldquo;Devops&amp;rdquo; meanwhile, was coined by &lt;a href=&#34;https://twitter.com/patrickdebois&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Patric Debois&lt;/a&gt;

 in 2008 in Belgium, and pretty much assembled and then taught the same ideas as the Limoncelli book, at a larger scale and using even clearer structure.&lt;/p&gt;
&lt;p&gt;&lt;p class=&#34;md__image&#34;&gt;
  &lt;img src=&#34;https://blog.koehntopp.info/uploads/2015/03/devops-en.023.jpg&#34; alt=&#34;&#34;  /&gt;
&lt;/p&gt;

&lt;/p&gt;
&lt;p&gt;&lt;em&gt;BOFH practice applied in the 2008 Booking.com office (re-enactment).&lt;/em&gt;&lt;/p&gt;
&lt;h2 id=&#34;so-how-do-dev-and-ops-differ&#34;&gt;
    &lt;a href=&#34;#so-how-do-dev-and-ops-differ&#34;&gt;
	So how do Dev and Ops differ?
    &lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;Well, even at 2008 we already have processes for IT organisations. Large, scaled up and unwieldy processes that have been established top down, though: During the Dotcom boom, the structure of IT support and operations processes had been formulated as well in &lt;a href=&#34;https://en.wikipedia.org/wiki/ITIL&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;ITIL&lt;/a&gt;

, and then often badly implemented in the wild.&lt;/p&gt;
&lt;p&gt;&lt;p class=&#34;md__image&#34;&gt;
  &lt;img src=&#34;https://blog.koehntopp.info/uploads/2015/03/devops-en.024.jpg&#34; alt=&#34;&#34;  /&gt;
&lt;/p&gt;

&lt;/p&gt;
&lt;p&gt;It is entirely valid and sometimes helpful to think of Devops as a reaction to bad ITIL deployments:&lt;/p&gt;
&lt;p&gt;&lt;p class=&#34;md__image&#34;&gt;
  &lt;img src=&#34;https://blog.koehntopp.info/uploads/2015/03/devops-en.025.jpg&#34; alt=&#34;&#34;  /&gt;
&lt;/p&gt;

&lt;/p&gt;
&lt;p&gt;Bottom up, &amp;ldquo;apply development methods and thinking to IT operations, while staying small and agile and iterating quickly, and also focusing on automation, metrics capture and data driven improvement&amp;rdquo;.&lt;/p&gt;
&lt;p&gt;Tear down the wall between software development and operations. Teach operators coding and coding thinking, and teach developers to care about operations and how operations matter, how scale matters.&lt;/p&gt;
&lt;p&gt;&lt;p class=&#34;md__image&#34;&gt;
  &lt;img src=&#34;https://blog.koehntopp.info/uploads/2015/03/devops-en.026.jpg&#34; alt=&#34;&#34;  /&gt;
&lt;/p&gt;

&lt;/p&gt;
&lt;p&gt;Jez Humble describes this tweet as a reaction:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;In a fit of rage caused by reading yet another email in which one of our customers proposed creating a &amp;ldquo;devops team&amp;rdquo; so as to &amp;ldquo;implement&amp;rdquo; devops, I tweeted that &amp;ldquo;THERE IS NO SUCH THING AS A DEVOPS TEAM.&amp;rdquo;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;and later wrote &lt;a href=&#34;https://continuousdelivery.com/2012/10/theres-no-such-thing-as-a-devops-team/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;a longer blog post&lt;/a&gt;

 about this, the core of the argument being&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The Devops movement addresses the dysfunction that results from organizations composed of functional silos. Thus, creating another functional silo that sits between dev and ops is clearly a poor (and ironic) way to try and solve these problems.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Applying developer methods to operations problems changes the environment and tooling. The modern stack looks like this:&lt;/p&gt;
&lt;p&gt;&lt;p class=&#34;md__image&#34;&gt;
  &lt;img src=&#34;https://blog.koehntopp.info/uploads/2015/03/devops-en.033.jpg&#34; alt=&#34;&#34;  /&gt;
&lt;/p&gt;

&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Systems are provisioned with &amp;ldquo;Infrastructure as Code&amp;rdquo;, automatically and on demand, via an API with no humans involved.&lt;/li&gt;
&lt;li&gt;The code for the application and the infrastructure itself resides in a shared version control system, where it can also be subject to automation.&lt;/li&gt;
&lt;li&gt;There is a one step build and deploy automation that produces deliverables. These are then automatically deployed into production with zero humans involved, if so desired.&lt;/li&gt;
&lt;li&gt;The deployment and the activation of code paths is separated, using feature flags and instrumentation to compare performance aspects of these code paths. Separation of deployment and activation is key to safe and fast rollouts, gradual activation and &lt;a href=&#34;https://blog.koehntopp.info/2020/01/17/rolling-back-a-rollout.html&#34;&gt;one-click rollbacks&lt;/a&gt;

.&lt;/li&gt;
&lt;li&gt;Monitoring and freshness indicator on monitoring metrics are key to proper failure detection.&lt;/li&gt;
&lt;li&gt;Instant and shared communication is key to decisive join action in failure situations.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;There are two fundamental innovations in here that deserve a special highlight from a &amp;ldquo;ten years later&amp;rdquo; perspective:&lt;/p&gt;
&lt;h3 id=&#34;separation-of-rollout-and-activation&#34;&gt;
    &lt;a href=&#34;#separation-of-rollout-and-activation&#34;&gt;
	Separation of rollout and activation
    &lt;/a&gt;
&lt;/h3&gt;
&lt;p&gt;When writing new code, it is useful to wrap the new code and the old code being replaced by the new code into two branches of a feature flag. This is because in a large enough deployment you cannot migrate to the new code in a single atomic transaction anyway: old and new are going to inevitably co-exist for some time.&lt;/p&gt;
&lt;p&gt;But if that is the case, you might as well make the most of it: Separating rollout and activation allows you to roll out code into production without running it at all, and without running it for all users. Instead you can choose who gets exposed to the new variant in a very controlled way: You can run it for one user, for 1% of the user base, for Mac users only or for users coming from IP addresses identifing as Japanese in origin, or any combination of such criteria.&lt;/p&gt;
&lt;p&gt;You can also instrument that code, and then compare how it behaves - in conversion of sales, in cost of execution, in execution speed and along many dimensions more.&lt;/p&gt;
&lt;p&gt;Separation of rollout and activation, and proper instrumentation of the wrapped code allow you to experiment with variants in production.&lt;/p&gt;
&lt;h3 id=&#34;observability-through-metrics-from-events&#34;&gt;
    &lt;a href=&#34;#observability-through-metrics-from-events&#34;&gt;
	Observability through Metrics from Events
    &lt;/a&gt;
&lt;/h3&gt;
&lt;p&gt;Another thing that has proven to be useful is to build a monitoring system on top of an event system. Instead of collecting numeric metrics on machines and pre-aggregating them, logging structured data (JSON or similar) and collecting them centrally has advantages: The numeric metrics can be extracted from the events and pre-aggregated for common and known things to report on, but since the actual events constituting the metrics are persisted, other important things become possible:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Metrics can tie back to the actual events that make up the numbers. So when you have identified an anomaly in space (the machines involved) and time, you can look at the actual events that make up the numbers you looked at, and try to identify a root cause.&lt;/li&gt;
&lt;li&gt;Since the actual raw events are available after the fact, it is possible to correlate things over time: &amp;ldquo;When we changed the upper sales funnel this way, immediate conversion increased, but effectively we lost money, because of increased return rates and customer support cost in a three week window after each sale, for &lt;em&gt;x&lt;/em&gt; percent of the customers of the B-variant of the experiment&amp;rdquo;. These are findings that are impossible to prove without access to raw event data.&lt;/li&gt;
&lt;li&gt;Since the actual raw events are available, it is possible to query the raw event data in other, previously unknown dimensions, searching for additional patters - it is possible to debug using event data instead of going each box &amp;ldquo;in person&amp;rdquo; (with ssh) and observing things on the ground.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;a-clash-of-cultures&#34;&gt;
    &lt;a href=&#34;#a-clash-of-cultures&#34;&gt;
	A clash of cultures
    &lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;&lt;p class=&#34;md__image&#34;&gt;
  &lt;img src=&#34;https://blog.koehntopp.info/uploads/2015/03/devops-en.039.jpg&#34; alt=&#34;&#34;  /&gt;
&lt;/p&gt;

&lt;/p&gt;
&lt;p&gt;In any case: We get convergence in tooling between Dev and Ops.&lt;/p&gt;
&lt;p&gt;Operational people learn to code, and use this to automate operations, centralize and standardize the monitoring, and developers learn to care about operational aspects, building operations support directly into software.&lt;/p&gt;
&lt;p&gt;Eventually, developers and admins are using the same set of tools. So, let&amp;rsquo;s converge the teams. That&amp;rsquo;s Devops.&lt;/p&gt;
&lt;h2 id=&#34;its-not-that-simple-and-doesnt-work&#34;&gt;
    &lt;a href=&#34;#its-not-that-simple-and-doesnt-work&#34;&gt;
	It&amp;rsquo;s not that simple and doesn&amp;rsquo;t work?
    &lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;&lt;p class=&#34;md__image&#34;&gt;
  &lt;img src=&#34;https://blog.koehntopp.info/uploads/2015/03/devops-en.040.jpg&#34; alt=&#34;&#34;  /&gt;
&lt;/p&gt;

&lt;/p&gt;
&lt;p&gt;Inevitably, cultures clash.&lt;/p&gt;
&lt;p&gt;Despite the same projects and identical tooling, there are critical differences.&lt;/p&gt;
&lt;p&gt;But they seem to be harder to spot.&lt;/p&gt;
&lt;p&gt;What are they about?&lt;/p&gt;
&lt;p&gt;&lt;p class=&#34;md__image&#34;&gt;
  &lt;img src=&#34;https://blog.koehntopp.info/uploads/2015/03/devops-en.041.jpg&#34; alt=&#34;&#34;  /&gt;
&lt;/p&gt;

&lt;/p&gt;
&lt;p&gt;Feature-Developers (&amp;ldquo;Developers&amp;rdquo;) and Infrastructure-Developers (former &amp;ldquo;Operations&amp;rdquo; people) seem to have utterly different metrics for success.&lt;/p&gt;
&lt;p&gt;&lt;p class=&#34;md__image&#34;&gt;
  &lt;img src=&#34;https://blog.koehntopp.info/uploads/2015/03/devops-en.042.jpg&#34; alt=&#34;&#34;  /&gt;
&lt;/p&gt;

&lt;/p&gt;
&lt;p&gt;Infrastructure developers see feature developers as people who focus on new best cases: There is a plan, there is sprint. New features - new best cases - are developed, and what is deemed finished is being released in a big showy party. Everybody is colorful, happy and rolling across the lawn. What isn&amp;rsquo;t finished goes back onto the backlog, and that is that.&lt;/p&gt;
&lt;p&gt;&lt;p class=&#34;md__image&#34;&gt;
  &lt;img src=&#34;https://blog.koehntopp.info/uploads/2015/03/devops-en.043.jpg&#34; alt=&#34;&#34;  /&gt;
&lt;/p&gt;

&lt;/p&gt;
&lt;p&gt;Infrastructure developer know that is not true for themselves. They look at themselves like in this picture, complete with helmet webcams.&lt;/p&gt;
&lt;p&gt;&amp;ldquo;Nobody has ever flipped a light switch and exclaimed &amp;lsquo;Awesome. The light actually turned on!&amp;rsquo; when it worked. But flip the switch only once, and it does not turn on: people will complain and remember that for a long time.&amp;rdquo;&lt;/p&gt;
&lt;p&gt;Because of that, infrastructure developers judge change by looking at how worst cases behave and how worst case behavior changes with changed code. Only then they will look at other improvements.&lt;/p&gt;
&lt;p&gt;&lt;p class=&#34;md__image&#34;&gt;
  &lt;img src=&#34;https://blog.koehntopp.info/uploads/2015/03/devops-en.046.jpg&#34; alt=&#34;&#34;  /&gt;
&lt;/p&gt;

&lt;/p&gt;
&lt;p&gt;There are two famous Booking rules for rollouts, from the early days:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;#1 If you break it, will you even notice?&lt;/li&gt;
&lt;li&gt;#2 If you break it, can you fix it?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The answer to #1 should be &amp;ldquo;Yes!&amp;rdquo;, of course. But that means you need to know your dependencies and dependents, your place in the larger scope of things. If also means you need to know what people your change will affect, and how to find them and to synchronize with them. If you do not know these things, you do not know how your change will affect these people, and that means you cannot safely roll out.&lt;/p&gt;
&lt;p&gt;That&amp;rsquo;s okay, we have training for that, and we can help you with that.&lt;/p&gt;
&lt;p&gt;The answer to #2 should be &amp;ldquo;Yes!&amp;rdquo;, again, or if cannot be that, it should be &amp;ldquo;but I know who can, and I made sure they are aware of my change and available for help&amp;rdquo;.&lt;/p&gt;
&lt;p&gt;So both of these rules are dealing with failure - anticipating and handling it properly. It&amp;rsquo;s infrastructure developer thinking, but we give these rules to feature developers. That&amp;rsquo;s a mind hack.&lt;/p&gt;
&lt;p&gt;&lt;p class=&#34;md__image&#34;&gt;
  &lt;img src=&#34;https://blog.koehntopp.info/uploads/2015/03/devops-en.048.jpg&#34; alt=&#34;&#34;  /&gt;
&lt;/p&gt;

&lt;/p&gt;
&lt;p&gt;Infrastructure thinking is really hard to explain to outsiders.&lt;/p&gt;
&lt;p&gt;&lt;p class=&#34;md__image&#34;&gt;
  &lt;img src=&#34;https://blog.koehntopp.info/uploads/2015/03/devops-en.049.jpg&#34; alt=&#34;&#34;  /&gt;
&lt;/p&gt;

&lt;/p&gt;
&lt;p&gt;For example, in this document, the Linux &amp;ldquo;Code of Conflict&amp;rdquo;, what is being tried is to explain this - &amp;ldquo;There are people who will read your code, and they will evaluate it on how it fails, and how it changes failure before they even look at what it improves, because that is how Infrastructure works. Criticizing your code is not criticizing you, listen and learn.&amp;rdquo;&lt;/p&gt;
&lt;p&gt;It also explains: &amp;ldquo;Criticizing you instead of your code is not okay, so if that happens, call out for help, please.&amp;rdquo; It uses many words for that, because somehow most non-infrastructure people are not used to this.&lt;/p&gt;
&lt;p&gt;&lt;p class=&#34;md__image&#34;&gt;
  &lt;img src=&#34;https://blog.koehntopp.info/uploads/2015/03/devops-en.051.jpg&#34; alt=&#34;&#34;  /&gt;
&lt;/p&gt;

&lt;/p&gt;
&lt;p&gt;There is a certain type of experience associated with this kind of mindset. &amp;ldquo;Who here remembers this one?&amp;rdquo; When I asked the original audience of the talk about this incident, about 2/3 of the audience raised their hands. &amp;ldquo;I was there!&amp;rdquo; was being shouted by a few people.&lt;/p&gt;
&lt;p&gt;That was at that point in time 14 years ago.&lt;/p&gt;
&lt;p&gt;&lt;p class=&#34;md__image&#34;&gt;
  &lt;img src=&#34;https://blog.koehntopp.info/uploads/2015/03/devops-en.052.jpg&#34; alt=&#34;&#34;  /&gt;
&lt;/p&gt;

&lt;/p&gt;
&lt;p&gt;Ten years earlier, at Friday, the 13. May of 2005, I had to shut down 2MW of compute at the web.de data center, turning off the email for 25 million customers, because of a complete loss of cooling in the Data Center. We handled the incident, turned off the entire data center in less than 20 minutes in a chaotic rumble, and then back on to basic functionality with another two hours of work. Fully redundant and properly configured setup was reached again on Saturday, the 14th, around noon.&lt;/p&gt;
&lt;p&gt;People in the audience also remembered that one.&lt;/p&gt;
&lt;p&gt;&lt;p class=&#34;md__image&#34;&gt;
  &lt;img src=&#34;https://blog.koehntopp.info/uploads/2015/03/devops-en.053.jpg&#34; alt=&#34;&#34;  /&gt;
&lt;/p&gt;

&lt;/p&gt;
&lt;p&gt;Of course, Infrastructure developers are averse to change. Change introduces unknown behavior, and unknown operating conditions.&lt;/p&gt;
&lt;p&gt;Of course, if you are always ever judged by your failures, you focus on failure cases and how they are handled.&lt;/p&gt;
&lt;p&gt;&lt;p class=&#34;md__image&#34;&gt;
  &lt;img src=&#34;https://blog.koehntopp.info/uploads/2015/03/devops-en.054.jpg&#34; alt=&#34;&#34;  /&gt;
&lt;/p&gt;

&lt;/p&gt;
&lt;p&gt;This does not have to be a contradiction, though. A sequence of rapid small changes acutally makes deployment risk smaller, and allows you to fail safely in many cases - in all cases, even, with a bit of engineering and good practice - see above, the discussion about events, monitoring and separation of rollout and activation.&lt;/p&gt;
&lt;p&gt;&lt;p class=&#34;md__image&#34;&gt;
  &lt;img src=&#34;https://blog.koehntopp.info/uploads/2015/03/devops-en.056.jpg&#34; alt=&#34;&#34;  /&gt;
&lt;/p&gt;

&lt;/p&gt;
&lt;p&gt;Planning for change and budgeting downtime can help a lot, even. Internally, we teach this as shown in the slides below: We have a failure budget, in lost potential income, and we expect to make use of it, even.&lt;/p&gt;
&lt;p&gt;&lt;p class=&#34;md__image&#34;&gt;
  &lt;img src=&#34;https://blog.koehntopp.info/uploads/2015/03/devops-en.057.jpg&#34; alt=&#34;&#34;  /&gt;
&lt;/p&gt;

&lt;/p&gt;
&lt;p&gt;We look at what happened in a blameless postmortem process, and then write down what the takeaways from the outage are - how do we need to change processes, how to we need to improve monitoring and training, how do we need to fix code in order for that failure and that class of failure to go away?&lt;/p&gt;
&lt;p&gt;&lt;p class=&#34;md__image&#34;&gt;
  &lt;img src=&#34;https://blog.koehntopp.info/uploads/2015/03/devops-en.058.jpg&#34; alt=&#34;&#34;  /&gt;
&lt;/p&gt;

&lt;/p&gt;
&lt;p&gt;We talk about the concept of &amp;ldquo;Careful Carelessness&amp;rdquo;, which is what allows you to jump out of a plane several thousand meters up in the air, more than once.&lt;/p&gt;
&lt;p&gt;&lt;p class=&#34;md__image&#34;&gt;
  &lt;img src=&#34;https://blog.koehntopp.info/uploads/2015/03/devops-en.060.jpg&#34; alt=&#34;&#34;  /&gt;
&lt;/p&gt;

&lt;/p&gt;
&lt;p&gt;The &amp;ldquo;Careful&amp;rdquo; part of skydiving is important. You need training, you need to know and trust your buddies, you need a plan for safe landing, and you need alternative plans, tested and ready, and reviewed by others. You need to review their plans.&lt;/p&gt;
&lt;p&gt;&lt;p class=&#34;md__image&#34;&gt;
  &lt;img src=&#34;https://blog.koehntopp.info/uploads/2015/03/devops-en.064.jpg&#34; alt=&#34;&#34;  /&gt;
&lt;/p&gt;

&lt;/p&gt;
&lt;p&gt;The core concept is to make changes &amp;ldquo;survivable&amp;rdquo;, and then be able to execute the entire process in a way that it can be done often, without hurting. What is a project elsewhere, a one-off thing with additional staffing and a deadline, is a process for us, routinely, repeatedly done as part of normal operations, all of the time.&lt;/p&gt;
&lt;p&gt;This is what Devops is about: Making change a routine process of everyday operations.&lt;/p&gt;
&lt;p&gt;&lt;p class=&#34;md__image&#34;&gt;
  &lt;img src=&#34;https://blog.koehntopp.info/uploads/2015/03/devops-en.069.jpg&#34; alt=&#34;&#34;  /&gt;
&lt;/p&gt;

&lt;/p&gt;
&lt;p&gt;&amp;ldquo;Survivability&amp;rdquo; means to fail, or almost fail, but live to walk away and tell the tale. Because that is how we learn: When we succeed, we only confirm what we already know. When we fail, or almost fail, we learn a new thing, and we can share that experience with our peers.&lt;/p&gt;
&lt;p&gt;Not only do we learn from failure, we also share common history and experience, and that builds better communication, validates judgement, and builds trust. This is how you forge a team.&lt;/p&gt;
&lt;p&gt;&lt;p class=&#34;md__image&#34;&gt;
  &lt;img src=&#34;https://blog.koehntopp.info/uploads/2015/03/devops-en.071.jpg&#34; alt=&#34;&#34;  /&gt;
&lt;/p&gt;

&lt;/p&gt;
&lt;p&gt;Testing in production is okay, if you engineer for it, and make it survivable. Even outside of rollouts, you can increase resilience by introducing chaos and variabilty in procedures - don&amp;rsquo;t shut down systems cleanly, always jank them out of production, or even install the chaos monkey. Always test in production, and find ways to do this safely. Also, this will help you find dependencies and metrics that matter.&lt;/p&gt;
&lt;p&gt;&lt;p class=&#34;md__image&#34;&gt;
  &lt;img src=&#34;https://blog.koehntopp.info/uploads/2015/03/devops-en.076.jpg&#34; alt=&#34;&#34;  /&gt;
&lt;/p&gt;

&lt;/p&gt;
&lt;p&gt;Martin Seeger of NetUSE is famous for popularizing the proverb &amp;ldquo;Nobody wants Backup. Everybody needs Restore.&amp;rdquo; He wants to highlight the fact that Backups are just a cost center, and do not produce anything of value. The value - which needs to be proven - is in the successful Restore, and that is also what needs to be tested, constantly.&lt;/p&gt;
&lt;p&gt;Of course, if you automate, you do not need backups for anything besides the (clearly defined and isolated) state. You can rebuild your systems at will, in regular intervals, or for testing purposes, and then inject the actually unique state into them.&lt;/p&gt;
&lt;h2 id=&#34;and-yet-they-are-still-fighting&#34;&gt;
    &lt;a href=&#34;#and-yet-they-are-still-fighting&#34;&gt;
	And yet, they are still fighting
    &lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;&lt;p class=&#34;md__image&#34;&gt;
  &lt;img src=&#34;https://blog.koehntopp.info/uploads/2015/03/devops-en.077.jpg&#34; alt=&#34;&#34;  /&gt;
&lt;/p&gt;

&lt;/p&gt;
&lt;p&gt;And yet, Dev and Ops are still fighting.&lt;/p&gt;
&lt;p&gt;Why is that?&lt;/p&gt;
&lt;p&gt;&lt;p class=&#34;md__image&#34;&gt;
  &lt;img src=&#34;https://blog.koehntopp.info/uploads/2015/03/devops-en.078.jpg&#34; alt=&#34;&#34;  /&gt;
&lt;/p&gt;

&lt;/p&gt;
&lt;p&gt;Developers tend to ignore operational complexity and toil, and often build from building blocks that look like rectangles on an architecture diagram, but are actually complex systems in themselves.&lt;/p&gt;
&lt;p&gt;This is Openstack Monasca, Monitoring as a Service:&lt;/p&gt;
&lt;p&gt;&amp;ldquo;Monasca is an open-source multi-tenant, highly scalable, performant, fault-tolerant monitoring-as-a-service solution that integrates with OpenStack. It uses a REST API for high-speed metrics processing and querying, and has a streaming alarm engine and a notification engine.&amp;rdquo;&lt;/p&gt;
&lt;p&gt;&amp;ldquo;It uses a number of underlying technologies; Apache Kafka, Apache Storm, Zookeeper, MySQL, Vagrant, Dropwizard, InfluxDB and Vertica.&amp;rdquo;&lt;/p&gt;
&lt;p&gt;At which point somebody in the audience usually shouts &amp;ldquo;Bingo!&amp;rdquo;. There are a number of questions here - for example, &amp;ldquo;How do you hire for this?&amp;rdquo;.&lt;/p&gt;
&lt;p&gt;&lt;p class=&#34;md__image&#34;&gt;
  &lt;img src=&#34;https://blog.koehntopp.info/uploads/2015/03/devops-en.083.jpg&#34; alt=&#34;&#34;  /&gt;
&lt;/p&gt;

&lt;/p&gt;
&lt;p&gt;Or, looking at this Openstack Infrastructure Diagram (simplified): How do you operate this under &amp;ldquo;system behavior in failure state&amp;rdquo; as a success metric - which is how Infrastructure people think.&lt;/p&gt;
&lt;p&gt;&lt;p class=&#34;md__image&#34;&gt;
  &lt;img src=&#34;https://blog.koehntopp.info/uploads/2015/03/devops-en.087.jpg&#34; alt=&#34;&#34;  /&gt;
&lt;/p&gt;

&lt;/p&gt;
&lt;p&gt;Infrastructure people see code like this coming in, and see people who package things they have not understood, taking on dependencies they do not know, and using practices that look like automated, repeatable procedures, but aren&amp;rsquo;t.&lt;/p&gt;
&lt;p&gt;The first line installs Homebrew - &amp;ldquo;Download an unreviewed script from Github and feed it to a shell, executing random foreign commands on your system&amp;rdquo;.&lt;/p&gt;
&lt;p&gt;The second example shows a Dockerfile executing, but what looks like a build procedure is really just downloading binaries in tar files from elsewhere, unpacking and piling them on top of each other in a badly specified binary patch procedure, without caring much what is in these packages and how it is being made.&lt;/p&gt;
&lt;p&gt;The last example is part of an Openstack Puppet install, and downloads an actual operating system package, then NOT installing it, but unpacking it and copying individual unregistered files into a production system image.&lt;/p&gt;
&lt;p&gt;&lt;p class=&#34;md__image&#34;&gt;
  &lt;img src=&#34;https://blog.koehntopp.info/uploads/2015/03/devops-en.089.jpg&#34; alt=&#34;&#34;  /&gt;
&lt;/p&gt;

&lt;/p&gt;
&lt;p&gt;Or implementations of upgrade procedures with three nested loops (O(n^3) complexity), that work for l,m and n = 1 on a test laptop, but cannot possibly succeed in any production environment with significant values of l,m or n - clearly this has never seen an actual production environment.&lt;/p&gt;
&lt;p&gt;&lt;p class=&#34;md__image&#34;&gt;
  &lt;img src=&#34;https://blog.koehntopp.info/uploads/2015/03/devops-en.090.jpg&#34; alt=&#34;&#34;  /&gt;
&lt;/p&gt;

&lt;/p&gt;
&lt;p&gt;This captures the essence of this mindset, cargo culting, containerism. Abstractions packed away deep in a fragile stack, and then in production suddenly breaking, taking down the entire technology Jenga tower.&lt;/p&gt;
&lt;p&gt;&lt;p class=&#34;md__image&#34;&gt;
  &lt;img src=&#34;https://blog.koehntopp.info/uploads/2015/03/devops-en.091.jpg&#34; alt=&#34;&#34;  /&gt;
&lt;/p&gt;

&lt;/p&gt;
&lt;p&gt;Computer science is weird - it is hard, despite the fact that it is the science of zeroes and ones. Nothing individually in computer science is ever hard. It literally is as simple as Jenga or Tetris, and like these, the complexity comes from the layers.&lt;/p&gt;
&lt;p&gt;I have an exercise where I let people list the dependencies for their application going down from the business level all the way down to the silicon, and then we count layers stacked on top of each other. We usually can identify about three dozen levels of abstractions being piled on top of each other, all of them trivial or almost trivial. And that is on an isolated system, keeping the vagaries of distributed systems out of the picture.&lt;/p&gt;
&lt;p&gt;So when we think about complexity in computer science, we speak about epsilon-delta in non-linear systems with cascading dependencies: A tiny change here has catastrophic outcomes elsewhere, 20 layers up or down the stack. You add a line of code, the working set of your application no longer fits into the CPU cache of low end CPU models, and suddenly the performance difference between the same code running on a Silver or Gold Xeon model is factor 20 and nobody even knows why.&lt;/p&gt;
&lt;p&gt;&lt;p class=&#34;md__image&#34;&gt;
  &lt;img src=&#34;https://blog.koehntopp.info/uploads/2015/03/devops-en.096.jpg&#34; alt=&#34;&#34;  /&gt;
&lt;/p&gt;

&lt;/p&gt;
&lt;p&gt;This is not a new complaint. Alan Perlis famously quipped this about LISP programmers in 1982: The level of abstraction in LISP in 1982 was so high that native LISP programmers with no insight into the implementation created similar situations to the previous cache scenario, regularly.&lt;/p&gt;
&lt;p&gt;&lt;p class=&#34;md__image&#34;&gt;
  &lt;img src=&#34;https://blog.koehntopp.info/uploads/2015/03/devops-en.099.jpg&#34; alt=&#34;&#34;  /&gt;
&lt;/p&gt;

&lt;/p&gt;
&lt;p&gt;In closing: What changes?&lt;/p&gt;
&lt;p&gt;Devops means that Operations people become Infrastructure Developers. They are using the same tools that Feature Developers are using, but for a different purpose: For creating, scaling, maintaining and debugging the production environment of a project. For dealing with all the real world, failure related use-cases of a project.&lt;/p&gt;
&lt;p&gt;Devops means that the System Administrator as a job description goes away: There are only Infrastructure Developers now, or Operators - but these are people that follow instructions and will be ultimately replaced by machines soon.&lt;/p&gt;
&lt;p&gt;Devops means that as a System Administrator you have to learn the tools of a Developer, learn to automate, learn to talk to APIs, and learn how to apply Infrastructure thinking to other peoples codebases.&lt;/p&gt;
&lt;p&gt;As a Devops Engineer, or Infrastructure Developer, it is your task to keep the entire stack in mind. Applying Infrastructure thinking to this means you know how that change 20 levels down in the stack affects production on a grander scale - because somebody has to know the details and understand all the dependencies.&lt;/p&gt;
&lt;p&gt;As a Devops Engineer you also need to teach enthusiastic young people with a feature developer mindset how to &lt;a href=&#34;https://blog.koehntopp.info/2020/08/31/on-touching-candles.html&#34;&gt;touch candles&lt;/a&gt;

, how to fail safely, in order to make them actually experience a problem class, instead of just abstractly knowing about it somewhere in the back of their mind.&lt;/p&gt;
&lt;p&gt;If you do not do that, if you cannot do that, you will soon be replaced by a tiny shell script.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Der Managementansatz zum Thema Sicherheit...</title>
      <link>https://blog.koehntopp.info/2011/01/04/der-managementansatz-zum-thema-sicherheit.html</link>
      <pubDate>Tue, 04 Jan 2011 14:58:51 +0000</pubDate>
      
      <guid>https://blog.koehntopp.info/2011/01/04/der-managementansatz-zum-thema-sicherheit.html</guid>
      <description>&lt;p&gt;In der aktuellen KES findet sich der Artikel &lt;em&gt;Epische Macht&lt;/em&gt; (
&lt;a href=&#34;http://www.kes.info/aktuell/akheft/artikel1.htm&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;keine stabile URL&lt;/a&gt;

, da der
Archivzugang mit den stabilen URLs pa√üwortgesch√ºtzt und nur f√ºr Abonnenten
ist).&lt;/p&gt;
&lt;p&gt;Der Artikel konzentriert sich auf die Machtf√ºlle von Systemadministratoren,
und pr√§gt das Wort &amp;ldquo;Machtumsetzungsgeschwindigkeit&amp;rdquo; in Bezug auf
Systemadministratoren. Damit will der Autor (Stephen Feldke) darauf abheben,
da√ü Root-Arbeiter besonders schnell besonders viel Schaden gemessen in Mio
Euro/Minute anrichten k√∂nnen. Der Autor zieht Parallelen zu Prokura- und
Budget-Regelungen, bei denen man bei bestimmten Transaktionen absichtlich
mehr als eine Unterschrift f√ºr eine Entscheidung fordert, um Prozesse
k√ºnstlich zu verlangsamen und Mehr-Augen-Prinzipien zu erzwingen.&lt;/p&gt;
&lt;p&gt;Der Autor schl√§gt eine EPIS-Zertifizierung (&amp;ldquo;Extrem Privilegierte
IT-Spezialisten&amp;rdquo;) f√ºr Sysadmins vor, die in kritischen Infrastrukturen nach
BSI-Definition arbeiten (&amp;ldquo;volkswirtschaftlich oder gesellschaftlich
besonders wichtige Institutionen, die f√ºr die Sicherheit und Stabilit√§t
eines Landes essenziell sind (u. a. Gro√übanken und Energieunternehmen sowie
deren Dienstleister)&amp;rdquo;) . F√ºr EPIS soll nach den Vorstellungen des Artikels
eine &amp;ldquo;Zuverl√§ssigkeits- beziehungsweise Sicherheits√ºberpr√ºfung als
Pflichtma√ünahme der Risikovorsorge (m√∂glicherweise sogar per Gesetz)
vorgesehen&amp;rdquo; werden. &amp;ldquo;Die hierf√ºr notwendige Validierung bezieht sich dabei
weniger auf die fachliche Kompetenz als vielmehr auf die pers√∂nliche
Zuverl√§ssigkeit und Integrit√§t.&amp;rdquo;&lt;/p&gt;
&lt;p&gt;Der Artikel hat mir beim Lesen die ganze Zeit ein L√§cheln auf das Gesicht
gezaubert.&lt;/p&gt;
&lt;p&gt;IT im allgemeinen und insbesondere der Markt f√ºr f√§hige Sysadmins ist ja
sowieso schon in vielerlei Hinsicht ein Arbeitnehmermarkt. Verknappt man
diesen Bestand durch EPIS-Requirements noch weiter, ist das f√ºr die
Arbeitnehmer ein wichtiger Punkt, durch den sie ihren Wert noch weiter
steigern k√∂nnen.&lt;/p&gt;
&lt;p&gt;Andererseits ist die Ma√ünahme offensichtlich witzlos, oder der Autor lebt in
einem komplett anderen Universum als ich.&lt;/p&gt;
&lt;p&gt;In meiner Welt kenne ich Unternehmen, die gar keine Rechenzentren und
Rechner mehr haben, sondern komplett aus der Cloud laufen. In meiner Welt
versuchen Unternehmen ihre Agilit√§t zu erh√∂hen und mehrere Rollouts von Code
pro Tag zu realisieren. In meiner Welt haben Unternehmen hunderte offener
Stellen im Bereich IT. In meiner Welt versuchen Unternehmen ihren
Systembetrieb zu automatisieren und hunderte oder tausende von Rechnern
automatisch zu administrieren.&lt;/p&gt;
&lt;p&gt;In dieser Welt ist eine EPIS-Zertifizierung Augenwischerei.&lt;/p&gt;
&lt;p&gt;Sie erh√∂ht den Organisationswiderstand gegen Proze√üver√§nderungen und
schw√§cht damit die Anpassungsf√§higkeit des Unternehmens an Ver√§nderungen des
Umfeldes. Sie bringt keine me√übare Verbesserung der Sicherheit, solange man
nicht auch im Bereich der Feature-Entwickler und im Bereich der
Infrastrukturentwickler die Prozesse m√§chtig aufbl√§st - E4 bis E6 lassen
gr√º√üen und damit geht jedwede m√ºhsam erarbeitete Agilit√§t verloren.&lt;/p&gt;
&lt;p&gt;Irgendwie kommt mir da der Wind der 90er Jahre aus dem Heft entgegen. Kann
das sein?&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Wieso zehn Prozent?</title>
      <link>https://blog.koehntopp.info/2010/05/16/wieso-zehn-prozent.html</link>
      <pubDate>Sun, 16 May 2010 08:11:32 +0000</pubDate>
      
      <guid>https://blog.koehntopp.info/2010/05/16/wieso-zehn-prozent.html</guid>
      <description>&lt;p&gt;In &lt;a href=&#34;http://erichsieht.wordpress.com/2010/05/15/sicherheitsmetrik/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Sicherheitsmetrik&lt;/a&gt;


hei√üt es als Antwort auf meinen Artikel
&lt;a href=&#34;https://blog.koehntopp.info/2010/05/14/denic-erkl-rt-sich.html&#34;&gt;DENIC erkl√§rt sich&lt;/a&gt;

:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Wir IT-Akademiker forschen gerne an Fragen herum, die einen vagen
Relit√§tsbezug haben, die man aber in der Praxis pragmatisch handhabt. Nach
ein paar Jahren haben wir die L√∂sungen der Pragmatiker formal dokumentiert
und wissenschaftlich nachgewiesen, was die Kollegen immer schon wussten,
n√§mlich dass das so tats√§chlich funktioniert‚Ä¶. Die zehn Prozent sind
formal betrachtet v√∂llig willk√ºrlich gew√§hlt, tats√§chlich aber wohl ein
Erfahrungswert, der sich aus informellen Beobachtungen typischer Vorg√§nge
ergibt. So etwas w√ºrde ein Wissenschaftler nie zulassen.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Die zehn Prozent sind nat√ºrlich nicht willk√ºrlich gew√§hlt, sondern
sorgf√§ltig ermessen.&lt;/p&gt;
&lt;p&gt;Dem Ganzen liegt eine andere Anekdote zugrunde, die die Denkweise eines
Sysadmins verdeutlicht - am Ende geht es darum, Risiken f√ºr Menschen
intuitiv handhabbar zu pr√§sentieren (anstatt sie mit einem Regelwerk zu
√ºbersch√ºtten).&lt;/p&gt;
&lt;h3 id=&#34;pers√∂nliche-betroffenheit-f√ºhrt-zu-pers√∂nlicher-verantwortung&#34;&gt;
    &lt;a href=&#34;#pers%c3%b6nliche-betroffenheit-f%c3%bchrt-zu-pers%c3%b6nlicher-verantwortung&#34;&gt;
	Pers√∂nliche Betroffenheit f√ºhrt zu pers√∂nlicher Verantwortung
    &lt;/a&gt;
&lt;/h3&gt;
&lt;p&gt;web.de war eine geldreiche Arbeitsumgebung. Mit 150 Mio Euro auf der Bank
und ohne Schulden agiert eine Firma in Projekten nicht kostengetrieben,
sondern erl√∂sgetrieben.&lt;/p&gt;
&lt;p&gt;Es ist eine Umgebung, in der man Gro√ües bewirken kann, aber es ist auch eine
Umgebung, in der manche Projekteigent√ºmer und Projektleiter nachl√§ssig
werden. Das ist so, denn in so einer Umgebungs sind Kosten alleine eben kein
ausreichender Motivator, um bestehende Probleme anzugehen statt neue
Projekte zu beginnen - die Firma lebt von Velocity, also der Geschwindigkeit
der Innovation anstatt von Effizienz, denn Gewinn wird mit dem Wachstum des
Marktes gemacht statt der Konkurrenz Anteile abzunehmen (&lt;a href=&#34;http://en.wikipedia.org/wiki/Cynefin&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Cynefin
Marktreife&lt;/a&gt;

 in den Quadranten Complex
und Complicated).&lt;/p&gt;
&lt;p&gt;So kommt es, da√ü in solchen Umgebungen manchmal Systeme im Einsatz sind, die
die f√ºr den Betrieb notwendige Stabilit√§t nicht von sich aus mitbringen,
sondern bei der die Stabilit√§t durch permanente Arbeit des Operatings
erzeugt wird.&lt;/p&gt;
&lt;p&gt;Will sagen, man hat Software mit Memory Leaks oder Race Conditions oder
anderen schwer zu findenden Fehlern, die mit einer gewissen
Eintrittswahrscheinlichkeit versehen sind. Der Betrieb erkennt die mit
Sicherheit &lt;em&gt;irgendwann&lt;/em&gt; eintretende Fehlersituation vorher und behebt das
Problem durch, √§h, vorbeugende Wartung. Also durch das Herausnehmen einer
Komponente aus dem Loadbalancer und einen Neustart des betreffenden Systems
mit anschlie√üender Reintegration oder vergleichbare Ma√ünahmen.&lt;/p&gt;
&lt;p&gt;Die zur Fehlersuche und Behebung notwendigen Stunden Entwicklerzeit will
niemand gutwillig bereitstellen, da es andere laufende Projekte verz√∂gern
w√ºrde, also Velocity kosten w√ºrde. Und eine tats√§chliche Aufwandssch√§tzung
ist bei Heisenbugs sowieso immer schwierig, da der Aufwand in der Regel in
Instrumentation und Warten besteht, solange der Fehler nicht mit
vern√ºnftigem Aufwand im Labor provoizierbar ist. Man kann also nicht sagen
&amp;lsquo;Es wird circa 4 Stunden dauern, diesen Bug zu fixen&amp;rsquo;, weil man ihn
√ºberhaupt erst mal beobachten mu√ü.&lt;/p&gt;
&lt;p&gt;Wenn nun Kosten im Operating kein Instrument sind mit denen man seine
Projektleitung zur Bereitstellung von Ressourcen motivieren kann, dann ist
die erprobte Strategie der Managementmotivation im Operating eine, die ich
gerne mit &amp;ldquo;Teile die Schmerzen&amp;rdquo; beschrieben m√∂chte.&lt;/p&gt;
&lt;p&gt;Zum Beispiel setzt man den Projekteigent√ºmer auf dieselbe Alerting-Methode
wie den Sysadmin, der am Ende Sonntag nachts um 4 Uhr wegen eines Alarms die
vorbeugende Wartung durchf√ºhren mu√ü. Die Begr√ºndung ist, da√ü der
Projekteigent√ºmer bei einem System dieser Wichtigkeitsstufe ja √ºber Ausf√§lle
informiert sein mu√ü. Er mu√ü schlie√ülich bereit stehen, um als Entscheider
die notwendigen Anweisungen zu geben wenn etwas schiefgeht - so etwas
wichtiges kann man ja auf keinem Fall einem einfachen Operator √ºberlassen.&lt;/p&gt;
&lt;p&gt;Wenn wir nun also einen jungen Projektverantwortlichen haben, bei dem das
Handy Sonntag nachts um vier die Frau und das 6 Monate alte Kind weckt, dann
ist diese Person nach einigen Wochen unmittelbaren Alerting-Erlebens sehr
viel zug√§nglicher, wenn auf auf einem Montagsmeeting der Vorschlag gemacht
wird, endlich einmal eine Hand voll Entwicklerstunden in die Verbesserung
der Stabilit√§t dieses vergleichsweise wackeligen Systems zu stecken. Das
Interesse ergibt sich hier dann nicht aus den Projektkosten, sondern aus
pers√∂nlicher Betroffenheit.&lt;/p&gt;
&lt;h3 id=&#34;wieviel-risiko-ist-vertretbar&#34;&gt;
    &lt;a href=&#34;#wieviel-risiko-ist-vertretbar&#34;&gt;
	Wieviel Risiko ist vertretbar?
    &lt;/a&gt;
&lt;/h3&gt;
&lt;p&gt;Das ist derselbe Mechanismus, der auch unter den Admins selbst am Werk ist.
Sie machen Bereitschaft und sie bekommen Alarmmeldungen, Tag und Nacht.
Admins haben ein nat√ºrliches Interesse an den Schranken von Alarmen, denn es
sind diese Einstellungen der Sensitivit√§t des √úberwachungssystemen, nach
denen sich die Qualit√§t ihres Nachtschlafs und das Klima in ihren Familien
bemi√üt. Admins wollen nicht von unn√∂tigen Alarmen gest√∂rt werden, sie wollen
also keine false positives.&lt;/p&gt;
&lt;p&gt;Noch schlimmer sind aber false negatives, also Alarme die h√§tten gesendet
werden sollen, aber nicht gesendet wurden. Denn diese kosten nicht nur den
Bonus, sondern auch auf Wochen hinaus das Familien- und Arbeitsklima. In
einem funktionierenden Admin-Team - jedem funktionierenden Admin-Team -  mit
einem gut eingestellten Monitoring kann man also darauf vertrauen, da√ü
gerade eben so viele Alarme zu viel gesendet werden, da√ü die Meldungen des
Alarmierungssystems noch vertrauensw√ºrdig sind.&lt;/p&gt;
&lt;p&gt;Die Schwellwerte im System ergeben sich empirisch unter dieser Strategie:
√úberwachungssysteme werden erschaffen und messen Daten, generieren darauf
basierend Alarme - in der Regel viel zu viele Alarme.&lt;/p&gt;
&lt;p&gt;Ein gutes Admin-Team wird die meisten dieser Alarme ignorieren. Es wird
au√üerdem regelm√§√üig die ignorierten und beiseite geschobenen Alarme
auswerten, um daraufhin das Monitoring anzupassen, damit die Schwellwerte
realistischer werden. Die neuen Schwellwerte werden immer noch zu sensibel
sein, aber n√§her an realistischen Werten. Das Verfahren wird in der Regel
nicht formalisiert durchgef√ºhrt
(&lt;a href=&#34;http://en.wikipedia.org/wiki/Capability_Maturity_Model#Levels_of_the_Capability_Maturity_Model&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Capability Maturity&lt;/a&gt;


Rating 1 f√ºr den Proze√ü: &amp;lsquo;individual heroics&amp;rsquo;), ist aber im Verhalten
wahrscheinlich einem inversen TCP Slow Start √§hnlich (Man kann das nat√ºrlich
modellieren, aber mir sind keine formalen Papiere zum Thema
&amp;lsquo;Tuningalgorithmen f√ºr Monitoringsysteme&amp;rsquo; bekannt).&lt;/p&gt;
&lt;h3 id=&#34;risiken-menschengerecht-erlebbar-machen---shared-spaces-statt-regelsysteme&#34;&gt;
    &lt;a href=&#34;#risiken-menschengerecht-erlebbar-machen---shared-spaces-statt-regelsysteme&#34;&gt;
	Risiken menschengerecht erlebbar machen - Shared Spaces statt Regelsysteme
    &lt;/a&gt;
&lt;/h3&gt;
&lt;p&gt;Das Verhalten, das dem ganzen Zugrunde liegt, ist nat√ºrlich
&lt;a href=&#34;http://de.wikipedia.org/wiki/Risikokompensation&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Risikokompensation&lt;/a&gt;

 und die ist in Grenzen
&lt;a href=&#34;http://www.sciencedirect.com/science?_ob=ArticleURL&amp;amp;_udi=B6VN8-4TK2PPX-1&amp;amp;_user=10&amp;amp;_coverDate=01%2F31%2F2009&amp;amp;_rdoc=1&amp;amp;_fmt=high&amp;amp;_orig=search&amp;amp;_sort=d&amp;amp;_docanchor=&amp;amp;view=c&amp;amp;_acct=C000050221&amp;amp;_version=1&amp;amp;_urlVersion=0&amp;amp;_userid=10&amp;amp;md5=0328819c455478dbdeed463b371a7f5e&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;modellierbar&lt;/a&gt;

.&lt;/p&gt;
&lt;p&gt;Menschen versuchen, ihr Verhalten so zu optimieren, da√ü sie ein System
m√∂glichst voll &amp;lsquo;ausfahren&amp;rsquo;, seine Ressourcen also ausnutzen. Das hei√üt im
Verkehr zum Beispiel, da√ü sie ein Auto schneller fahren oder enger
√ºberholen, wenn das Auto sich sicherer anf√ºhlt oder eine bessere Lenkung
oder Bremsen bekommt. Der lenkende Mensch wird dabei versuchen, das gef√ºhlte
Risiko stabil zu halten, indem er h√∂here Wagnisse eingeht.&lt;/p&gt;
&lt;p&gt;Man kann das umgekehrt nutzen, um mehr Sicherheit zu erzeugen, indem man
Menschen Risiken sp√ºren l√§√üt und Systeme baut, die sich linear und stetig
verhalten, also um Risiken f√ºr Menschen gut vorhersagbar und erlebbar
machen. Im Verkehr nennt man dieses Konzept
&lt;a href=&#34;http://de.wikipedia.org/wiki/Shared_Space#Risikobewertung&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Shared Space&lt;/a&gt;


und man kann es auch in der IT anwenden.&lt;/p&gt;
&lt;p&gt;Shared Space funktioniert eben nicht, indem man einfach die Verkehrszeichen
in einem Ort alle abmontiert und alle B√ºrgersteige planiert. Es gibt eine
Reihe von Vorraussetzungen, die alle zusammen erf√ºllt sein m√ºssen, damit man
ein System hat, indem Menschen Risiken wahrnehmen und erkennen k√∂nnen und in
denen sie aktiv agieren, um diese zu vermeiden.&lt;/p&gt;
&lt;h4 id=&#34;visibility-und-predictability&#34;&gt;
    &lt;a href=&#34;#visibility-und-predictability&#34;&gt;
	Visibility (und Predictability)
    &lt;/a&gt;
&lt;/h4&gt;
&lt;p&gt;Eine ist zum Beispiel, da√ü man es mit einem System zutun hat, das linear
(oder logarithmisch) und stetig ist, bei dem also dem gro√üen Knall eine
Reihe von kleineren, mit zunehmendem Risiko schlimmer werdenden Warnsignalen
auftreten - Menschen machen diese Annahme implizit, auch dann, wenn sie es
mit Systemen zu tun haben, die weder linear noch stetig sind. Baut man ein
System, bei dem Totalversagen nicht vorher von harmlosen Warnsignalen
angek√ºndigt wird, oder bei dem das Versagensrisiko in einer Weise ansteigt
die von Menschen nicht intuitiv modellierbar ist, dann hat man ein System
das massenweise Leute umbringt. Die Gefahrensituation mu√ü also f√ºr den
Menschen im Vorfeld erkennbar und vorhersehrbar sein - aktive und passive
&lt;strong&gt;Visibility&lt;/strong&gt;, sehen und gesehen werden, mu√ü gegeben sein.&lt;/p&gt;
&lt;p&gt;In einem Shared Space-Verkehrsgebiet bedeutet das zum Beispiel, da√ü man
einige Kreuzungen umbauen mu√ü, damit sie einsehbar werden oder andere
Gebiete so umbauen mu√ü, da√ü die entzerrt werden, voneinander abh√§ngige
Gefahrenquellen also entkoppelt werden und so auftreten, da√ü sie als
aufeinanderfolgende separate Ereignisse abgehandelt werden, statt die
Verkehrsteilnehmer mit zu vielen um Aufmerksamkeit konkurrierenden
Situationen gleichzeitig zu √ºberfordern.&lt;/p&gt;
&lt;p&gt;In einer Produktionsumgebung in der IT bedeutet dies, da√ü man Systeme bauen
mu√ü, die &amp;lsquo;sanft&amp;rsquo; versagen und rechtzeitig vorher erkennbare Warnsignale
generieren. Und da√ü man ein Monitoring haben mu√ü, das ist der Lage ist,
solche Warnungen zu visualisieren. Am Besten auch eines, das allgemein
wahrgenommen wird - also Monitore mit Displays an wichtigen Stellen im
Betrieb.&lt;/p&gt;
&lt;h4 id=&#34;education&#34;&gt;
    &lt;a href=&#34;#education&#34;&gt;
	Education
    &lt;/a&gt;
&lt;/h4&gt;
&lt;p&gt;Eine andere Vorraussetzung ist, da√ü die Menschen in der Lage sein m√ºssen,
die Gefahrensituationen erkennen und bewerten zu k√∂nnen. Shared Spaces
funktionieren also nur in einem Umfeld, in dem es eine passende
&lt;strong&gt;Ausbildung&lt;/strong&gt; gibt.&lt;/p&gt;
&lt;p&gt;Im Verkehr bedeutet das, da√ü Verkehrserziehung, Fahrausbildung und Awareness
auf dem richtigen Niveau sein m√ºssen, damit den Verkehrsteilnehmern das
erwartete Verhalten, Handlungsm√∂glichkeiten und typisches Verhaltensfehler
bekannt sind, so da√ü sie mit vergleichbaren Erwartungen und gut trainierten
Sicherheitsreflexen in den Verkehr gehen.&lt;/p&gt;
&lt;p&gt;In einer Produktionsumgebung bedeutet das, da√ü den verantwortlichen
Mitarbeitern die Systeme, die sie fahren sollen, bekannt sind, soda√ü sie ein
Modell des Systems im Kopf haben, das den betrieblichen Realit√§ten
entspricht, da√ü ihnen Diagnose- und Eingriffsm√∂glichkeiten bekannt sind und
da√ü sie Zugriff auf Eskalationsm√∂glichkeiten in der Systementwicklung haben,
wenn ein Fehler die M√∂glichkeiten des Operatings √ºbersteigt.&lt;/p&gt;
&lt;h4 id=&#34;empowerment&#34;&gt;
    &lt;a href=&#34;#empowerment&#34;&gt;
	Empowerment
    &lt;/a&gt;
&lt;/h4&gt;
&lt;p&gt;Und die dritte Vorraussetzung ist, da√ü die Menschen in einem System die
M√∂glichkeit haben, Verantwortung zu √ºbernehmen und ad-hoc vor Ort Regeln
aufzustellen oder Situationen verbindlich zu kl√§ren - das ist
&lt;strong&gt;Erm√§chtigung&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Im Verkehr bedeutet das, da√ü man Zeichen entfernt, die Entscheidungen des
Autofahrers √ºberstimmen. Ampeln und Vorfahrtszeichen kommen weg, denn sie
bestimmen √ºber den Kopf des Fahrzeugf√ºhrers hinweg &amp;lsquo;Du mu√üt halten&amp;rsquo; oder &amp;lsquo;Du
kannst fahren&amp;rsquo;. Stattdessen ist der Fahrzeugf√ºhrer jetzt verantwortlich,
sein Fahrzeug ber√ºhrungsfrei durch den Verkehr zu bewegen und er mu√ü jede
Halte- und Fahrentscheidung selbst und in letzter Verantwortung treffen. Das
kann er, denn er hat die notwendige Visibility - er wird gesehen und kann
sehen. Und er hat die notwendige Ausbildung.&lt;/p&gt;
&lt;p&gt;In einer Produktionsumgebung in der IT sieht es genau so aus - statt dem
Admins und Entwicklern einen Kubikmeter ITIL V3 Handbuch an den Kopf zu
werfen und zu sagen: &amp;ldquo;Implementiert das!&amp;rdquo; gibt man ihnen die Verantwortung
f√ºr den Betrieb und sagt: &amp;ldquo;Haltet das am Laufen! Was braucht Ihr dazu?&amp;rdquo;.
Mitarbeiter mit der passenden Ausbildung und der passenden Visibility sind
dazu in der Lage, das zu regeln, wenn man sie entsprechend erm√§chtigt.&lt;/p&gt;
&lt;p&gt;Die nat√ºrliche Risikoanpassung wird dann dazu f√ºhren, da√ü sie selbst die f√ºr
den Betrieb notwendigen Regeln und Absprachen ad-hoc treffen.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>DENIC erkl√§rt sich</title>
      <link>https://blog.koehntopp.info/2010/05/14/denic-erkl-rt-sich.html</link>
      <pubDate>Fri, 14 May 2010 15:14:05 +0000</pubDate>
      
      <guid>https://blog.koehntopp.info/2010/05/14/denic-erkl-rt-sich.html</guid>
      <description>&lt;p&gt;Gestern ab halb zwei ging es los: Immer mehr DE-Domains waren nicht mehr
erreichbar. Schlimmer noch, anstatt keine Antwort zu liefern lieferten die
Nameserver f√ºr die Domain &amp;ldquo;de&amp;rdquo; die Antwort &amp;lsquo;Diese Domain gibt es nicht!&amp;rsquo;.
Das bedeutete eine ganze Reihe von Problemen - zum Beispiel ging Mail an
diese Domains mit &amp;lsquo;Unzustellbar wegen unbekannter Domain&amp;rsquo; an den Absender
zur√ºck, anstatt bis zum Ende der St√∂rung liegen zu bleiben.&lt;/p&gt;
&lt;p&gt;Was ging schief? In einer Mail auf
&lt;a href=&#34;http://www.denic.de/denic-im-dialog/mailinglisten/public-l.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;public-l&lt;/a&gt;

 hat die DENIC-Pressestelle
&lt;a href=&#34;http://www.denic.de/denic-im-dialog/mailinglisten/public-l.html?url=msg04454.xml&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;eine Erkl√§rung ver√∂ffentlicht&lt;/a&gt;

:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Hintergrund daf√ºr war, dass im Rahmen der regelm√§√üigen 2-st√ºndigen
Aktualisierung der Nameservicedaten auf 12 der 16 Servicestandorte durch
einen unterbrochenen Kopiervorgang die Verteilung einer nicht
vollst√§ndigen Aktualisierung (sog. Zonendatei) angesto√üen wurde&amp;hellip;.&lt;/p&gt;
&lt;p&gt;Zwar sollte auch dieser Vorgang abgesichert sein, der
Sicherungsmechanismus hat den Fehler allerdings nicht korrekt ausgewertet,
so dass im Effekt der Kopierfehler nicht entdeckt und der
Weiterverarbeitungsprozess nicht angehalten wurde.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Eine Zone ist DNS-Speak f√ºr eine Konfigurationsdatei f√ºr einen DNS-Server
und enth√§lt in der Regel die Daten einer Domain. Die Zonendatei f√ºr DE ist
nun wie man sich leicht vorstellen kann besonders gro√ü, da sie die
Konfigurations- und Delegationsdaten f√ºr alle DE-Domains enth√§lt. Sie wird
aus einer Datenbank neu generiert und dann an die Nameserver verteilt, die
die DE-Domain betreiben. Dieser Verteilvorgang wurde nach √úbertragung von
ca. einem Drittel der Daten unterbrochen und das Checkscript hat auf den
Fehler nicht korrekt reagiert und die Verarbeitung der Datei nicht
abgebrochen.&lt;/p&gt;
&lt;p&gt;In einem fr√ºheren Leben habe ich bei einem Kieler Provider gearbeitet und
auch dort hatten wir eine Reihe von Scripten, die Konfigurationsdateien aus
Datenbanken generiert haben. Neben anderen Integrit√§tstests hatte wir in
diesen Scripten in der Regel auch eine Pr√ºfung drin, die festgestellt hat,
wie sehr sich die Anzahl der Datens√§tze im Vergleich zum vorhergehenden Run
ge√§ndert hatte. Wenn die Fluktuation bei mehr als 10% lag, hat das Script
die Datei &lt;strong&gt;neben&lt;/strong&gt; der alten Datei installiert, aber nicht live geschaltet,
sondern eine Mail an die Admins geschickt, damit die sich das Ding mal
ansehen und es manuell live nehmen. Das hat uns mehr als einmal den Hintern
gerettet.&lt;/p&gt;
&lt;p&gt;Solche Sicherungen kann ich jedem Scripter von Admin-Diensten nur empfehlen!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>The Clue Bat</title>
      <link>https://blog.koehntopp.info/2008/09/18/the-clue-bat.html</link>
      <pubDate>Thu, 18 Sep 2008 10:10:55 +0000</pubDate>
      
      <guid>https://blog.koehntopp.info/2008/09/18/the-clue-bat.html</guid>
      <description>&lt;p&gt;&lt;p class=&#34;md__image&#34;&gt;
  &lt;img src=&#34;https://blog.koehntopp.info/uploads/helpdesk_duty.jpg&#34; alt=&#34;&#34;  /&gt;
&lt;/p&gt;

&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Scenes from the Amsterdam Office: Dennis, the maintainer of the local
&lt;a href=&#34;https://en.wikipedia.org/wiki/BOFH&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;BOFH&lt;/a&gt;


mailing list, performing helpdesk duty.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;p class=&#34;md__image&#34;&gt;
  &lt;img src=&#34;https://blog.koehntopp.info/uploads/support_tool.jpg&#34; alt=&#34;&#34;  /&gt;
&lt;/p&gt;

&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Support Tool&lt;/em&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Wieviel Load darf es denn sein?</title>
      <link>https://blog.koehntopp.info/2005/06/24/wieviel-load-darf-es-denn-sein.html</link>
      <pubDate>Fri, 24 Jun 2005 08:47:16 +0000</pubDate>
      
      <guid>https://blog.koehntopp.info/2005/06/24/wieviel-load-darf-es-denn-sein.html</guid>
      <description>&lt;p&gt;&lt;p class=&#34;md__image&#34;&gt;
  &lt;img src=&#34;https://blog.koehntopp.info/uploads/load-beispiel.png&#34; alt=&#34;&#34;  /&gt;
&lt;/p&gt;

&lt;/p&gt;
&lt;p&gt;In
&lt;a href=&#34;http://webhostingtech.de/2106/677.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Wann ist die Serverload zu hoch?&lt;/a&gt;


fragt Reimer:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Die Frage, ob ein Serverload von n zu hoch sei, h√∂re ich h√§ufig.
Die Antworten sind jedoch ebenso unterschiedlich.
So wird h√§ufig die Zahl 1,00 als normaler Wert gehandelt, aber genau so fallen Zahlen wie 5,00 und 8,00 etc.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;In Linux und Unix gibt es einige Zahlen, mit denen man die CPU-Auslastung des Systems ausdr√ºcken kann.
Da ist erst einmal die momentane CPU-Auslastung in Prozent, wie sie von &lt;code&gt;top&lt;/code&gt; und anderen Tools angezeigt wird:&lt;/p&gt;
&lt;p&gt;Diese Zahl gibt detailliert Auskunft dar√ºber, wie die CPU &lt;em&gt;in diesem Moment&lt;/em&gt; ihre Zeit verbringt:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-console&#34; data-lang=&#34;console&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;go&#34;&gt;top - 10:49:36 up 11:53,  4 users,  load average: 2.71, 2.33, 2.20
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;go&#34;&gt;Tasks: 109 total,   3 running, 106 sleeping,   0 stopped,   0 zombie
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;go&#34;&gt;Cpu(s): 31.4% us,  8.9% sy,  0.0% ni, 47.5% id,  0.0% wa, 10.2% hi,  2.0% si
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Die Zahl &lt;code&gt;id&lt;/code&gt; ist die Idle-Zeit, die ungenutzte Zeit der CPU.
Die anderen Zahlen sagen detailliert, wie die CPU ihre Zeit verbringt: &lt;code&gt;us&lt;/code&gt; (User-Time) ist Zeit, die im Programm verbracht wird, und &lt;code&gt;sy&lt;/code&gt; (System-Time) die Zeit, die vom Kernel im Auftrag dieses Programmes verbraucht wird.
&lt;code&gt;ni&lt;/code&gt; (Nice-Time) ist Zeit, die von herunter priorisierten Prozessen sinnvoll verbraucht wird.
Alle drei Zeiten zusammen sind sinnvoll genutzte Arbeitszeit.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;wa&lt;/code&gt; (Wait-Time) ist I/O-Wait, also Zeit, die der Rechner auf das Eintreffen von Daten von der Platte oder dem Netzwerk wartet.
&lt;code&gt;hi&lt;/code&gt; und &lt;code&gt;si&lt;/code&gt; (Hard- und Soft Interrupt) sind Zeiten, die das System mit der Bearbeitung von Interrupts zubringt, also in Ger√§tetreibern und Timer-Routinen.&lt;/p&gt;
&lt;p&gt;Die Loadzahlen geben die mittlere L√§nge der Run-Queue √ºber eine Minute (erste Zahl), f√ºnf Minuten (zweite Zahl) und 15 Minuten (dritte Zahl) an.
Die Zahl sagt, wie viele Prozessoren das System im Schnitt auslasten k√∂nnte.
Wenn also die Load 1 ist, ist ein Einprozessorsystem so in etwa ausgelastet, eine Enterprise 10000 mit 64 CPUs in einer Domain ist bei einer Load von 64 gut ausgelastet.&lt;/p&gt;
&lt;p&gt;Die Load auf meinem System ist derzeit so:&lt;/p&gt;
&lt;p&gt;&lt;p class=&#34;md__image&#34;&gt;
  &lt;img src=&#34;https://blog.koehntopp.info/uploads/load-beispiel.png&#34; alt=&#34;&#34;  /&gt;
&lt;/p&gt;

&lt;/p&gt;
&lt;p&gt;F√ºr Auslastungsabsch√§tzungen ist die blaue Fl√§che aussagekr√§ftig, denn sie stellt die 15 Minuten-Load dar.
Diese Zahl ist relativ unempfindlich gegen lokale Lastspitzen und daher ein besseres Ma√ü f√ºr die Auslastung (im Gegensatz zur Elastizit√§t) des Systems.
Meine Maschine l√§uft derzeit tags√ºber mit einer Load von ca. 0.8, ist also mit einem Prozessor zu etwa 80¬†% voll.
Zu einzelnen Zeitpunkten (nachts um 4:15 Uhr, wenn das News-Expire l√§uft), wird die Ideal-Last von 1 deutlich √ºberschritten.
Das ist zu diesem Zeitpunkt aber nicht schlimm.&lt;/p&gt;
&lt;p&gt;Die Spitzenlasten (rote Kurve: 1 Minuten-Load, und davon das Maximum) halten sich au√üer um 4:15 Uhr im Rahmen, die Maschine kommt nicht nennenswert √ºber Load 2 hinaus.
Die Kiste hat also nicht mehr allzu viel Reserven, ist aber auch noch nicht √ºberlastet.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Neu auf einem fremden System</title>
      <link>https://blog.koehntopp.info/2000/04/14/neu-auf-einem-fremden-system.html</link>
      <pubDate>Fri, 14 Apr 2000 09:00:00 +0000</pubDate>
      
      <guid>https://blog.koehntopp.info/2000/04/14/neu-auf-einem-fremden-system.html</guid>
      <description>&lt;p&gt;Dies ist eine aktualisierte Version der Schulung ‚ÄûUnix Systemsicherheit‚Äú, die ich vor einiger Zeit schon einmal gehalten habe.
Der Schwerpunkt dieser Schulung hat sich etwas zu den Grundlagen hin verschoben:
Es geht diesmal weniger um Unix Systemsicherheit als um die typische Situation der Consultants und Bereitschaften:&lt;/p&gt;
&lt;p&gt;Man kommt an eine neue Maschine und muss sich erst einmal zurechtfinden.&lt;/p&gt;
&lt;h1 id=&#34;neu-auf-einem-fremden-system&#34;&gt;
    &lt;a href=&#34;#neu-auf-einem-fremden-system&#34;&gt;
	Neu auf einem fremden System
    &lt;/a&gt;
&lt;/h1&gt;
&lt;p&gt;&lt;p class=&#34;md__image&#34;&gt;
  &lt;img src=&#34;https://blog.koehntopp.info/uploads/2000/04/neu-system-001.jpg&#34; alt=&#34;&#34;  /&gt;
&lt;/p&gt;

&lt;/p&gt;
&lt;p&gt;Orientierung:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Typ und Ausstattung der Maschine
&lt;ul&gt;
&lt;li&gt;Prozessor, Festplatten, andere Hardware&lt;/li&gt;
&lt;li&gt;Speichersituation, historische und aktuelle Lastdaten&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Netzwerk und Netzwerkumfeld der Maschine&lt;/li&gt;
&lt;li&gt;IP-Adressen, Routing
&lt;ul&gt;
&lt;li&gt;Welche Name-Services in welcher Reihenfolge, welche Server werden verwendet?&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Was l√§uft, was soll laufen?
&lt;ul&gt;
&lt;li&gt;Was ist installiert?&lt;/li&gt;
&lt;li&gt;tats√§chlich laufende Subsysteme vs. konfigurierte Subsysteme&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Wir sind neu auf einem fremden System und loggen uns zum ersten Mal ein.
Wie k√∂nnen wir uns zurechtfinden? Was wollen wir √ºberhaupt wissen?&lt;/p&gt;
&lt;p&gt;Die Maschine selbst ist nach Hardware, Speicher, Platten und Netzwerk zu beurteilen.
Die Netzwerkumgebung der Maschine ist einzusch√§tzen.
Die auf der Maschine installierten Systemdienste sind einzusch√§tzen und zu beurteilen.
Es muss ein Soll/Ist-Abgleich stattfinden.&lt;/p&gt;
&lt;p&gt;Ausgehend von diesen Daten kann die Arbeit auf der Maschine beginnen:&lt;/p&gt;
&lt;p&gt;Die Maschine kann f√ºr ihre Aufgabe angepasst werden (Hardware- oder Softwareinstallation durch Consulting), bzw. die Fehlersuche kann beginnen (Alarmruf f√ºr die Bereitschaft).&lt;/p&gt;
&lt;h1 id=&#34;typ-und-ausstattung-der-maschine&#34;&gt;
    &lt;a href=&#34;#typ-und-ausstattung-der-maschine&#34;&gt;
	Typ und Ausstattung der Maschine
    &lt;/a&gt;
&lt;/h1&gt;
&lt;p&gt;&lt;p class=&#34;md__image&#34;&gt;
  &lt;img src=&#34;https://blog.koehntopp.info/uploads/2000/04/neu-system-002.jpg&#34; alt=&#34;&#34;  /&gt;
&lt;/p&gt;

&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Was f√ºr Hardware ist das hier?&lt;/li&gt;
&lt;li&gt;Was ist in der Maschine eingebaut?&lt;/li&gt;
&lt;li&gt;Wie lange ist die Hardware schon &amp;ldquo;up&amp;rdquo;?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Erster Handgriff: &lt;code&gt;uname -a&lt;/code&gt;.
Weitere Aktionen systemspezfisch.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Linux: &lt;code&gt;lscpu&lt;/code&gt;, &lt;code&gt;free&lt;/code&gt;, &lt;code&gt;df -Th&lt;/code&gt;, &lt;code&gt;lspci&lt;/code&gt;, &lt;code&gt;lsusb&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Solaris: &lt;code&gt;prtconf -v&lt;/code&gt;, &lt;code&gt;psrinfo -v&lt;/code&gt;, &lt;code&gt;/usr/platform/$(uname -m)/sbin/prtdiag&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Uptime und Load: &lt;code&gt;w&lt;/code&gt;, &lt;code&gt;uptime -w&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;F√ºr uns meist: Sparc/Solaris oder Intel/Linux.
Bei einigen Kunden auch PPC/AIX oder Intel/SCO.
√Ñu√üerst wenige Kunden mit HP oder Digital Hardware.&lt;/p&gt;
&lt;p&gt;Peilung des Maschinentyps (mit &lt;code&gt;uname -a&lt;/code&gt;) und der eingebauten Hardware.
In Solaris mit den drei Kommandos &lt;code&gt;prtconf&lt;/code&gt;, &lt;code&gt;psrinfo&lt;/code&gt; und &lt;code&gt;prtdiag&lt;/code&gt;.
In Linux mit &lt;code&gt;lscpu&lt;/code&gt;, &lt;code&gt;lspci&lt;/code&gt; oder indem man manuell durch &lt;code&gt;/proc&lt;/code&gt; turnt.&lt;/p&gt;
&lt;p&gt;Peilung der Systemauslastung und der anwesenden Benutzer:
Neben &lt;code&gt;w&lt;/code&gt; und &lt;code&gt;uptime&lt;/code&gt; einmal die Proze√üliste ansehen (&lt;code&gt;ps -ef&lt;/code&gt;, &lt;code&gt;ps axuwww&lt;/code&gt;) und die Systemlast checken (&lt;code&gt;iostat&lt;/code&gt;, &lt;code&gt;vmstat&lt;/code&gt;).&lt;/p&gt;
&lt;h1 id=&#34;speicher-und-last&#34;&gt;
    &lt;a href=&#34;#speicher-und-last&#34;&gt;
	Speicher und Last
    &lt;/a&gt;
&lt;/h1&gt;
&lt;p&gt;&lt;p class=&#34;md__image&#34;&gt;
  &lt;img src=&#34;https://blog.koehntopp.info/uploads/2000/04/neu-system-003.jpg&#34; alt=&#34;&#34;  /&gt;
&lt;/p&gt;

&lt;/p&gt;
&lt;p&gt;Virtueller Speicher und seine Auslastung:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Linux: &lt;code&gt;free&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Solaris: &lt;code&gt;swap -l&lt;/code&gt;, &lt;code&gt;swap -s&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Wenn Accounting &amp;ldquo;up&amp;rdquo; ist (Solaris): &lt;code&gt;sar&lt;/code&gt;, &lt;code&gt;sar -r&lt;/code&gt; (freeswap), &lt;code&gt;sar -w&lt;/code&gt; (paging).&lt;/li&gt;
&lt;li&gt;In Linux (Suse 6.4): &lt;code&gt;sa&lt;/code&gt; aus dem Paket &lt;code&gt;ap1/acct.rpm&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Der weitaus gr√∂√üte Teil aller Lastprobleme sind Speicherprobleme (zuwenig RAM, zu kleiner Swap).
Zweith√§ufigstes Problem ist fehlende I/O-Kapazit√§t.
Fehlende CPU-Kapazit√§t ist fast niemals das Problem.&lt;/p&gt;
&lt;p&gt;Erst messen, dann nachdenken, dann handeln (OODA loop &amp;ndash; Observe, Orient, Decide, Act).
Optimierungen ohne genaue Messungen und Kenntnis des tats√§chlichen Problems sind Verschwendung der durch den Kunden bezahlten Arbeitszeit.
Punktmessungen k√∂nnen hilfreich sein, aber ein Wochenlastprofil ist sehr viel wertvoller (hier &lt;code&gt;sar&lt;/code&gt;-Beispiele von &lt;code&gt;boss&lt;/code&gt; und &lt;code&gt;prime&lt;/code&gt; bringen).&lt;/p&gt;
&lt;h1 id=&#34;platten&#34;&gt;
    &lt;a href=&#34;#platten&#34;&gt;
	Platten
    &lt;/a&gt;
&lt;/h1&gt;
&lt;p&gt;&lt;p class=&#34;md__image&#34;&gt;
  &lt;img src=&#34;https://blog.koehntopp.info/uploads/2000/04/neu-system-004.jpg&#34; alt=&#34;&#34;  /&gt;
&lt;/p&gt;

&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Logical Volume Management?&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Welches System?&lt;/li&gt;
&lt;li&gt;Welche Zuordnung?&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Quota?&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;/etc/vfstab&lt;/code&gt;, &lt;code&gt;/etc/fstab&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Solaris (SDS):&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Ger√§tenamen&lt;/li&gt;
&lt;li&gt;metastat&lt;/li&gt;
&lt;li&gt;format&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Linux:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Ger√§tenamen&lt;/li&gt;
&lt;li&gt;fdisk&lt;/li&gt;
&lt;li&gt;&lt;code&gt;raidtool.rpm&lt;/code&gt; als Nachfolger von &lt;code&gt;md-tools&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;/etc/raidtab&lt;/code&gt;, &lt;code&gt;raid.conf&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;df&lt;/code&gt;, &lt;code&gt;du&lt;/code&gt;, &lt;code&gt;mount&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Quota-Tools&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Vergleiche die sichtbaren Partitionen mit der durch das Hardware-Inventory angezeigten vorhandenen Hardware.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Sind alle Platten partitioniert und eingebunden?&lt;/li&gt;
&lt;li&gt;Ist die gezeigte Aufteilung sinnvoll gew√§hlt f√ºr die Aufgabe der Maschine?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Pr√ºfe auch:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Verteilung der Partitionen nach Auslastung auf Spindeln&lt;/li&gt;
&lt;li&gt;Verteilung der Partitionen √ºber Platten und Controller nach Ausfallgesichtspunkten?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Welche RAID-Level f√ºr welche Aufgabe&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Wir verwenden fast √ºberall RAID 0+1 (Solaris SDS).&lt;/li&gt;
&lt;li&gt;Linux-RAID (a la Suse) derzeit nur eingeschr√§nkt n√ºtzlich.
&lt;ul&gt;
&lt;li&gt;Lange Startzeit.&lt;/li&gt;
&lt;li&gt;Rootplatte, Swap-Partition.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Pr√ºfe auch:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Platzproblem oder Quota-Problem?&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;netzwerk-und-netzwerknachbarschaft&#34;&gt;
    &lt;a href=&#34;#netzwerk-und-netzwerknachbarschaft&#34;&gt;
	Netzwerk und Netzwerknachbarschaft
    &lt;/a&gt;
&lt;/h1&gt;
&lt;p&gt;&lt;p class=&#34;md__image&#34;&gt;
  &lt;img src=&#34;https://blog.koehntopp.info/uploads/2000/04/neu-system-005.jpg&#34; alt=&#34;&#34;  /&gt;
&lt;/p&gt;

&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;√úbersicht √ºber Interfaces und Routen&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;-n&lt;/code&gt; Option verwenden&lt;/li&gt;
&lt;li&gt;Woher kommen die Routen?&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Weitere Analysetools:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ping&lt;/li&gt;
&lt;li&gt;tcpdump&lt;/li&gt;
&lt;li&gt;snoop&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Netzwerkinterfaces: &lt;code&gt;ifconfig -a&lt;/code&gt;, &lt;code&gt;netstat -i&lt;/code&gt;, &lt;code&gt;netstat -s&lt;/code&gt;, &lt;code&gt;netstat -m&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Routen: &lt;code&gt;netstat -rn&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Schicht 2-3 Bindungen: &lt;code&gt;arp -a&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Welche Interfaces und welche Routen werden tats√§chlich wie oft verwendet?
Woher kommen die Routen?&lt;/p&gt;
&lt;p&gt;Viele Kunden haben ein kaputtes Netzwerkonzept (d.h. keines) und setzen Routen eventuell manuell. Probleme sind vorprogrammiert.&lt;/p&gt;
&lt;p&gt;Andere Kunden haben nur Default-Routen und bekommen differenzierte Routen nur √ºber ICMP Redirect. Ebenfalls problematisch (Effizenz, Security).&lt;/p&gt;
&lt;h1 id=&#34;name-resolution&#34;&gt;
    &lt;a href=&#34;#name-resolution&#34;&gt;
	Name Resolution
    &lt;/a&gt;
&lt;/h1&gt;
&lt;p&gt;&lt;p class=&#34;md__image&#34;&gt;
  &lt;img src=&#34;https://blog.koehntopp.info/uploads/2000/04/neu-system-006.jpg&#34; alt=&#34;&#34;  /&gt;
&lt;/p&gt;

&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Welche Namensdienste werden verwendet?&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Welche Server werden verwendet?&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Wie ist das Verhalten im Fehlerfall?&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Ausfall&lt;/li&gt;
&lt;li&gt;Angriff&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;/etc/nsswitch.conf&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Files, DNS/Bind, NIS/NIS+, LDAP, Exoten&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Falls DNS: &lt;code&gt;/etc/resolv.conf&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Falls NIS: &lt;code&gt;ypwhich&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Woher kommen die Namen, welcher Dienst wird verwendet?&lt;/p&gt;
&lt;p&gt;Oft lokale Hostdateien -&amp;gt; Probleme! Im besten Fall DNS. Dann dort die Zone ansehen und Netzstruktur und Zonengr√∂√üe absch√§tzen.&lt;/p&gt;
&lt;p&gt;Welche Abh√§ngigkeiten existieren zwischen den Servern?&lt;/p&gt;
&lt;p&gt;Ausfall- und Bootszenarien: Was ist, wenn der DNS-, der Time- oder der NIS-Server nicht da sind? Gibt es NFS-Platten, auf die die lokale Maschine angewiesen ist?&lt;/p&gt;
&lt;p&gt;Security: Wer macht was in wessen Auftrag? Wer kontrolliert? Wird die Konfiguration manuell gepflegt oder existieren Frontends? Welche Dokumentationsprozeduren existieren?&lt;/p&gt;
&lt;h1 id=&#34;netzwerkdienste&#34;&gt;
    &lt;a href=&#34;#netzwerkdienste&#34;&gt;
	Netzwerkdienste
    &lt;/a&gt;
&lt;/h1&gt;
&lt;p&gt;&lt;p class=&#34;md__image&#34;&gt;
  &lt;img src=&#34;https://blog.koehntopp.info/uploads/2000/04/neu-system-007.jpg&#34; alt=&#34;&#34;  /&gt;
&lt;/p&gt;

&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Welche Netzwerkdienste werden erbracht?&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Pr√ºfe neben &lt;code&gt;inetd&lt;/code&gt; auch persistenten Server.&lt;/li&gt;
&lt;li&gt;Pr√ºfe auf Vorhandensein von Sicherheitsmechanismen&lt;/li&gt;
&lt;li&gt;Pr√ºfe Verhalten im Falle von Ausf√§llen, etwa Firewall-Versagen&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Wie begr√ºnden sich diese Dienste?&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Welche Sicherheit bieten diese Dienste?&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;/etc/inetd.conf&lt;/code&gt;, &lt;code&gt;/etc/hosts.allow&lt;/code&gt;, &lt;code&gt;/etc/hosts.deny&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Sonderf√§lle f√ºr das jeweilige System&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Todesfallen bei AIX: Import/Exporttools f√ºr &lt;code&gt;inetd.conf&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Todesfallen bei HP/UX: &lt;code&gt;/etc/inetd.sec&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;rpcinfo -p&lt;/code&gt;, &lt;code&gt;showmount -e&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;nmap&lt;/code&gt;!&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Vergleiche &lt;code&gt;inetd.conf&lt;/code&gt; und Startscripte mit &lt;code&gt;netstat -an&lt;/code&gt;.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Consulting: Viele verstorbene Pflegef√§lle wegen manuell gestarteter Dienste, die in keiner Konfigurationsdatei auftauchen.&lt;/li&gt;
&lt;li&gt;Bereitschaft: Umgekehrtes Szenario. Alarm wurde wegen verschwundenem Server ausgel√∂st.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Sicherheitsanalyse wieder:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Wieder technische und organisatorische Prozesse synchronisieren und abgleichen:
&lt;ul&gt;
&lt;li&gt;Was tun die Maschinen?&lt;/li&gt;
&lt;li&gt;Wer entscheidet das? Wie begr√ºnden sich die Dienste?&lt;/li&gt;
&lt;li&gt;Wer dokumentiert und pr√ºft das?&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Vergleiche Prozeduren bei uns im Haus:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ISP-Betrieb plant und deployed.&lt;/li&gt;
&lt;li&gt;Operating betreibt nach Doku vom ISP-Betrieb, Operating √ºberwacht und alarmiert die Bereitschaft. Auch diese operiert mit dieser Doku.&lt;/li&gt;
&lt;li&gt;Konfigurationsgenerierung meist automatisch durch die Backends der KundenDB -&amp;gt; automatische Dokumentation und Abrechnung.&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;welche-verzeichnisse-werden-exportiert&#34;&gt;
    &lt;a href=&#34;#welche-verzeichnisse-werden-exportiert&#34;&gt;
	Welche Verzeichnisse werden exportiert?
    &lt;/a&gt;
&lt;/h1&gt;
&lt;p&gt;&lt;p class=&#34;md__image&#34;&gt;
  &lt;img src=&#34;https://blog.koehntopp.info/uploads/2000/04/neu-system-008.jpg&#34; alt=&#34;&#34;  /&gt;
&lt;/p&gt;

&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;H√§ufige Panne:
&lt;ul&gt;
&lt;li&gt;Verzeichnisse werden ungewollt exportiert&lt;/li&gt;
&lt;li&gt;Rechner importiert Verzeichnisse und h√§ngt wegen Abh√§ngigkeit vom Server&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Automounter?
&lt;ul&gt;
&lt;li&gt;Mit NIS/NIS+?&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Samba?
&lt;ul&gt;
&lt;li&gt;Klartextpa√üworte?&lt;/li&gt;
&lt;li&gt;Public Shares?&lt;/li&gt;
&lt;li&gt;Logfiles?&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-console&#34; data-lang=&#34;console&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;gp&#34;&gt;$&lt;/span&gt; showmount -e
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;gp&#34;&gt;$&lt;/span&gt; kshowmount -e
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;gp&#34;&gt;$&lt;/span&gt; share
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;gp&#34;&gt;$&lt;/span&gt; vi /etc/exports&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; vi  /etc/dfs/dfstab
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;gp&#34;&gt;$&lt;/span&gt; vi /etc/auto.master&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; vi /etc/auto.homel vi /etc/auto.misc
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;gp&#34;&gt;$&lt;/span&gt; vi smb.conf&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; smbclient
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Einschl√§gige Beispielserver drau√üen zeigen.&lt;/p&gt;
&lt;p&gt;Wir wollen nicht so enden wie die! Mehrfach gestaffelte Sicherheit durch&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;automatisch generierte Konfigurationen mit Sicherheitssperren&lt;/li&gt;
&lt;li&gt;Dienstsperrungen f√ºr Au√üen durch &lt;code&gt;tcpwrapper&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Portsperrung und Alamierung √ºber die Firewall und das Operating&lt;/li&gt;
&lt;li&gt;Logauswertung (Usagelog, Wrapper-Protokoll, Firewall-Protokoll) durch
&lt;ul&gt;
&lt;li&gt;Abrechnung (KundenDB), Alarm bei Diensten mit fehlendem technischem Objekt in der KundenDB&lt;/li&gt;
&lt;li&gt;Operating (Wrapper, Firewall), Alarm bei Attack Patterns&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Einschl√§gige Selbstmordkonfigurationen zeigen.&lt;/p&gt;
&lt;h1 id=&#34;was-ist-installiert&#34;&gt;
    &lt;a href=&#34;#was-ist-installiert&#34;&gt;
	Was ist installiert?
    &lt;/a&gt;
&lt;/h1&gt;
&lt;p&gt;&lt;p class=&#34;md__image&#34;&gt;
  &lt;img src=&#34;https://blog.koehntopp.info/uploads/2000/04/neu-system-009.jpg&#34; alt=&#34;&#34;  /&gt;
&lt;/p&gt;

&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Welche Pakete und Programme sind installiert?&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;In welcher Version?&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Installation validieren?&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&amp;ldquo;set permissions&amp;rdquo; und &amp;ldquo;check optionen&amp;rdquo;&lt;/li&gt;
&lt;li&gt;tripwire?&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Solaris: &lt;code&gt;pkginfo&lt;/code&gt;, &lt;code&gt;/var/sadm/install/contents&lt;/code&gt; (Reihenfolge!)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Linux: &lt;code&gt;rpm -qa&lt;/code&gt;, &lt;code&gt;rpm -qi &amp;lt;paket&amp;gt;&lt;/code&gt;, &lt;code&gt;rpm -ql &amp;lt;paket&amp;gt;&lt;/code&gt;, &lt;code&gt;rpm -qlc &amp;lt;paket&amp;gt;&lt;/code&gt;, &lt;code&gt;rpm -qld &amp;lt;paket&amp;gt;&lt;/code&gt;, &lt;code&gt;rpm -qf &amp;lt;datei&amp;gt;&lt;/code&gt;, &lt;code&gt;rpm -qp &amp;lt;datei.rpm&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Solaris Paketarchiv (‚ÄûNetUSE Distribution‚Äú) zeigen&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Consulting-CDROM, wird auch an Kunden verkauft&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Keine Installation ohne Paket&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Verweis auf Paketschulung&lt;/li&gt;
&lt;li&gt;Kein Paket -&amp;gt; automatische Konfigurationsgenerierung aus Installserver oder KundenDB macht die Verzeichnisse m√∂glicherweise platt.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Kommando√§quivalenzen Linux/Solaris&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Verweis auf Rootkits&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Rootkits ersetzen wichtige Systemprogramme,&lt;/li&gt;
&lt;li&gt;in Folge bel√ºgt die Maschine den Operator&lt;/li&gt;
&lt;li&gt;tripwire-Check nach sauberem Reboot zeigen&lt;/li&gt;
&lt;li&gt;lrk3 demonstrieren (ohne sauberen Reboot bekommt man keine verl√§sslichen Informationen mehr und kompromittiert sein Netz nur noch weiter)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;was-soll-laufen&#34;&gt;
    &lt;a href=&#34;#was-soll-laufen&#34;&gt;
	Was soll laufen?
    &lt;/a&gt;
&lt;/h1&gt;
&lt;p&gt;&lt;p class=&#34;md__image&#34;&gt;
  &lt;img src=&#34;https://blog.koehntopp.info/uploads/2000/04/neu-system-010.jpg&#34; alt=&#34;&#34;  /&gt;
&lt;/p&gt;

&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Welche Dienste sollen von der Maschine erbracht werden?&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Konfiguration beim Systemstart f√ºr persistente Server&lt;/li&gt;
&lt;li&gt;Konfiguration von transienten Servern&lt;/li&gt;
&lt;li&gt;Konfiguration von zeitgesteuerten Services
&lt;ul&gt;
&lt;li&gt;Suche nach Zeitbomben?&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Wenn es h√§ngt?&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Start/Stopscripte&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Linux: &lt;code&gt;/sbin/init.d/...&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Solaris: &lt;code&gt;/etc/init.d/...&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Crondateien: &lt;code&gt;/var/spool/cron/crontabs&lt;/code&gt;, &lt;code&gt;/var/cron/tabs&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;strace&lt;/code&gt;, &lt;code&gt;truss&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ltrace&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Bootsequenz durchgehen, Single User Mode, Wie bekomme ich meine Platten wieder?, Wie √ºberlebe ich ohne Editor und Terminalemulation?&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Defekte Programme tracen: &lt;code&gt;ldd&lt;/code&gt;, Solaris &lt;code&gt;proctools&lt;/code&gt;, Linux: &lt;code&gt;/proc/&amp;lt;nummer&amp;gt;/...&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;strace&lt;/code&gt;/&lt;code&gt;truss&lt;/code&gt; Output lesen, &lt;code&gt;ltrace&lt;/code&gt;/&lt;code&gt;sotruss&lt;/code&gt; Output lesen&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;was-l√§uft&#34;&gt;
    &lt;a href=&#34;#was-l%c3%a4uft&#34;&gt;
	Was L√§uft?
    &lt;/a&gt;
&lt;/h1&gt;
&lt;p&gt;&lt;p class=&#34;md__image&#34;&gt;
  &lt;img src=&#34;https://blog.koehntopp.info/uploads/2000/04/neu-system-011.jpg&#34; alt=&#34;&#34;  /&gt;
&lt;/p&gt;

&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Welche Dienste sind auf der Maschine aktiv?&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Welche waren aktiv?&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Welche Ressourcen belegen diese Dienste?&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;ps -ef&lt;/code&gt;, &lt;code&gt;ps auxwww&lt;/code&gt;, &lt;code&gt;top&lt;/code&gt;, &lt;code&gt;lsof&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Linux: &lt;code&gt;ptree&lt;/code&gt;, &lt;code&gt;sa&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Solaris: &lt;code&gt;/usr/proc/bin/*&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Beispiele mit den Proctools&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Speicherverbrauch absch√§tzen f√ºr Server&lt;/li&gt;
&lt;li&gt;Programmaktivit√§t laufender Prozesse feststellen&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;welche-user-k√∂nnen-rein&#34;&gt;
    &lt;a href=&#34;#welche-user-k%c3%b6nnen-rein&#34;&gt;
	Welche User k√∂nnen rein?
    &lt;/a&gt;
&lt;/h1&gt;
&lt;p&gt;&lt;p class=&#34;md__image&#34;&gt;
  &lt;img src=&#34;https://blog.koehntopp.info/uploads/2000/04/neu-system-012.jpg&#34; alt=&#34;&#34;  /&gt;
&lt;/p&gt;

&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Quellen von Userlisten&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;lokal, aus dem Netz&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Erlaubte und nicht erlaubte Shells&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Gehackte Authentisierung&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Modifizierte wu-ftpd, imapd&lt;/li&gt;
&lt;li&gt;LDAP-Module&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;/etc/nsswitch.conf&lt;/code&gt;, &lt;code&gt;/etc/shells&lt;/code&gt;, &lt;code&gt;/etc/ftpusers&lt;/code&gt;, &lt;code&gt;/etc/ftpaccess&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Zugangsmechanismen&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Regeln f√ºr den Zugang, etwa √ºber PAM: &lt;code&gt;/etc/pam.d&lt;/code&gt;, &lt;code&gt;/etc/pam.conf&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Verweis auf Folgeschulungen:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;NSS/PAM/GSS nutzen.&lt;/li&gt;
&lt;li&gt;NSS/PAM/GSS-Module erstellen.&lt;/li&gt;
&lt;li&gt;√úberblick √ºber die von NetUSE f√ºr den ISP-Betrieb modifizierte Software.&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;welche-user-waren-drin&#34;&gt;
    &lt;a href=&#34;#welche-user-waren-drin&#34;&gt;
	Welche User waren drin?
    &lt;/a&gt;
&lt;/h1&gt;
&lt;p&gt;&lt;p class=&#34;md__image&#34;&gt;
  &lt;img src=&#34;https://blog.koehntopp.info/uploads/2000/04/neu-system-013.jpg&#34; alt=&#34;&#34;  /&gt;
&lt;/p&gt;

&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Auswertung des Logbuches&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Querabgleiche mit anderen Logs&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Auditing-Subsysteme&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;/etc/utmp&lt;/code&gt;, &lt;code&gt;/etc/wtmp&lt;/code&gt;, syslog, Auth-Events, Radius-Logs und andere&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Exoten:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Logb√ºcher der Sysadmin-Tools (AIX)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Auditing-Subsysteme&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Linux: fehlendes Auditing, bescheidenes Accounting (falls installiert).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Solaris: Demo des Auditing&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Beide: Welche Logs liegen wo und wie finde ich die gew√ºnschte Info?&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;zugriffsrechte-und-privilegien-in-unix&#34;&gt;
    &lt;a href=&#34;#zugriffsrechte-und-privilegien-in-unix&#34;&gt;
	Zugriffsrechte und Privilegien in UNIX
    &lt;/a&gt;
&lt;/h1&gt;
&lt;p&gt;Bonusfolien aus der alten Schulung&lt;/p&gt;
&lt;p&gt;&lt;p class=&#34;md__image&#34;&gt;
  &lt;img src=&#34;https://blog.koehntopp.info/uploads/2000/04/neu-system-014.jpg&#34; alt=&#34;&#34;  /&gt;
&lt;/p&gt;

&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Erkl√§re, wer unter welchen Bedingungen in UNIX auf eine Datei zugreifen darf!&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;rwx? sst?&lt;/li&gt;
&lt;li&gt;Verzeichnisrechte vs. Dateirechte&lt;/li&gt;
&lt;li&gt;Dateiattribute? Dateisystemattribute?&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Welche Spuren hinterl√§√üt so ein Zugriff?&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://blog.koehntopp.info/1996/03/01/rwx-sonst-nix.html&#34;&gt;RWX - sonst nix?&lt;/a&gt;

&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Wer bin ich?&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Zu welchen Gruppen geh√∂re ich?&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Wie kann ich meine Identit√§t √§ndern?&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Welche Rechte (alle!) brauche ich, um auf eine Datei zuzugreifen? Sind es immer dieselben?&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;kurzer-sicherheitscheck-f√ºr-zwischendurch&#34;&gt;
    &lt;a href=&#34;#kurzer-sicherheitscheck-f%c3%bcr-zwischendurch&#34;&gt;
	Kurzer Sicherheitscheck f√ºr Zwischendurch
    &lt;/a&gt;
&lt;/h1&gt;
&lt;p&gt;Bonusfolien aus der alten Schulung&lt;/p&gt;
&lt;p&gt;&lt;p class=&#34;md__image&#34;&gt;
  &lt;img src=&#34;https://blog.koehntopp.info/uploads/2000/04/neu-system-015.jpg&#34; alt=&#34;&#34;  /&gt;
&lt;/p&gt;

&lt;/p&gt;
&lt;p&gt;Die meisten Fehler entstehen nicht durch falsche Software, sondern dumme User.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;find / -fstype ... ! -type l -perm ... -ls&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;-perm -2 (find world writeable files)&lt;/li&gt;
&lt;li&gt;-perm -4000 (find SUID)&lt;/li&gt;
&lt;li&gt;-perm -2000 (find SGID)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Finde Dateien, die world writeable, suid oder sgid sind.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;/tmp&lt;/code&gt;, &lt;code&gt;/var/tmp&lt;/code&gt; (1777 ?)&lt;/li&gt;
&lt;li&gt;Verzeichnisse im Pfad, Binaries, Konfigurationsdateien?&lt;/li&gt;
&lt;li&gt;Dateien mit vorhersagbaren Dateinamen?&lt;/li&gt;
&lt;li&gt;Ger√§te? Backup?&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;rechte-an-ger√§ten&#34;&gt;
    &lt;a href=&#34;#rechte-an-ger%c3%a4ten&#34;&gt;
	Rechte an Ger√§ten
    &lt;/a&gt;
&lt;/h1&gt;
&lt;p&gt;Bonusfolien aus der alten Schulung&lt;/p&gt;
&lt;p&gt;&lt;p class=&#34;md__image&#34;&gt;
  &lt;img src=&#34;https://blog.koehntopp.info/uploads/2000/04/neu-system-016.jpg&#34; alt=&#34;&#34;  /&gt;
&lt;/p&gt;

&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Auf vielen √§lteren kommerziellen Unices sind Ger√§tedateien unzureichend gesch√ºtzt.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Beschreibbare Plattendevices, Banddevices&lt;/li&gt;
&lt;li&gt;777-Verzeichnisse &lt;code&gt;/dev/md/*&lt;/code&gt;, L√∂schen von LVM-Pseudoger√§tedateien&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ioctl()&lt;/code&gt;-Aufrufe nicht ausreichend privilegiert.&lt;/li&gt;
&lt;li&gt;Medien mit sensitivem Inhalt in lesbaren Ger√§ten.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Beispiele:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ioctl()-Aufrufe in AIX teilweise nicht dokumentiert und nicht privilegiert.&lt;/li&gt;
&lt;li&gt;/dev-Unterverzeichnisse 777 in HP/UX.&lt;/li&gt;
&lt;li&gt;/bin-Verzeichnisse 777 in HP/UX und AIX nach Installation von Software.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
  </channel>
</rss>

