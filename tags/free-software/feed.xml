<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>free software on Die wunderbare Welt von Isotopp</title>
    <link>https://blog.koehntopp.info/tags/free-software.html</link>
    <description>Recent content in free software on Die wunderbare Welt von Isotopp</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 26 Aug 2022 07:17:33 +0000</lastBuildDate><atom:link href="https://blog.koehntopp.info/tags/free-software/feed.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>When you commit to git, how long does it matter?</title>
      <link>https://blog.koehntopp.info/2017/03/20/when-you-commit-to-git-how-long-does-it-matter.html</link>
      <pubDate>Mon, 20 Mar 2017 09:41:57 +0000</pubDate>
      
      <guid>https://blog.koehntopp.info/2017/03/20/when-you-commit-to-git-how-long-does-it-matter.html</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://erikbern.com/2016/12/05/the-half-life-of-code.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;p class=&#34;md__image&#34;&gt;
  &lt;img src=&#34;https://blog.koehntopp.info/uploads/2017/03/git-git-768x473.png&#34; alt=&#34;&#34;  /&gt;
&lt;/p&gt;

&lt;/a&gt;

&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://erikbern.com/2016/12/05/the-half-life-of-code.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Commit to git&lt;/a&gt;

&lt;/p&gt;
&lt;p&gt;Erik Bernhardsson has been running Big Data on Git repositories of various
kinds. He was trying to find out what the half-life of code is. That is,
when you commit to a repository, your code becomes part of a project, but
eventually other code will replace it and it will no longer be part of the
current version. How stable is the codebase, what is the half-life of code?
And why is it different in different projects?&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;As a project evolves, does the new code just add on top of the old code?
Or does it replace the old code slowly over time? In order to understand
this, I built a little thing to analyze Git projects, with help from the
formidable GitPython project. The idea is to go back in history historical
and run a git blame […]&lt;/p&gt;
&lt;/blockquote&gt;
</description>
    </item>
    
    <item>
      <title>MySQL Testcases</title>
      <link>https://blog.koehntopp.info/2012/08/20/mysql-testcases.html</link>
      <pubDate>Mon, 20 Aug 2012 13:41:55 +0000</pubDate>
      
      <guid>https://blog.koehntopp.info/2012/08/20/mysql-testcases.html</guid>
      <description>&lt;p&gt;In
&lt;a href=&#34;http://www.heise.de/ix/meldung/Entwickler-kritisieren-Oracles-Umgang-mit-MySQL-1670240.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Entwickler kritisieren Oracles Umgang mit MySQL&lt;/a&gt;


berichtet Heise über die Entdeckung von Sergei, daß Oracle zu einigen Bugs
&lt;a href=&#34;http://blog.mariadb.org/disappearing-test-cases/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;keine Tests mehr&lt;/a&gt;


ins Open Source Repository von MySQL stellt.&lt;/p&gt;
&lt;p&gt;Damit man die Vorgänge ein bischen besser versteht, muß man den Hintergrund
ein wenig erläutern: Die meiste Open Source Software, die Datenbanken
benutzt, verwendet MySQL als primäre Datenbanken.  Der Support für Varianten
von MySQL, PostgreSQL oder gar kommerzielle Datenbanken ist in der Regel
schlecht bis nicht vorhanden.  Das ist ein extrem starker Effekt: Das
&lt;a href=&#34;http://www.drizzle.org/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Drizzle&lt;/a&gt;

-Projekt zum Beispiel hat die
MySQL-Quellen radikal aufgeräumt und so eine sauberere und leichter weiter
entwickelbare Version einer Datenbank produziert, die jedoch zu dem
&amp;lsquo;Original&amp;rsquo; inkompatibel geworden ist.  Drizzle wird von nahezu keinem
Projekt sinnvoll unterstützt, und existierende MySQL-Software läuft nicht
mehr gegen einen Drizzle-Server.&lt;/p&gt;
&lt;p&gt;Die anderen bestehenden Forks,
&lt;a href=&#34;http://www.percona.com/software/percona-server/downloads/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Percona&lt;/a&gt;


und
&lt;a href=&#34;http://mariadb.org/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;MariaDB&lt;/a&gt;


sind also peinlich genau darauf bedacht, die Kompatibilität zu bestehendem
und sich weiter entwickelndem MySQL nicht auf eine Weise zu verändern, die
die Ausführbarkeit von Anwendung in irgendeiner Weise gefährdet.&lt;/p&gt;
&lt;p&gt;Percona ist eine Firma, die Support- und Consultingdienstleistungen zu MySQL
anbietet und eben auch den InnoDB-Teil von MySQL zu XtraDB forked, Monty
Program AB und SkySQL sind Firmen, die den MariaDB Fork von MySQL entwickeln
und mit Dienstleistungen versorgen.  Aus der Sicht von Oracle sind dies
kommerzielle Konkurrenten.&lt;/p&gt;
&lt;p&gt;Oracle bekämpft diese aus ihrer Sicht kommerzielle Konkurrenz auf zwei
Weisen:&lt;/p&gt;
&lt;p&gt;Zum Einen durch die o.a.  Schließung von Testfällen und einzelnen Bug
Reports (auch das Handbuch von MySQL ist nicht von der GPL abgedeckt, unter
der der Server Sourcecode selber veröffentlicht wird).  Dadurch wird Percona
und MariaDB das Gleichziehen mit und die Kompatibilität zu MySQL erschwert.&lt;/p&gt;
&lt;p&gt;Zum anderen durch das extrem hohe Entwicklungstempo in Bezug auf MySQL:
MySQL 5.5 war ein ausgezeichnetes und extrem stabiles Release, das in der
Versionsgeschichte von MySQL Maßstäbe hinsichtlich Performance und
Fehlerfreiheit gesetzt hat.  MySQL 5.6 wird dies - das ist jetzt schon
absehbar - weit übertreffen.&lt;/p&gt;
&lt;p&gt;Spekulationen, Oracle wolle MySQL aussterben oder aushungern kann man also
getrost verwerfen: Das ist genau nicht das, was mit MySQL gerade passiert.
Stattdessen ist MySQL seit Oracle schneller, besser und stabiler geworden
und die Entwicklung des Hauptzweiges von MySQL ist auf eine Weise
vorangekommen die vorher undenkbar gewesen wäre.&lt;/p&gt;
&lt;p&gt;Oracle geht aber gerade sehr gezielt gegen aus ihrer Sicht kommerzielle
Konkurrenten und Trittbrettfahrer vor und versucht &lt;em&gt;diese&lt;/em&gt; auszuhungern.
Mittel- und langfristig wird dies zu einer Spaltung von &amp;ldquo;Open Source MySQL&amp;rdquo;
(MariaDB, Percona und Drizzle) und kommerziellem MySQL führen.&lt;/p&gt;
&lt;p&gt;Open Source MySQL ist dafür in einer denkbar schlechten Position, da noch
eine ganze Reihe von Abhängigkeiten zwischen Open Source MySQL und Oracle
bestehen: Zum einen hat Open Source MySQL keine freie Dokumentation und
keine freien Ausbildungsmaterialien - die Dokumentation zu MySQL steht im
Gegensatz zum Quelltext nicht unter der GPL und gehört daher mit allen
Rechten Oracle.  Ebenso fehlt es an freien Ausbildungsmaterialien und
Beispielen für korrekte &amp;ldquo;Anwendung&amp;rdquo; von MySQL in häufigen Problemstellungen,
mit denen Entwickler und Administratoren an MySQL herangeführt werden
können.&lt;/p&gt;
&lt;p&gt;Zum anderen gibt es keine gemeinsame Roadmap von den Entwicklern der
MySQL-Forks und von Nutzern von MySQL.  Niemand weiß in Open Source MySQL,
wo Anwender von MySQL  Probleme sehen und Weiterentwicklung wünschen und
niemand weiß, welche Richtung für die Weiterentwicklung die jeweiligen Forks
für sich so vorsehen.&lt;/p&gt;
&lt;p&gt;Solange sich die Open Source MySQLer - und Open Source MySQL Anwender!  -
nicht zusammentun, und gemeinsam Marken, Standards und Dokumentation für
&amp;ldquo;Open Source MySQL&amp;rdquo; entwickeln, wird Oracles Spaltungstrategie aufgehen.
Abhilfe kann hier nur eine Fokussierung von Entwicklungsaufwänden und eine
gemeinsame Behebung von Defiziten bringen - das Produkt und das Projekt sind
inzwischen zu groß geworden um in mehreren weittstreitenden Projekten und
unter dem Druck von Oracle mitzuhalten.&lt;/p&gt;
&lt;p&gt;Die Tatsache, daß weite Teile der MySQL-Anwendergemeinschaft noch immer
einer MyISAM-Denkweise und dem Ausbildungsstand von 2005 verhaftet sind,
hilft dabei kein Stück.  Anleitungen und Tutorials zu MySQL erklären
Transaktionen, korrekten Umgang mit Grenzfällen, InnoDB Performancetuning,
Debugging von Performanceproblemen, die aus der Umstellung von MyISAM nach
InnoDB entstehen und ähnliche Dinge so gut wie gar nicht, und in der Regel
schon gar nicht korrekt.  Der Abstand zwischen der MySQL-Entwicklung (in
allen Geschmacksrichtungen) und dem Ausbildungsstand der Community gemessen
an den Tutorials und typisch publiziertem Code ist größer den je.  Es wird
Zeit, den nächsten Schritt zu tun!  Dazu fehlt es jedoch an Material.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;TL;DR:&lt;/strong&gt; Die MySQL-Community ist selbst schuld und muß sich besser
organisieren, Aufwände zusammenfassen und Defizite wie das fehlende freie
Manual beheben.  Der generelle Ausbildungsstand unter MySQL-Anwendern ist im
Mittel und im Median katastrophal.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Postscriptum:&lt;/strong&gt; In den einschlägigen Diskussionen bei Heise, auf
Slashdot und anderswo wird gerne auf Postgres und allen Ernstes auf SQLite
als Alternative verwiesen.  Dazu kann man folgendes sagen:&lt;/p&gt;
&lt;p&gt;Wer Sqlite vorschlägt hat noch nicht einmal das Problem verstanden.&lt;/p&gt;
&lt;p&gt;Postgres ist in aktuellen Versionen wahrscheinlich in der Lage, von der
Performance her mit MySQL mitzuhalten.  Die Postgres-Community ist jedoch
von der Denkweise und vom Entwicklungsansatz her nicht wirklich mit dem
MySQL-Weltbild kompatibel:&lt;/p&gt;
&lt;p&gt;Postgres-Modellierer sehen die Datenbank in den meisten Fällen als
Monolithen, der die Herrschaft über die Daten und ihre Integrität hat und
die Regel für den Zugriff auf diese Daten auch in einer defekten oder
feindlichen Umgebung garantiert.  MySQL-Modellierer sehen die Datenbank und
ihre Nutzer als System, das kooperativ den Umgang mit den Daten reguliert.
Nach dem
&lt;a href=&#34;https://plus.google.com/110981030061712822816/posts/KaSKeg4vQtz&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Yegge-Modell&lt;/a&gt;


ist Postgres also Software-Konservativ, MySQL Software-Liberal.&lt;/p&gt;
&lt;p&gt;Die MySQL-Gemeinschaft entwickelt Eigenschaften der Datenbank in der Regel
iterativ: &amp;ldquo;Wir wissen, daß das kaputt ist, releasen das Feature aber schon
mal, damit ihr damit Erfahrungen sammeln könnt und uns dann Hinweise darauf
geben könnt, was wirklich wichtig ist&amp;rdquo;.  Das ist der Bazaar-Ansatz für
Architektur und funktioniert nach Maßgabe von MySQLern sehr gut.
Statement-Based Asynchronous Replication in MySQL zum Beispiel ist
fundamental limitiert und am Ende für eine bestimmte Fehlerklasse nicht
reparierbar, leistet aber in vielen Deployments erfahrungsgemäß und
inzwischen über mehr als eine Dekade ausgezeichnete Dienste.  Inzwischen
gibt es Alternativen und Weiterentwicklungen (RBR, Semisynchronous
Replication, GTID), aber in der Zwischenzeit haben alle schon einmal prüfen
können, was die Vorteile und Nachteile der existierenden Implementation sind
und was wirklich Reibungspunkte sind, die einer Verbesserung bedürfen.&lt;/p&gt;
&lt;p&gt;Der Kathedralenansatz von Postgres hat dazu geführt, daß Postgres sehr lange
keine sinnvolle Replikation zur Verfügung hatte und bestimmte Ideen in
Postgres vollkommen überkomplex reguliert sind.  Mein Arbeitgeber zum
Beispiel hat sein System ursprünglich auf Postgres aufgebaut und dies dann
im laufenden Betrieb auf eine MySQL-Architektur migrieren müssen, damit das
System über einen monolithischen Server hinaus skalierbar wurde.  Das war
vor mehr als 10 Jahren, und Postgres hat dann effektiv letztes Jahr erstmals
einen Ansatz gehabt, mit dem man das System mit Postgres auf sinnvoll hätte
skalieren können.  Aus dieser Sicht kann man also getrost sagen, daß &amp;ldquo;MySQL
an Stellen Fehler hat, an denen Postgres nicht mal Code hatte&amp;rdquo;.&lt;/p&gt;
&lt;p&gt;Siehe auch
&lt;a href=&#34;https://blog.koehntopp.info/2010/11/04/red-vs-blue-at-oracle-und-ein-paar-gedanken-zu-postgres.html&#34;&gt;einen älteren Artikel&lt;/a&gt;


zum Thema (der Artikel bezieht Performancegewinne von MySQL 5.5 und 5.6 noch
nicht ein).&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Busybox, die GPL und Wirrniss</title>
      <link>https://blog.koehntopp.info/2012/02/11/busybox-die-gpl-und-wirrniss.html</link>
      <pubDate>Sat, 11 Feb 2012 13:40:47 +0000</pubDate>
      
      <guid>https://blog.koehntopp.info/2012/02/11/busybox-die-gpl-und-wirrniss.html</guid>
      <description>&lt;p&gt;Was bisher geschah: Jemand bei Sony schreibt
&lt;a href=&#34;http://www.elinux.org/Busybox_replacement_project&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;einen Aufruf&lt;/a&gt;

,
einen Ersatz für Busybox zu schreiben, der nicht unter der GPL steht.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Busybox is a widely used program which implements several Linux command
line utilities in a single, multi-tool binary.  It is provided under the
GPL license.  Due to its utility and ubiquity, it has been used in a very
large number of embedded devices.  This includes use by companies who are
not as diligent about their GPL commitments as they should be.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Will sagen: Busybox ist ein Programm, das die Basisfunktionen vieler
Linux-Kommandozeilenwerkzeuge in einem Binary zusammenfaßt und sehr wenig
Platz verbraucht.  Wegen dieser Eigenschaften wird es gerne in Embedded
Systemen eingesetzt.&lt;/p&gt;
&lt;p&gt;Da Busybox unter der
&lt;a href=&#34;https://blog.koehntopp.info/2005/02/07/von-der-gpl.html&#34;&gt;GPL&lt;/a&gt;


steht, viele Firmen sich aber einen Dreck um Copyright scheren, wenn es sie
selber statt ihre Endkunden betrifft, wird es gerne in Router und andere
Geräte eingebaut und ist dann Gegenstand einer
&lt;a href=&#34;https://blog.koehntopp.info/2006/09/22/urteilsbegr-ndung-zu-gpl-in-deutschland-vor-gericht-durchgesetzt.html&#34;&gt;Lizenzklage&lt;/a&gt;

.
Eine Klage, die am Ende dazu führt, daß die Firmen ihre Firmware offenlegen müssen, weil
sie zu faul sind, selber zu programmieren und zu blöd, sich genau das
Urheberrecht zu halten, für dessen Verschärfung sie Unsummen an die diversen
&lt;a href=&#34;https://blog.koehntopp.info/2011/11/24/von-einem-absturz-tutus-und-einem-neuen-urheberrecht.html&#34;&gt;Lobbyfeen&lt;/a&gt;


bezahlt haben (wir reden hier unter anderem von
&lt;a href=&#34;https://blog.koehntopp.info/2011/04/27/wenn-man-sony-ist-hat-man-es-nicht-leicht.html&#34;&gt;Sony&lt;/a&gt;

).&lt;/p&gt;
&lt;p&gt;Es gibt eine Reihe von Gruppen im Open Source Umfeld, die sich der
Durchsetzung von Offenen Lizenzen verschrieben haben.  Da ist einmal das von
Harald Welte initiierte
&lt;a href=&#34;http://gpl-violations.org/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;GPL Violations&lt;/a&gt;

, ein weiterer Kandidat ist die
&lt;a href=&#34;http://sfconservancy.org/members/current/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;SFC&lt;/a&gt;


(Software Freedom Conservancy).  Letztere vertritt auch die Interessen der
Busybox-Autoren und ist daher die Veranstaltung, gegen die das Busybox
Replacement Projekt primär zielt.&lt;/p&gt;
&lt;p&gt;Die Reaktionen auf das Busybox Replacement Projekt waren sehr
unterschiedlich: Einerseits steht es natürlich jedermann frei, selbst und
eigenständig welche Software auch immer zu entwickeln.  Andererseits geht es
hier darum, Software zu schreiben, mit der man etwas illegales (nämlich das
lizenzwidrige Verwenden von Open Source in Closed Source Projekten)
einfacher machen möchte.  Das Problem ist nämlich, daß typischerweise in
solchen Projekten nicht nur Busybox illegal verwendet wird, sondern meist
auch viele andere Teilprojekte geplündet werden.&lt;/p&gt;
&lt;p&gt;Es reicht aber nicht,
&lt;a href=&#34;http://mjg59.dreamwidth.org/10437.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;diese illegale Nutzung zu identifizieren&lt;/a&gt;

,
sondern man muß auch klageberechtigt sein.  Busybox war und ist für die SFC
hier ein bequemer Hebel, da die SFC die Rechte des Urhebers in diesem Fall
wahrnehmen darf.  Das Sony-Projekt dient nun in erster Linie nicht dem
Fortschritt, sondern dazu, der SFC diesen Hebel aus der Hand zu nehmen -
rechtlich stellen sich die betreffenden Firmen jedoch kein bischen auf
legaleren Grund.&lt;/p&gt;
&lt;p&gt;Andererseits gibt es auch abweichende Meinungen, &lt;a href=&#34;https://lwn.net/Articles/478361/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;etwa diese&lt;/a&gt;

:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;As the ex-maintainer of busybox who STARTED those lawsuits in the first
place and now HUGELY REGRETS ever having done so, I think I&amp;rsquo;m entitled to
stop the lawsuits in whatever way I see fit.&lt;/p&gt;
&lt;p&gt;They never resulted in a single line of code added to the busybox
repository.  They HAVE resulted in more than one company exiting Linux
development entirely and switching to non-Linux operating systems for
their embedded products, and they&amp;rsquo;re a big part of the reason behind
Android&amp;rsquo;s &amp;ldquo;No GPL in userspace&amp;rdquo; policy.  (Which is Google, not Sony.)&lt;/p&gt;
&lt;p&gt;Toybox is my project.  I&amp;rsquo;ve been doing it since 2006 because I believe I
can write a better project than busybox from an engineering perspective.
I mothballed it because BusyBox had a 10 year headstart so I didn&amp;rsquo;t think
it mattered how much BETTER it was, nobody would use it.  Tim pointed out
I was wrong about that, I &lt;em&gt;agreed&lt;/em&gt; with him once I thought about it, so
I&amp;rsquo;ve started it up again.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Die Stellungnahm von Harald Welte befindet sich
&lt;a href=&#34;http://laforge.gnumonks.org/weblog/2012/02/09/#20120209-linux_gpl_enforcement_conservancy_busybox&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;in seinem Blog&lt;/a&gt;


Er schreibt unter anderem:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;People who claim that GPL enforcement is scaring away companies from using
Linux and/or other Free Software also have to be careful in what they say.
If a commercial entity enters a new market (let&amp;rsquo;s say Android Tablets),
then there is a certain due diligence required before entering that
market.  So if you don&amp;rsquo;t understand Free Software and particularly GPL
licensing, then you shouldn&amp;rsquo;t place a Linux-based device on the market.&lt;/p&gt;
&lt;p&gt;&amp;hellip;&lt;/p&gt;
&lt;p&gt;But come on, dealing with embedded devices in 2012 and still getting
compliance outright wrong really means that there has not been the least
bit of attention on this subject.  And without enforcement, it is never
going to change.  People who want no enforcement should simply use
MIT-style licenses.&lt;/p&gt;
&lt;p&gt;&amp;hellip;&lt;/p&gt;
&lt;p&gt;Let me conclude with a clear statement to anyone who thinks that by
replacing Busybox with a non-GPL licensed project they can evade GPL
enforcement: It will not work.  There are others out there enforcing the
GPL.  Last but not least gpl-violations.org.&lt;/p&gt;
&lt;/blockquote&gt;
</description>
    </item>
    
    <item>
      <title>Acht Jahre SCO-Prozeß</title>
      <link>https://blog.koehntopp.info/2011/08/31/acht-jahre-sco-proze.html</link>
      <pubDate>Wed, 31 Aug 2011 18:46:23 +0000</pubDate>
      
      <guid>https://blog.koehntopp.info/2011/08/31/acht-jahre-sco-proze.html</guid>
      <description>&lt;p&gt;Im März 2003 begann die Firma, die mal Caldera hieß und sich in SCO Group
umbenannte, IBM auf eine Fantasiesumme von Schadenersatz zu verklagen, weil
Ex-Caldera sich im Besitz des Unix-Copyrights wähnte und der Auffassung war,
daß IBM im Rahmen seiner Linux-Initiative Ex-Caldera geraubmordkopiert
hätte. Sich mit den Anwälten von IBM anzulegen ist eine unglaublich gute
Idee, die der Idee, einen Feldzug in Rußland im Winter zu führen, in nichts
nachsteht. So bekam Ex-Caldera dann auch bald bescheinigt: Linux enthält
keinen original Unix-Quellcode, SCO-Caldera hatte ihr IP unter der GPL
freigegeben und hat so keinen Grund zu klagen &lt;em&gt;und&lt;/em&gt; das Copyright am
Original-Unix System V liegt übrigens nicht bei Euch, liebes Ex-Caldera,
sondern bei Novell.&lt;/p&gt;
&lt;p&gt;Heute, &lt;a href=&#34;http://www.heise.de/open/meldung/SCO-vs-Linux-Es-ist-vorbei-1333811.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;8 Jahre später&lt;/a&gt;

,
geht die Akte endgültig zu. Endlich ist dieser Zombie tot.&lt;/p&gt;
&lt;p&gt;Bester Seiteneffekt der ganzen Aktion: &lt;a href=&#34;http://groklaw.net/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Groklaw&lt;/a&gt;

 -
Tausende von Geeks lernen (amerikanisches) Recht, und Armeen von verteilten
Beweisfindern dokumentieren diesen Prozeß im Detail, suchen Dokumente in
alten Papierstapeln, und finden Fehler und Schwachstellen in den
Argumentationen von Ex-Caldera. Die Firma muß feststellen, daß IBMs Anwälte,
bei aller Drohkraft, nicht der eigentliche Endgegner sind: Es ist das Netz
selber, die Masse der Geeks, die sich da mobilisiert und gegenhält.&lt;/p&gt;
&lt;p&gt;Nach dem Ende des SCO-Prozesses definiert sich Groklaw mit neuer Belegschaft
um: Themen sind nun Oracle vs. Google, Patenttrolle wie Lodsys und ähnliche
Themen. An Prozessen herrscht ja seit zehn Jahren im IT-Umfeld kein Mangel.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Wieso wir Helden sein wollen</title>
      <link>https://blog.koehntopp.info/2010/07/21/wieso-wir-helden-sein-wollen.html</link>
      <pubDate>Wed, 21 Jul 2010 08:03:28 +0000</pubDate>
      
      <guid>https://blog.koehntopp.info/2010/07/21/wieso-wir-helden-sein-wollen.html</guid>
      <description>&lt;p&gt;Vor drei Jahren schrieb ich etwas zu
&lt;a href=&#34;https://blog.koehntopp.info/2007/09/07/echte-helden.html&#34;&gt;Echten Helden&lt;/a&gt;


und daß das Wunder unserer Zeit darin liegt, daß es leichter denn je ist,
ein Held zu werden, indem man einfach etwas tut und dadurch die Welt
fundamental verändert.&lt;/p&gt;
&lt;p&gt;Warum wollen Leute Echte Helden sein? Dazu gibt es ein wunderbares Video von
&lt;a href=&#34;http://www.youtube.com/watch?v=u6XAPnuFjJc&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;RSAnimate&lt;/a&gt;

, das erklärt, wieso
Geld als Motivator nicht funktioniert außer für die primitivsten und
langweiligsten Tätigkeiten und was Leute wirklich motiviert: Self Direction,
Mastery und Purpose. Also die Freiheit, das eigene Umfeld selbst bestimmen
und kontrollieren zu können, und der Wunsch, etwas sinnvolles und wichtiges
zu tun und darin und den dazu notwendigen Fertigkeiten besser zu werden.
Dahinter stehend also genau der Wunsch, die Welt in einen besseren Ort zu
verwandeln.&lt;/p&gt;
&lt;p&gt;Anders gesagt: Glück und Heldentum gehen zusammen, wir sind geschaffen,
Echte Helden zu sein - es ist in uns eingebaut und es ist das, was wir alle
tun wollen, sobald die direkten Existenzsorgen vom Tisch sind.&lt;/p&gt;
&lt;p&gt;(Youtube  &lt;a href=&#34;http://www.youtube.com/watch?v=u6XAPnuFjJc&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;DirektHeldentum&lt;/a&gt;

 via
&lt;a href=&#34;http://immateriblog.de/journalismus/was-motiviert-uns/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Immateriblog&lt;/a&gt;

)&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Downloading communism...</title>
      <link>https://blog.koehntopp.info/2010/02/25/downloading-communism.html</link>
      <pubDate>Thu, 25 Feb 2010 11:47:02 +0000</pubDate>
      
      <guid>https://blog.koehntopp.info/2010/02/25/downloading-communism.html</guid>
      <description>&lt;p&gt;&lt;p class=&#34;md__image&#34;&gt;
  &lt;img src=&#34;https://blog.koehntopp.info/uploads/Download_communism.jpg&#34; alt=&#34;&#34;  /&gt;
&lt;/p&gt;

&lt;/p&gt;
&lt;p&gt;Eigentlich war es ja als
&lt;a href=&#34;http://maebmij.org/blog/2005/01/16/downloading-communism/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Witz&lt;/a&gt;

 gedacht,
aber die Mediendinosaurier nehmen so etwas schon mal ernst.&lt;/p&gt;
&lt;p&gt;Schreibt der
&lt;a href=&#34;http://www.theinquirer.net/inquirer/news/1593573/open-source-software-communist-plot&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Inquirer&lt;/a&gt;

:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;A MAFIAA CABAL called the International Intellectual Property Alliance,
which is an umbrella group for the entertainment cartels such as the MPAA
and RIAA, has demanded that Indonesia, Brazil and India should be placed
on a special trade watchlist merely because they recommend the use of open
source software.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;und der&lt;a href=&#34;http://www.guardian.co.uk/technology/blog/2010/feb/23/opensource-intellectual-property&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Guardian&lt;/a&gt;

:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;It turns out that the International Intellectual Property Alliance, an
umbrella group for organisations including the MPAA and RIAA, has
requested with the US Trade Representative to consider countries like
Indonesia, Brazil and India for its &amp;ldquo;Special 301 watchlist&amp;rdquo; because they
use open source software…. But the IIPA suggested that Indonesia deserves
Special 301 status because encouraging (not forcing) such takeup &amp;ldquo;weakens
the software industry&amp;rdquo; and &amp;ldquo;fails to build respect for intellectual
property rights&amp;rdquo;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Right.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Einthemenpartei</title>
      <link>https://blog.koehntopp.info/2009/08/19/einthemenpartei.html</link>
      <pubDate>Wed, 19 Aug 2009 19:28:00 +0000</pubDate>
      
      <guid>https://blog.koehntopp.info/2009/08/19/einthemenpartei.html</guid>
      <description>&lt;p&gt;Eine Einthemenpartei wie die Piraten macht es sich sehr einfach - sie beackert nur dieses eine Poltikfeld und sammelt das Stimmvieh ein. Schauen wir mal genauer hin.&lt;/p&gt;
&lt;p&gt;Das hier ist ein Poltikfeld. Die weißen Punkte sind Stimmvieh.&lt;/p&gt;
&lt;p&gt;&lt;p class=&#34;md__image&#34;&gt;
  &lt;img src=&#34;https://blog.koehntopp.info/uploads/politikfeld.jpg&#34; alt=&#34;&#34;  /&gt;
&lt;/p&gt;

&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Politikfeld mit Stimmvieh&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Mit was also soll sich der medienkompetente und interessierte Bürger hier auseinandersetzen? Und sein Interessenvertreter im Parlament?&lt;/p&gt;
&lt;p&gt;Da stellen wir uns also mal ganz dumm und malen einen Kringel:&lt;/p&gt;
&lt;p&gt;Das Politikfeld, um das es hier gehen soll, ist das Urheberrecht. Es sieht so aus:&lt;/p&gt;
&lt;p&gt;&lt;p class=&#34;md__image&#34;&gt;
  &lt;img src=&#34;https://blog.koehntopp.info/uploads/urheberrecht0.png&#34; alt=&#34;&#34;  /&gt;
&lt;/p&gt;

&lt;/p&gt;
&lt;p&gt;Das Urheberrecht ist ein automatisches Recht: Man erwirbt es einfach indem man ein Werk erschafft. Die Schwelle, ab der etwas ein Werk ist, ist recht niedrig - ein Foto von einem Brötchen zum Beispiel kann ein Werk sein, oder ein Foto von Schafen auf einer Weide in Neuseeland, wie ich es dort oben gemacht habe. Auch ein Zeichensatz, eine Komposition, ein Brief, ein abgeschlossen formulierter Gedanke oder ein Aphorismus kann ein Werk sein.&lt;/p&gt;
&lt;p&gt;Es ist wirklich automatisch: Ich muß nichts dafür tun - ich brauche keine magischen ©-Symbole abzudrucken und ich brauche das Werk niemandem anzumelden. Man kann dennoch an sein Werk »© Copyright 2009 Kristian Köhntopp« malen. Das ist nett, und es ist psychologisch hilfreich, weil es potentielle Nutzer des Werkes animiert, nachzufragen und das Werk zu lizenzieren. Ich habe gute Erfahrungen und besser noch gutes Geld mit solchen Kennzeichnungen gemacht. Juristisch ist es jedoch nicht notwendiger Vodoo.&lt;/p&gt;
&lt;p&gt;Lizenzieren? Ah ja.&lt;/p&gt;
&lt;p&gt;Schaut man genauer hin, kann man zwei Unterthemen erkennen:&lt;/p&gt;
&lt;p&gt;&lt;p class=&#34;md__image&#34;&gt;
  &lt;img src=&#34;https://blog.koehntopp.info/uploads/urheberrecht1.png&#34; alt=&#34;&#34;  /&gt;
&lt;/p&gt;

&lt;/p&gt;
&lt;p&gt;Beim Urheberrecht geht es um Verwertungsrechte, die man einem anderen abtreten kann. Das kann man nichtexklusiv oder für eine spezifische Nutzung tun, oder man kann es pauschal und dauerhaft machen. Letzteres ist zum Beispiel die präferierte Vertragsform, die Zeitungsverlage aktuell mit freien Autoren haben wollen. Der Autor kann den Artikel dann nicht mehr jemand anderem verkaufen, er muß nicht doppelt bezahlt werden, wenn der Artikel im Magazin und Online erscheint, und er muß auch nicht erneut bezahlt werden, wenn der Artikel in einem Sonderheft wieder aufgelegt wird.&lt;/p&gt;
&lt;p&gt;Den anderen Ast unseres Diagrammes gibt es nur im europäischen Urheberrecht: Das Urheberpersönlichkeitsrecht schützt die Interessen des Urhebers an seinem Werk und seinem Namen - es bewirkt, daß ein Urheber auf Namensnennung im Zusammenhang mit dem Werk bestehen kann und daß ein Urheber gegen Veröffentlichungen vorgehen kann, in denen sein Werk entstellt oder sonstwie unautorisiert verändert wird. Man findet das Urheberpersönlichkeitsrecht an seltsamen Orten - die deutsche Bahn zum Beispiel hat den Prozeß gegen den Architekten des Berliner Hauptbahnhofs/Lehrter Bahnhof verloren: &amp;lsquo;Durch Änderungen am Bau sei die ursprüngliche Planung des Stararchitekten Meinhard von Gerkan &amp;ldquo;erheblich entstellt&amp;rdquo; worden.&amp;rsquo;, &lt;a href=&#34;http://www.spiegel.de/wirtschaft/0,1518,451178,00.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;berichtet der Spiegel&lt;/a&gt;

.&lt;/p&gt;
&lt;p&gt;Das Urheberrecht wirkt weit in das Poltikfeld Kultur hinein. Ich habe recht willkürlich einmal einige Themen herausgegriffen, die die Verbindung herstellen, aber es gibt noch viel mehr Wechselwirkungen zwischen den beiden Themen:&lt;/p&gt;
&lt;p&gt;&lt;p class=&#34;md__image&#34;&gt;
  &lt;img src=&#34;https://blog.koehntopp.info/uploads/urheberrecht2.png&#34; alt=&#34;&#34;  /&gt;
&lt;/p&gt;

&lt;/p&gt;
&lt;p&gt;Da ist einmal das Thema Privatkopie, das über Prozesse gegen P2P-Filesharing und das schwedische Anti-Piratebyrån letztendlich zur Gründung (und Namensgebung) der Piratenpartei in Schweden geführt hat.&lt;/p&gt;
&lt;p&gt;Aber im Spannungsfeld Kultur und Urheberrecht finden sich noch weitere Themen, zum Beispiel DRM (Digital Restrictions Management), bei dem unter dem Vorwand des Kopierschutzes Monopole durch inkompatible Formate geschaffen werden sollen und bei dem es auch darum geht, den Kunden zum Lizenznehmer statt Eigentümer zu machen - dadurch kann man ihm Werke wieder entziehen (Amazon hat das mit dem Kindle schön demonstriert), ihn mit Regioncodes gängeln, sein Nutzungsverhalten auswerten (auch das wird am Kindle schön demonstriert) und ggf. noch weiter verkaufen und viele andere Dinge mehr. Der Text &amp;lsquo;&lt;a href=&#34;http://www.gnu.org/philosophy/right-to-read.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;The Right to Read&lt;/a&gt;

&amp;rsquo; (1997) von Richard Stallman schildert all das als eine Art visonäre Dystopie - wir sind auf dem besten Weg dahin, sie Wirklichkeit werden zu lassen.&lt;/p&gt;
&lt;p&gt;Die offene Frage, an der sich die öffentliche Diskussion derzeit entzündet ist die Frage, wie Urheber denn Geld verdienen sollen - im Raum steht eine Kulturflatrate, ein bürokratisches Monster mit noch größeren Tentakeln als VG Wort, GEMA und GEZ zusammen und ein absoluter Privacy-Albtraum.&lt;/p&gt;
&lt;p&gt;Das Thema kooperative Schöpfung als Gegensatz zur kompetetiven Schöpfung habe ich in einigen Texten in diesem Blog schon einige Male angesprochen, erstmal in
&lt;a href=&#34;https://blog.koehntopp.info/2005/01/05/ein-paar-ideologische-steine-ins-rollen-bringen.html&#34;&gt;Ein paar ideologische Steine in Rollen bringen&lt;/a&gt;

. Im kreativen Bereich wird dies durch die Creative Commons Lizenzen und in geringerem Ausmaß durch die GFDL und andere freie Lizenzen für Texte, Bilder und andere Werke realisiert, im Bildungsbereich, zu dem wir gleich kommen werden steht dem das Prinzip Open Access gegenüber.&lt;/p&gt;
&lt;p&gt;Ein anderes kontroverses Thema ist das Urheberrecht vs. die Neuschöpfung von Inhalten durch die Mittel des Zitates, der Parodie und Satire, oder durch Remixen und andere Formen der Ableitung. Bei Techdirt findet sich der Artikel &lt;a href=&#34;http://techdirt.com/articles/20090629/0230145396.shtml&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;The Myth Of Original Creators&lt;/a&gt;

, bei mir liest sich das in &lt;a href=&#34;https://blog.koehntopp.info/2009/04/27/politik-polemik-und-eine-agenda.html&#34;&gt;Politik, Polemik und eine Agenda&lt;/a&gt;

 gar nicht so anders. Der Punkt, der hinter beiden Texten steht ist der, daß ein Urheberrecht im Internetzeitalter die Schaffung von neuen Werken ermutigen muß, und nicht als Hauptfunktion bereits existierende Inhalte schützen. Letzteres ist nur der Wunsch von Rechteverwertern, nicht der Wunsch von Kreativen.&lt;/p&gt;
&lt;p&gt;Das Thema Bildung steht mit dem Thema Kultur in enger Verbindung: Ohne Bildung kann man Kultur nicht richtig rezipieren und nicht alle Produkte einer Kultur kann man schon rezipieren, wenn man noch in der Ausbildung ist. Wir weiten unsere Skizze aus:&lt;/p&gt;
&lt;p&gt;&lt;p class=&#34;md__image&#34;&gt;
  &lt;img src=&#34;https://blog.koehntopp.info/uploads/urheberrecht3.png&#34; alt=&#34;&#34;  /&gt;
&lt;/p&gt;

&lt;/p&gt;
&lt;p&gt;Jugendschutz ist ein Thema, das speziell die Bundesrepublik Deutschland bis zur Lächerlichkeit ernst nimmt. Das hat kulturelle Gründe, ist vielfach aber auch Bequemlichkeit: Jugendschutz ist ein politisch bequemer Weg, Repression auszuweiten, mit der man sozial unerwünschtes Verhalten und den Zugang zu sozial unerwünschtem kulturellen Ausdruck auch bei Erwachsenen erschweren kann. Das betrifft nicht nur die Reifen, durch die man springen muß, wenn man indizierte Medien erwerben will, sondern es betrifft auch Situationen wie das lukrative Lottomonopol, das die Bundesrepublik angesichts der EU nur behalten kann, indem sie eine Jugendschutzsituation erfindet: Um Jugendliche vor imaginärer Lottospielsucht zu beschützen kann man in Deutschland nicht mehr online Lotto spielen.&lt;/p&gt;
&lt;p&gt;Es ging um Bildung - damit Bildung möglich ist, muß Wissen kostengünstig zugänglich sein. Wir treffen hier das Thema kooperative Schöpfung wieder, diesmal unter dem Namen Open Access. Ein verwandter Gedanke ist die Idee, daß Werke, die aus öffentlichen Geldern geschaffen worden sind auch frei und kostenlos verfügbar sein sollten - US amerikanische Geodaten zum Beispiel sind so zu bekommen, weil sie mit Steuergeldern erarbeitet wurden, oder originale Inhalte der BBC für Einwohner Großbritanniens. In Deutschland stehen dem kommerzielle Interessen des Privatfernsehens gegenüber und die Mediatheken der deutschen öffentlich-rechtlichen müssen die Inhalte, die wir mit unseren Rundfunk- und Fernseh-Gebühren bereits bezahlt haben nach 7 Tage hinter dem Schleier des Vergessens verschwinden lassen und dürfen nicht gespeichert oder weiter verbreitet werden können. Klar - wer würde sonst noch RTL gucken wollen.&lt;/p&gt;
&lt;p&gt;Damit Bildung möglich ist, muß der Zugang zu Wissen überhaupt möglich sein. Was ist mit Archivierung, mit der Freisetzung von Inhalten bei Ablauf der Schutzfristen des Urheberrechtes und mit den legalen Kopien unter dem Bildungsprivileg im Angesicht von DRM? Auch hier begegnen sich die Poltikfelder Kultur, Bildung und Urheberrecht wieder.&lt;/p&gt;
&lt;p&gt;Wir landen bei:&lt;/p&gt;
&lt;p&gt;&lt;p class=&#34;md__image&#34;&gt;
  &lt;img src=&#34;https://blog.koehntopp.info/uploads/urheberrecht4.png&#34; alt=&#34;&#34;  /&gt;
&lt;/p&gt;

&lt;/p&gt;
&lt;p&gt;Im Rahmen der Medienpolitik wollen wir außerdem über das Netz eine mediale Grundversorgung sicherstellen, die für die politische Meinungsbildung notwendig ist. Außerdem sollen Behördenprozesse digitalisiert und automatisiert werden, um so Effizienzgewinne zu realisieren. Dem steht eine Durchsetzung von Urheberrechtsansprüchen gegenüber, bei denen die Rechtevertreter eine Art digitale Todesstrafe einführen wollen, die sogenannte Three Strikes Regelung, bei der ein Netzteilnehmer am Ende abgeklemmt wird. Dieser Widerspruch wird von der Politik noch nicht adressiert und auch nicht aufgelöst.&lt;/p&gt;
&lt;p&gt;Die Interessenlage sieht so aus:&lt;/p&gt;
&lt;p&gt;&lt;p class=&#34;md__image&#34;&gt;
  &lt;img src=&#34;https://blog.koehntopp.info/uploads/urheberrecht5.png&#34; alt=&#34;&#34;  /&gt;
&lt;/p&gt;

&lt;/p&gt;
&lt;p&gt;Alles zusammen reden wir gerade über das hier:&lt;/p&gt;
&lt;p&gt;&lt;p class=&#34;md__image&#34;&gt;
  &lt;img src=&#34;https://blog.koehntopp.info/uploads/urheberrecht6.png&#34; alt=&#34;&#34;  /&gt;
&lt;/p&gt;

&lt;/p&gt;
&lt;p&gt;Wobei ich andere Schutzrechte des Komplexes geistges Eigentum noch ausgespart habe - hier sind also keine Markenrechte, Namensrechte, Patente und andere Monopolrechte mit eingezeichnet und ich habe daher auch die Überschneidungen mit der landwirtschaftlichen Gentechnik (und deren Verbindungen zur Forschung) und viele andere Dinge noch nicht eingezeichnet - denn dann wird es wirklich unübersichtlich.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Neue Ideen in Dateisystemen (oder: BTRFS in Fedora 11)</title>
      <link>https://blog.koehntopp.info/2009/02/06/neue-ideen-in-dateisystemen-oder-btrfs-in-fedora-11.html</link>
      <pubDate>Fri, 06 Feb 2009 16:34:20 +0000</pubDate>
      
      <guid>https://blog.koehntopp.info/2009/02/06/neue-ideen-in-dateisystemen-oder-btrfs-in-fedora-11.html</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;There are two kinds of fool. One says, “This is old, and therefore good..” And one says “This is new, and therefore better..”	—John Brunner, in The Shockwave Rider&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Neue Ideen in Dateisystemen sind so eine Sache. Es handelt sich bei einem Dateisystem ja um Infrastrukturcode par excellence, und so reden die meisten Leute gerne von ihrem letzten Datenverlust, wenn man sie nach Dateisystemen befragt. Das ist nicht neu, ich habe in &lt;a href=&#34;https://blog.koehntopp.info/2008/05/30/the-importance-of-fail.html&#34;&gt;The Importance Of FAIL&lt;/a&gt;

 das Thema ja schon mal angeschnitten.&lt;/p&gt;
&lt;p&gt;Neue Ideen in Dateisystemen sind auch langsam. 1984 bis 1992 gab es das
&lt;a href=&#34;http://en.wikipedia.org/wiki/Sprite_operating_system&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Sprite Projekt&lt;/a&gt;

 in Berkeley, bei dem es um die Entwicklung eines rechnerübergreifenden Betriebssystems ging. Teil von Sprite war auch etwas, das sich &lt;a href=&#34;http://en.wikipedia.org/wiki/Log-structured_file_system&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;LFS (Log Structured Filesystem)&lt;/a&gt;

 nannte.&lt;/p&gt;
&lt;p&gt;LFS basiert auf der Idee, daß nur noch Writes auf eine Platte übrig bleiben, wenn man nur genug RAM zum Cachen aller Reads hat. Also quasi die Situation, in der Google jetzt grad ist. Wenn das aber so ist, so geht die Überlegung weiter, dann muß man Daten auf der Platte nicht zum Lesen optimiert ablegen, sondern das Schreiben optimieren.&lt;/p&gt;
&lt;h2 id=&#34;ein-exkurs-in-fragmentierung&#34;&gt;
    &lt;a href=&#34;#ein-exkurs-in-fragmentierung&#34;&gt;
	Ein Exkurs in Fragmentierung
    &lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;Gegeben sei MS-DOS, also ein System mit nur einem Thread, der Read-Requests generieren kann und quasi ohne Read-Cache, der solche Reads wegoptimieren kann. Dann ist das Dateisystem dann für viele Anwendungen zum Lesen optimiert, wenn alle Dateien defragmentiert abspeichert sind, d.h die Blocknummern der physikalischen Blöcke jeder Datei unmittelbar aufeinanderfolgend sind.&lt;/p&gt;
&lt;p&gt;Gegeben sei ein System mit unendlich viel Speicher, das schon unendlich lange läuft. Dann wiederum sind alle Daten im RAM gecached, und die physikalische Anordnung der Daten auf der Platte ist aus der Sicht der Lesezugriffe total schnurz.&lt;/p&gt;
&lt;p&gt;Die meisten realen Systeme liegen irgendwo dazwischen - je mehr RAM und je besser die Caches vorgeglüht, desto mehr ist es egal, wie die Daten auf der Platte angeordnet sind.&lt;/p&gt;
&lt;p&gt;Die meisten realen Systeme haben heutzutage auch mehr als einen Thread, der Requests erzeugen kann und schon von daher ist das statisch lineare Layout von Dateien auf der Platte nicht mehr unmittelbar ein Garant für dynamisch lineare Lesezugriffe.&lt;/p&gt;
&lt;h2 id=&#34;lfs-dreht-den-spieß-um&#34;&gt;
    &lt;a href=&#34;#lfs-dreht-den-spie%c3%9f-um&#34;&gt;
	LFS dreht den Spieß um
    &lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;LFS nimmt nun ein solches System mit unendlich viel Speicher und unendlich langer Laufzeit an, d.h, kümmert sich nicht um die Linearisierung von Reads, sondern lediglich noch um die Linearisierung von Writes: Das Dateisystem &lt;em&gt;hat&lt;/em&gt; kein Log, es &lt;em&gt;ist&lt;/em&gt; ein Log - ein großer Ringpuffer von Daten, bei dem die Platte von vorne nach hinten beschrieben wird und wenn man am Ende der Platte angekommen ist, fängt man von vorne an.&lt;/p&gt;
&lt;p&gt;Snapshots bekommt man bei einem solchen System gratis (Aber
&lt;a href=&#34;http://en.wikipedia.org/wiki/Log-structured_File_System_%28BSD%29&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;BSD hat es nicht implementiert&lt;/a&gt;

): Am Anfang der Platte hat man keinen Superblock, sondern einen Zeiger auf die letzten paar Superblöcke, die geschrieben wurden. Jede Operation kann als Transaktion geschrieben werden: Blöcke werden dabei nicht überschrieben, sondern geänderte Versionen des neuen Blockes werden linear rausgeschrieben.&lt;/p&gt;
&lt;p&gt;Beispiel: Eine Datei besteht aus einem Verzeichniseintrag, einer Inode und in der Inode aus Zeigern auf Datenblöcke. Überschreibt man nun das letzte KB der Datei und verlängert sie nun auch noch um ein KB, dann werden zunächst der &amp;ldquo;überschriebene&amp;rdquo; Datenblock und der neue Datenblock am Ende des Schreibpuffers neu geschrieben, dann wird die geänderte Inode der Datei dahinter neu geschrieben und dann der Block, der auf die aktuelle Version dieser Inode zeigt neu geschrieben und am Ende ein neuer Superblock.&lt;/p&gt;
&lt;p&gt;Beim Lesen folgt man dem neusten Superblock, findet man die neuste Version der Inode, und damit die geänderte und verlängerte Datei. Folgt man der älteren Kopie des Superblocks, findet man eine ältere Version der Inode derselben Datei und die dazu gehörenden älteren Versionen der Datenblöcke, also eine alte Version derselben Datei. Alle Blöcke, die zwischen beiden Versionen der Datei unverändert bleiben, sind beiden Versionen gemeinsam und nur einmal auf der Platte vorhanden.&lt;/p&gt;
&lt;h2 id=&#34;lfs-performance-stinkt&#34;&gt;
    &lt;a href=&#34;#lfs-performance-stinkt&#34;&gt;
	LFS Performance stinkt
    &lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;Nun ist es so, daß außerhalb des Googleplex RAM endlich und die Laufzeiten von Computern begrenzt sind. Daher ist es auch so, daß es zu Situationen kommen kann, in denen der File System Buffer Cache das aus Lesesicht absolut pessimale Layout von LFS nicht abschirmen kann. In solchen Fällen - die besonders von Datenbanken gerne provoziert werden - ist die Performance von LFS nur mit geologischen Fachbegriffen zu erfassen.&lt;/p&gt;
&lt;p&gt;Schon LFS auf Sprite, und sein späterer Port auf BSD Unix haben daher einen Repacker gehabt. Das ist ein Prozeß der Idlezeiten der Platte nutzt und die Daten auf dem Medium ein wenig read-freundlicher anordnet. Man kann sich das wie eine dauernd laufende Defragmentierung im Hintergrund vorstellen. Auch ReiserFS 4, das auf ähnlichen Ideen basiert hat einen solchen Repacker.&lt;/p&gt;
&lt;h2 id=&#34;in-with-the-out-old-with-the-new&#34;&gt;
    &lt;a href=&#34;#in-with-the-out-old-with-the-new&#34;&gt;
	In with the out, old with the new
    &lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;Die Idee, Daten niemals zu überschreiben ist sicherlich gut. Sie läßt sich jedoch auch mit Dateisystemen implementieren, die Daten gleich beim ersten Schreiben sinnvoll auf der Platte layouten ohne dabei eine Ringpuffer-Struktur zu erzeugen.&lt;/p&gt;
&lt;p&gt;Dateisysteme wie
&lt;a href=&#34;http://en.wikipedia.org/wiki/Write_Anywhere_File_Layout&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;WAFL&lt;/a&gt;

 auf einer NetAPP sind ein erster Schritt in diese Richtung, Suns
&lt;a href=&#34;http://en.wikipedia.org/wiki/ZFS&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;ZFS&lt;/a&gt;

 geht ihn noch konsequenter. Beide Dateisysteme stammen aus Projekten, in denen Leute arbeiten, die vorher mit verschiedenen Versionen von LFS gearbeitet haben. Insofern ist es auch nicht weiter verwunderlich, daß solche Ideen in diesen Dateisystemen auftauchen - &lt;a href=&#34;http://www.sun.com/lawsuit/zfs/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;außer man ist Patentanwalt&lt;/a&gt;

 und wundert sich aus beruflichen Gründen.&lt;/p&gt;
&lt;p&gt;Solche Dateisysteme, die nie überschreiben (und daher laufend snapshotten), aber die Platte nicht als Ringpuffer betrachten sondern schon noch layouten, nennt man Copy-On-Write Dateisysteme (COW-FS).&lt;/p&gt;
&lt;h2 id=&#34;weitere-gute-ideen-importieren&#34;&gt;
    &lt;a href=&#34;#weitere-gute-ideen-importieren&#34;&gt;
	Weitere gute Ideen importieren
    &lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;ZFS ist in diesem Zusammenhang besonders interessant, weil es noch weitere gute Ideen von anderswo importiert. &lt;a href=&#34;http://en.wikipedia.org/wiki/Episode_filesystem&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Episode&lt;/a&gt;

 zum Beispiel ist das Dateisystem der halb vergessenen DCE-Initiative, und vielen Leuten in der Geschmacksrichtung &lt;a href=&#34;http://en.wikipedia.org/wiki/AdvFS&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;AdvFS&lt;/a&gt;

 von DEC bekannt.&lt;/p&gt;
&lt;p&gt;AdvFS integriert das Storagemangement, das sonst von einem Logical Volume Manager erledigt wird und das Platzmanagement des Dateisystems ineinander. Eine File Domain kann man sich dabei wie eine Volume Group vorstellen - eine Art Kiste, in der die Blöcke enthalten sind, die beschrieben werden können.&lt;/p&gt;
&lt;p&gt;In der File Domain sind File Sets vorhanden, Dinge, die man anderswo Dateisysteme nennt. File Sets ist dabei nicht zwingend eine feste Größe zugewiesen - man kann sie sich wie Luftballons vorstellen, die in der Kiste sind und die nach bedarf aufgeblasen und verkleinert werden können. Mit einem Quota-System kann man einem File Set einen Mindestplatzbedarf und einen Maximalbedarf zuordnen und so den Platz in der File Domain verwalten. Der &lt;a href=&#34;http://advfs.sf.net/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;AdvFS-Source&lt;/a&gt;

 ist seit 2008 GPLed, aber er interessiert kaum noch jemanden.&lt;/p&gt;
&lt;p&gt;ZFS hat wie AdvFS diese Integration von Volume Management in das Dateisystem übernommen - etwas, das auf den Linux-Kernel-Mailinglisten von einigen Personen als &lt;a href=&#34;http://www.google.de/search?q=blatant&amp;#43;layering&amp;#43;violation&amp;amp;ie=utf-8&amp;amp;oe=utf-8&amp;amp;aq=t&amp;amp;rls=org.mozilla:en-US:official&amp;amp;client=firefox-a&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;blatant layering violation&lt;/a&gt;

 angesehen wurde - die Redewendung hat es zu einigem Google-Karma gebracht. Tatsächlich handelt es sich um eine andere Sicht auf den Stack, aber eine, die durchaus von anderen geteilt wird, die wie man an AdvFS sehen kann und die durchaus interne Struktur hat.&lt;/p&gt;
&lt;p&gt;Eine andere gute Idee, die ZFS aus der Datenbankwelt übernommen hat, sind Prüfsummen überall. Auf diese Weise - und nur auf diese Weise - ist es möglich, die Integrität des Dateisystems Ende-zu-Ende sicherzustellen und vor allen Dingen auch integre Teile des Systems zur Verfügung zu stellen, während man beschädigte Teile isoliert und abtrennt. Der ZFS-Code kann es nicht, aber grundsätzlich ist es möglich aus jedem defekten ZFS ein integres Sub-ZFS raus zu extrahieren und zu publizieren, während der Rest anderweitig recovered wird - die Datenstrukturen geben das her.&lt;/p&gt;
&lt;h2 id=&#34;open-source-management&#34;&gt;
    &lt;a href=&#34;#open-source-management&#34;&gt;
	Open Source Management
    &lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;Nun hat Sun ein sehr sauberes und durchaus &lt;a href=&#34;http://en.wikipedia.org/wiki/CDDL&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;politisches-strategisches Intellectual Property Management&lt;/a&gt;

. Das bewirkt, daß der Source von ZFS unter der &lt;a href=&#34;http://en.wikipedia.org/wiki/CDDL&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CDDL&lt;/a&gt;

 (&amp;ldquo;cuddle&amp;rdquo;, eine modifizierte MPL 1.1) verfügbar ist - er ist Teil von Opensolaris, FreeBSD, MacOS X und einigen anderen Systemen. Die CDDL verletzt aber die additional restrictions clause der GPL und ist mit der GPL nicht kompatibel - es wäre zwar technisch möglich einen Linux-Kernel zu bauen, der ZFS enthielte, aber es ist keinem Distributionshersteller juristisch möglich so etwas zu verteilen. ZFS läuft daher unter Linux nur als Userland-Prozeß als Teil von &lt;a href=&#34;http://en.wikipedia.org/wiki/Filesystem_in_Userspace&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;FUSE&lt;/a&gt;

.&lt;/p&gt;
&lt;h2 id=&#34;cow-fs-in-linux---btrfs&#34;&gt;
    &lt;a href=&#34;#cow-fs-in-linux---btrfs&#34;&gt;
	COW-FS in Linux - BTRFS
    &lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;Die Linux-Crowd ficht das nicht an. Im Linux-Kernelspace entwickelt man seit einiger Zeit an einem Nachfolger für die extX-Reihe von Dateisystemen, und einer der Kandidaten für eine solche Nachfolge ist &lt;a href=&#34;http://btrfs.wiki.kernel.org/index.php/Main_Page&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;BTRFS&lt;/a&gt;

 (&amp;lsquo;ButterFS&amp;rsquo;, nicht etwa &amp;lsquo;BetterFS&amp;rsquo;). Die Featureliste von BTRFS liest sich wie eine Shoppingliste in den Stammbäumen der oben genannten Ahnherrschaften: Extent-Based wie ext4 und XFS statt Bitmaps wie ext3 und ZFS, Tail-Packing wie bei Reiser3 und Reiser4, Verzeichnisse als Bäume wie inzwischen allgemein üblich, dynamisch erzeugte Inodes, wie sich fast zwingend aus COW-FS-Erfordernissen ergibt, writeable-snapshots, subvolumes (File Sets aus AdvFS), Object Level Mirroring und Striping, Checksums on Everything, Compression (und sicher auch Encryption), Integrated Multiple Device Support (besagte blatant layering violation), Online Filesystem Check (o.a. Teilvalidierung) und Online System Defragmentation (ein Repacker und die Möglichkeit des Online Filesystem Checks machen das leicht).&lt;/p&gt;
&lt;p&gt;Die BTRFS-Leute ziehen dabei ein paar echt eklige, aber vollkommen legale Stunts ab. In &lt;a href=&#34;http://btrfs.wiki.kernel.org/index.php/Conversion_from_Ext3&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Conversion from ext3&lt;/a&gt;

 wird gezeigt, wie die Metadatenstrukturen von BTRFS in ein existierendes ext3 reingemalt werden können ohne das ext3 zu beschädigen und wie kurzzeitig beide Systeme parallel existieren und die Datenblöcke teilen können. Das erlaubt eine Konvertierung von extX-Dateisystemen in BTRFS ohne Neuformatierung - ein echtes Killerfeature für Leute mit einem Arsch voll Linux-Daten.&lt;/p&gt;
&lt;p&gt;Einen schönen Überblick über die BTRFS-Strukturen findet man im &lt;a href=&#34;http://btrfs.wiki.kernel.org/index.php/Btrfs_design&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Design Dokument&lt;/a&gt;

. Zum Thema &lt;a href=&#34;http://btrfs.wiki.kernel.org/index.php/Multiple_Device_Support&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Multiple Device Support&lt;/a&gt;

 gibt es ebenfalls Seiten. Und eine Einführung in den Code gibt es auch - &lt;a href=&#34;http://btrfs.wiki.kernel.org/index.php/Code_documentation&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;hier&lt;/a&gt;

.&lt;/p&gt;
&lt;p&gt;BTRFS ist unter der GPL lizensiert, kompatibel mit dem Linux-Kernel und Bestandteil aktueller Standardkernel. Die gestern freigegebene &lt;a href=&#34;http://btrfs.wiki.kernel.org/index.php/Code_documentation#Sample_Item_Insertion&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Fedora 11 Alpha&lt;/a&gt;

 enthält BTRFS als experimentelles Dateisystem - gut genug zum Spielen und Testen, aber noch nicht gut genug für Wirkdaten.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Was bringt ext4?</title>
      <link>https://blog.koehntopp.info/2009/01/23/was-bringt-ext4.html</link>
      <pubDate>Fri, 23 Jan 2009 19:14:35 +0000</pubDate>
      
      <guid>https://blog.koehntopp.info/2009/01/23/was-bringt-ext4.html</guid>
      <description>&lt;p&gt;Der Linux-Kernel 2.6.28 enthält das ext4-Dateisystem standardmäßig und sowohl Fedora als auch Ubuntu werden es unterstützen. Was bringt ext4 an Änderungen?&lt;/p&gt;
&lt;p&gt;Ein Dateisystem ist für die meisten Benutzer eine quasi unsichtbare Sache. Es sind halt Dateien da und wenn man auf diese zugreift hat man halt Daten. So sind Dateisystem-Features für die meisten Leute also eine sehr unspektakuläre Sache. Die folgende Übersicht ist also etwas geekzentrisch.&lt;/p&gt;
&lt;h2 id=&#34;extents&#34;&gt;
    &lt;a href=&#34;#extents&#34;&gt;
	Extents
    &lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;ext2 und ext3 sind sehr traditionelle Dateisysteme, die intern im Grunde auf Technik von 1984 basieren. ext2 ist eine minimal verbessere Nachprogrammierung des BSD ffs (bei Sun und MacOS X: ufs), ext3 fügt dem lediglich das Journal zur schnelleren Wiederherstellung nach Systemcrashes zu. Beide Dateisysteme speichern die Metadaten von Dateien in einer Inode ab und merken sich die Lage der Datenblöcke in einer Datei in einem (in sogenannten Indirect-Blocks gefalteten) Array von Blocknummern. In einem Artikel von 1994 habe ich das mal &lt;a href=&#34;http://kris.koehntopp.de/artikel/dateisysteme/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;länger ausgeführt&lt;/a&gt;

.&lt;/p&gt;
&lt;p&gt;Da mit einigem Glück die meisten Dateien nicht fragmentiert gespeichert sind, besteht dieses Array also bei vielen Dateien aus einer langen Folge von unmittelbar aufeinander folgenden Blocknummern. Das ist unglaublich ineffizient.&lt;/p&gt;
&lt;p&gt;XFS, also Technik von 1994, ist eines der ersten Dateisysteme gewesen, das stattdessen mit Extents arbeitet, also Blockfolgen durch Run Length Encoding komprimiert: Statt einer Folge von Blocknummern wird die Startnummer der Folge und ihre Länge als ein Paar gespeichert. 15 Jahre später führt man dieses Detail auch in ext4 endlich ein.&lt;/p&gt;
&lt;h2 id=&#34;große-dateisysteme&#34;&gt;
    &lt;a href=&#34;#gro%c3%9fe-dateisysteme&#34;&gt;
	Große Dateisysteme
    &lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;Eine andere Technik von XFS kopiert man dabei nicht: Kompression von Blocknummern. ext4 unterstützt große Dateisysteme durch den Einsatz von 64 Bit großen Blocknummern. Da die Kernel-Infrastruktur noch nicht entsprechend mitgewachsen ist, sind derzeit 48 Bit große Blocknummern nutzbar, was für immerhin schon Exabyte-große Dateisysteme ausreicht. Anders als XFS, das ebenfalls ein 64 Bit-Dateisystem ist, speichert ext4 jedoch immer ganze 8 Byte große Blocknummern, während XFS auch relative Blockadressen zum Beginn jeweils einer Zone verwenden kann und so an vielen Stellen mit 4 Byte langen Zahlen auskommt, auch wenn es 64 Bit adressieren kann.&lt;/p&gt;
&lt;p&gt;Weil ext2 und ext3 im Grunde saubere Rewrites von FFS waren, haben sie auch die 16 Bit große Linkcount-Zahl von diesem geerbt und konnten so bis zu 32767 Links pro Datei verwalten. Da Unterverzeichnisse durch den &amp;ldquo;..&amp;quot;-Eintrag den Linkcount des Elternverzeichnisses erhöhen, war man so auf 32765 Unterverzeichnisse pro Directory beschränkt. ext4 geht hier anders vor und das Limit existiert nicht mehr.&lt;/p&gt;
&lt;h2 id=&#34;neues-blockbelegungsschema&#34;&gt;
    &lt;a href=&#34;#neues-blockbelegungsschema&#34;&gt;
	Neues Blockbelegungsschema
    &lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;Jedes Dateisystem hat Funktionen mit denen es entscheidet auf welchen physischen Blöcken der Platte eine Datei zu liegen kommt. Ziel diese Allokators ist es dabei, die Fragmentierung von Dateien zu verhindern und die Dateien so anzuordnen, daß schnell lesen darauf zugegriffen werden kann.&lt;/p&gt;
&lt;p&gt;Der Allkokator von ext2 und ext3 ist dabei notorisch schlecht. Zum einen beherrschen diese Dateisyteme keine verzögerte Blockzuweisung: Jeder Block einer Datei muß physikalisch angeordnet werden sobald der Kernel Platz für den Block im File System Buffer Cache belegt. Wenn also eine große Datei linear geschrieben wird bedeutet das, daß das Dateisystem schon versucht den ersten Block der Datei zu positionieren ohne abzuwarten ob und wie viele weitere Blöcke noch folgen werden.&lt;/p&gt;
&lt;p&gt;XFS hatte schon 1994 eine bessere Strategie: Blöcke werden im File System Buffer Cache auch ohne physikalische Positionsinformation gecached. Dadurch kann etwa ein linearer Write einer ganzen Datei erst einmal im Cache abgelegt werden und erst am Ende, wenn die Datei geschlossen und geflushed wird, muß eine Layoutentscheidung getroffen werden. Diese kennt dann aber schon die Gesamtgröße der Datei und das Dateisystem kann versuchen die Datei am Stück zu schreiben. ext4 kann nun endlich auch solche delayed allocation und reiht sich so neben XFS, ZFS, btrfs und Reiser4 ein.&lt;/p&gt;
&lt;p&gt;ext2 und ext3 belegten dabei den Platz auf der Platte einzelblockweise (in 4KB großen Blöcken) und haben dabei maximal 8 Blocks in Folge im Voraus belegt. Wenn man also ein Verzeichnis hat, in dem zwei Dateien gleichzeitig offen sind und verlängert werden (etwa: /var/log), dann entstehen so Zonen von jeweils 32 KB großen Dateistummeln, die sich gegenseitig im Weg stehen. Die Dateien sind maximal fragmentiert. ext4 fixt das dann auch in der ext?-Serie von Dateisystemen endlich.&lt;/p&gt;
&lt;p&gt;ext4 bekommt außerdem ein Feature, das sich &amp;ldquo;persistent preallocation&amp;rdquo; nennt und das es Anwendungen erlaubt, dem Dateisystem schon vorab Hinweise darauf zu geben wie groß Dateien am Ende sein werden wenn die Anwendung mit ihnen fertig sein wird. Die Anwendungen dafür sind vielfältig: Mit ein wenig Management ließe sich so zum Beispiel das Guaranteed Rate I/O von XFS nachprogrammieren und ext4 kennt mit diesem Feature und ein wenig weiterer Magie auch Online-Defragmentierung.&lt;/p&gt;
&lt;h2 id=&#34;schnelleres-fsck-und-prüfsummen&#34;&gt;
    &lt;a href=&#34;#schnelleres-fsck-und-pr%c3%bcfsummen&#34;&gt;
	Schnelleres fsck und Prüfsummen
    &lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;So wie ZFS und InnoDB es vorgemacht haben führt auch ext4 nun endlich Prüfsummen ein: Das Journal und Teile der Inode-Infrastruktur bekommen nun Prüfsummen, mit denen die Integrität der Daten nach einem Crash schneller gecheckt werden kann, sodaß der fsck optimiert werden kann und schneller abläuft wenn er dennoch einmal notwendig werden sollte. Dadurch kann auch der Journal-Commit selbst optimiert werden.&lt;/p&gt;
&lt;p&gt;Von einer durchgehenden Prüfsummen-Infrastruktur wie in ZFS und einer Online-Prüfung von Checksummen ist man in ext4 jedoch noch weit entfernt.&lt;/p&gt;
&lt;h2 id=&#34;inode-basteleien&#34;&gt;
    &lt;a href=&#34;#inode-basteleien&#34;&gt;
	Inode-Basteleien
    &lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;Die Größe einer Inode ist in ext4 gewachsen: 256 Byte Minimumgröße statt bisher 128 Bytes. ext4 macht mit dem zusätzlichen Platz sinnvolle Sachen: Dateien bekommen Timestamps, die in Nanosekunden statt wie bisher in Sekunden rechnen, time_t stirbt und der verbleibende Platz kann verwendet werden um Extentlisten oder erweiterte Dateiattribute inline zu speichern.&lt;/p&gt;
&lt;p&gt;Außerdem kann ext4 Inodes reservieren und dynamisch verwalten. Dadurch werden auch Metadata-Operationen sehr viel schneller und layouten sich besser physikalisch auf der Platte.&lt;/p&gt;
&lt;h2 id=&#34;barrier-writes&#34;&gt;
    &lt;a href=&#34;#barrier-writes&#34;&gt;
	Barrier Writes
    &lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;Schließlich erzeugt auch ext4 nun ohne Journal=Data immer konsistente Datenstrukturen auf der Platte, indem Barrier Writes verwendet werden.&lt;/p&gt;
&lt;h2 id=&#34;live-upgrade&#34;&gt;
    &lt;a href=&#34;#live-upgrade&#34;&gt;
	Live Upgrade
    &lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;ext4 kann ext3-Dateisysteme lesen. Es ist also möglich, ein ext3-Dateisystem als ext4 zu mounten. Die meisten Features, die ein ext4 einem ext3 voraus hat, sind dabei jedoch nicht nutzbar. Auch ein&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-console&#34; data-lang=&#34;console&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;go&#34;&gt;tune2fs -O extents,uninit_bg,dir_index /dev/DEV
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;go&#34;&gt;fsck -pf /dev/DEV
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;schaltet diese Features nur für neue Dateien um, baut aber die vorhandenen Dateien und Verzeichnisse nicht auf das neue Format um. Die volle Effizienzsteigerung erlangt man also nur durch ein Umkopieren der Daten auf ein neue angelegtes, leeres ext4-Dateisystem.&lt;/p&gt;
&lt;h2 id=&#34;was-fehlt-noch&#34;&gt;
    &lt;a href=&#34;#was-fehlt-noch&#34;&gt;
	Was fehlt noch?
    &lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;Grub unterstützt ext4 bisher noch nicht (d.h. die Grubs, die das können, haben es noch in keine Distro geschafft).&lt;/p&gt;
&lt;p&gt;(siehe auch:
&lt;a href=&#34;http://kernelnewbies.org/Ext4&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Kernelnewbies: ext4&lt;/a&gt;

)&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Git &#34;gewinnt&#34;</title>
      <link>https://blog.koehntopp.info/2009/01/05/git-gewinnt.html</link>
      <pubDate>Mon, 05 Jan 2009 08:52:56 +0000</pubDate>
      
      <guid>https://blog.koehntopp.info/2009/01/05/git-gewinnt.html</guid>
      <description>&lt;p&gt;Irgendwann war allen klar, daß CVS es nicht mehr bringt und was Besseres her muss.
Das hat dazu geführt, daß ich statt einem Versionskontrollsystem in 2000 jetzt in 2009 etwa vier davon parallel verwenden muss.
Da wäre einmal das traditionelle &amp;ldquo;besser als CVS, aber sonst alles genauso&amp;rdquo; SVN, und dann eine Reihe von verteilten Versionskontrollsystemen, namentlich git, bzr (&amp;ldquo;Bazar&amp;rdquo;), hg (&amp;ldquo;Mercurial&amp;rdquo;).
Neben diesen gibt es dann einen Haufen relativ wenig Gebrauchtes oder experimentelles Zeugs, das sich mangels Community nicht anzusehen lohnt.&lt;/p&gt;
&lt;p&gt;Blickt man auf die Benutzerlandschaft in 2009, wird klar: Git gewinnt.
Einmal ist
&lt;a href=&#34;http://www.perlfoundation.org/perl5/index.cgi?perl_git_repositories&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;der Perl Source&lt;/a&gt;


samt History nun nach Git konvertiert, dann
&lt;a href=&#34;http://blogs.gnome.org/newren/2009/01/03/gnome-dvcs-survey-results/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;zeigt die Gnome-Umfrage&lt;/a&gt;


einen klaren Vorsprung von Git, der Kernel verwendet sowieso git und bei KDE denkt man auch über Git als verteiltes Versionsverwaltungssystem nach.
Auch der X-Server von X.org wird mit Git versioniert.&lt;/p&gt;
&lt;p&gt;Schön, daß hier nun endlich eine Konvergenz absehbar ist (nur mein MySQL-Zeugs muss ich wohl weiter mit bzr pullen).&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Skalierung in die Breite</title>
      <link>https://blog.koehntopp.info/2008/11/20/skalierung-in-die-breite.html</link>
      <pubDate>Thu, 20 Nov 2008 10:59:41 +0000</pubDate>
      
      <guid>https://blog.koehntopp.info/2008/11/20/skalierung-in-die-breite.html</guid>
      <description>&lt;p&gt;Dies ist quasi der 2. Teil zum
&lt;a href=&#34;https://blog.koehntopp.info/2008/11/17/das-mysql-sun-dilemma.html&#34;&gt;MySQL-Sun-Dilemma&lt;/a&gt;

:&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://www.theregister.co.uk/2008/11/20/many_cored_processors_and_software/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;In diesem Kommentar&lt;/a&gt;


bei El Reg sehen wir dasselbe Problem in einigen Jahren auf Intel zu kommen.
Der Kommentator sieht wie ich, daß vorhandene Software in der Regel nur einen Core busy hält, oder einen Core pro Verbindung belegen kann, wenn wir über Serversoftware reden.&lt;/p&gt;
&lt;p&gt;Ein dicker Multicore-Rechner macht vorhandene Software also nicht schneller.
Er sorgt nur dafür, daß die Maschine bei mehr Last (mehr Verbindungen) nicht langsamer wird, so denn der Rest der Infrastruktur, also etwa Platten, Netz und Speicherbus, mithalten können.&lt;/p&gt;
&lt;p&gt;Für den Kommentator besteht die Lösung des Dilemmas (viele Cores, aber Software ist nicht parallel genug) in mehr und besseren Hypervisors, mit denen man bisher getrennt laufende Maschinen auf einem Multicore-Rechner durch Virtualisierung zusammenziehen kann.&lt;/p&gt;
&lt;p&gt;Doch das ist nur eine Interims-Lösung mit der man immerhin ein wenig Nutzen aus solchen Maschinen ziehen kann, während sich grundsätzlich an dem Problem nichts ändert:
Wir haben Software, die für schnellere CPUs optimiert ist, aber wir brauchen Software, die für breitere CPUs optimiert ist.&lt;/p&gt;
&lt;p&gt;Doch in der aktuellen Programmierinfrastruktur fehlt es uns an allem. Programmierer sind zurzeit nicht gewohnt, Arbeit auf viele Kontrollflüsse aufzuteilen, und wenn sie es tun, tun sie es oftmals auf die falsche Weise.
Wir haben kaum Werkzeuge, die solche Aufteilung erleichtern, und es fehlt an Methoden des Debuggings für solche Systeme.
Probleme in solchen Systemen entstehen oft durch Wartezeiten und sich zuziehende Locks, aber wir haben nur unzureichende Methoden, solche Probleme zu messen, zu visualisieren und zu analysieren.
Und zu guter Letzt ist die aktuelle Generation von Entwicklern nicht gut ausgebildet, um in solchen Umfeldern effektiv tätig zu werden.&lt;/p&gt;
&lt;p&gt;Wenn man sich eine typische Webanwendung heute ansieht, dann stellt man fest, daß sie kaum in der Lage ist mehr als eine CPU zur Zeit beschäftigt zu halten.
In einem System mit zwei Ebenen hat man Web-Frontends, die Anfragen entgegennehmen und Code im Webserver oder als Coprozess zum Webserver ausführen.
Der Browser des Anwenders ist in dieser Zeit meistens Idle, der Kontrollfluss ist also über das Netz zum Server übergegangen und der Browser wartet.&lt;/p&gt;
&lt;p&gt;Die Webanwendung wird zur Generierung der Webseite nun meistens einen externen Cache wie einen memcached oder einen externen Datenbankserver befragen.
Auch hier erfolgt die Anfrage in der Regel synchron und 1:1, sodaß die Webanwendung wartet während die CPU des memcached oder des Datenbankservers tätig wird.
Wieder ist nur eine CPU zur Zeit mit der Bearbeitung der Anfrage beschäftigt, während der Browser und die Webanwendung warten.&lt;/p&gt;
&lt;p&gt;Natürlich hilft Multitasking hier ein wenig:
Während der Browser wartet kann der Desktop des Anwenders andere Anwendungen abarbeiten und während das Webfrontend auf die Antwort der Datenbank wartet können andere Requests abgearbeitet werden.
Letztendlich ist es aber nicht möglich, die Abarbeitung einer einzelnen Anfrage dadurch zu beschleunigen, daß man Systeme mit mehr Cores einsetzt.&lt;/p&gt;
&lt;p&gt;Das Problem besteht, wie sich schon andeutet, in der zu engen Kopplung und zu engen Synchronisation der Programmschritte, die notwendig sind, um eine Aufgabe abzuarbeiten.
Wir schreiben unsere Programme als lineare Abfolge von Einzelschritten, aber wir müssen lernen, unsere Algorithmen wie in der
&lt;a href=&#34;http://de.wikipedia.org/wiki/Netzplantechnik&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Netzplantechnik&lt;/a&gt;


zu notieren:
Als Einheiten sinnvoller Größe, die als Block notiert werden und bei dem zu jedem Block die Vor- und Nachbedingungen, also die notwendigen Synchronisationen mit anderen Schritten notiert werden.&lt;/p&gt;
&lt;p&gt;Diese Blöcke könnten dann von einem Scheduler unter Berücksichtigung der vorhandenen Hardware und unter Berücksichtigung der externen Parallelität durch konkurrente Anfragen breiter oder schmaler scheduled werden:
Auf einem System mit 2 Cores ist es nicht sehr sinnvoll, mehr als z.B. 4 Blöcke parallel abzuarbeiten, auf einem System mit 256 Cores kann man aber unter Umständen eine Parallelität von z.B. 512 schedulen
(Meiner Erfahrung nach ist es sinnvoll, die Anzahl der vorhandenen Cores um ca. den Faktor 2 zu überbuchen, damit auch bei I/O-Wait noch genug CPU-Verbrauch auftritt).&lt;/p&gt;
&lt;p&gt;Auf einem System, auf dem man alleine ist, kann der Scheduler eine einzelne Anfrage auf die volle Breite der Hardware breit ziehen (also 4 oder 512 aus den Beispielen oben).
Auf einem System, auf dem jedoch n konkurrente Requests unterschiedlicher Anwender eingehen sollte man jedem Anwender 1/n-tel der vorhandenen Kapazität zuteilen und die einzelnen Requests nicht auf das ganze System breit ziehen.&lt;/p&gt;
&lt;p&gt;Und schließlich ergibt sich aus den Abhängigkeiten des Netzplanes und Ausführungszeiten im System eine maximale Breite, die sich daraus ergibt, wie sich die Abhängigkeiten der Blöcke untereinander verzahnen, und die einschränkt wie viele Cores denn das System für diesen Code beschäftigt halten kann.
Es ist Aufgabe des Entwicklers, die Problemlösung so zu formulieren, daß die Abhängigkeiten hier eine maximale Parallelisierung erlauben.&lt;/p&gt;
&lt;p&gt;An keiner Stelle hier setze ich eine bestimmte Ausfürungsstruktur voraus - ein solches System läßt sich mit Threads innerhalb eines Prozesses aufsetzen oder mit Prozessen, die über einen IPC-Mechanismus miteinander kommunizieren.
Der Unterschied ist im Grunde, daß die Kommunikation von Threads innerhalb eines Prozesses wahrscheinlich weniger Latenz hat als die Kommunikation von Prozessen über IPC oder gar von Prozessen über ein Netzwerk.
Auf der anderen Seite ist ein Multithread-System auf eine einzige Schachtel eingeschränkt, während ein System von Prozessen mit Netzwerk-Kommunikation nicht mit auf einer Schachtel mit 256 Threads laufen könnte, sondern auch auf 32 Schachteln mit je 8 Threads und einem schnellen Netz dazwischen.&lt;/p&gt;
&lt;p&gt;Technisch möglich sein sollte beides.
Es ist also wünschenswert, daß wir unseren Code so notieren können, daß man dort die konkrete Implementierung von Ausführung und Kommunikation der einzelnen Kontrollflüsse nicht auf einen bestimmten Mechanismus festlegt:
Ich will einmal Code schreiben, und der sollte dann auf einer 5440 als ein Prozess mit LWPs scheduled werden können oder auf einem Netz von 16 16-Core Maschinen mit irgendeinem Low Latency Interconnect.
Idealerweise ohne daß ich den Source noch mal irgendwo durch filtrieren muß um das alles zur Ausführung zu bringen.&lt;/p&gt;
&lt;p&gt;Ein solches Toolkit sollte Werkzeuge zur Visualisierung mitbringen:
Ich will meinen Code und meine Threads als eine Serie von Blasen in einem Netzplan sehen können, und die Abhängigkeiten zwischen den einzelnen Abschnitten erkennen können.&lt;/p&gt;
&lt;p&gt;Und ich will das alles sinnvoll messen und simulieren können:
Bei einen angenommenen externen n von 200 und der vorhandenen Codestruktur mit einer internen Parallelität von 4 im kritischen Abschnitt, werden sich meine Locks zuziehen oder kann ich das realistischerweise annehmen, daß der Mist auch unter dieser Last sinnvoll skaliert?
Wenn nein, wo und warum wird es explodieren?&lt;/p&gt;
&lt;p&gt;Das alles gibt es derzeit so nicht.
Oder wenn es das gibt, ist es  nicht gut integriert und nicht sehr bekannt.
Und bevor dieses Problem nicht gelöst ist &lt;em&gt;und&lt;/em&gt; wir der aktuellen Generation von Programmierern beigebracht haben, damit routinemäßig zu arbeiten werden wir das Multicore-Problem nicht gelöst haben.&lt;/p&gt;
&lt;p&gt;Darum, liebe mitlesende Sun-Gemeinde, könnt Ihr Euch auch gerne super engineerte proprietäre Lösungen auf den Leib schneidern:
Bevor das nicht Allgemeingut ist, also als Open Source Lösung auf dem Level &amp;ldquo;PHP&amp;rdquo; überall verfügbar ist und 15-jährige Schulkinder so was in ihrem Webhostingpaketen verwenden, so lange werdet Ihr nicht genug Software in der Welt finden, um Eure Mehrkernkisten unter Dampf zu setzen.
Denn wir brauchen Breite nicht nur im Code, um mit diesen Maschinen fertig zu werden, sondern wir brauchen Breite auch in der Entwicklung.
Und der Laden, der diese Breite in der Entwicklung 0wned, dem gehört die Ideenwelt der nächsten Generation Entwickler.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Markteintrittsschranke</title>
      <link>https://blog.koehntopp.info/2008/06/15/markteintrittsschranke.html</link>
      <pubDate>Sun, 15 Jun 2008 10:42:08 +0000</pubDate>
      
      <guid>https://blog.koehntopp.info/2008/06/15/markteintrittsschranke.html</guid>
      <description>&lt;p&gt;In
&lt;a href=&#34;http://www.heise.de/tp/r4/artikel/28/28010/1.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Die Wikipediatisierung des Wissens&lt;/a&gt;


gibt es einen weiteren Artikel, der versucht, das Phänomen Wikipedia und nicht auf Code basierende Open Source Strukturen zu analysieren.
Der Artikel verwendet das übliche Angstvokabular, das sich auch in vergleichbaren Artikel im Spiegel oder der Süddeutschen Zeitung findet:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Die entscheidende Frage ist:
Ist die beeindruckende statistische Progression von Wikipedia auch eine kulturelle Revolution oder zumindest ihr Vorbote?
Oder ist sie ein Teil der Informations-Versklavung und Wissens-Nivellierung im Zeitalter der allgemeinen Datenexplosion?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Man beachte die Wortwahl: &amp;ldquo;Revolution&amp;rdquo;, &amp;ldquo;Versklavung&amp;rdquo;, &amp;ldquo;Nivellierung&amp;rdquo;, &amp;ldquo;Explosion&amp;rdquo;.
Dem kann ich nur einen
&lt;a href=&#34;http://de.wikipedia.org/wiki/Erikativ&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Erikativ&lt;/a&gt;


entgegen setzen: &lt;em&gt;seufz&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Klar kann man an der Wikipedia rum kritisieren, und in ihr - wie in Artikeln in traditionellen Medien üblich - den Untergang des Abendlandes sehen.
Oder wie in dem verlinkten Telepolis-Artikel aus den nationalen Unterschieden und der wechselnden Qualität metaphysische Volksseelenbefindlichkeiten zu extrahieren.&lt;/p&gt;
&lt;p&gt;Aber das alles ist meiner Ansicht nach gar nicht der wesentliche Punkt.
Wikipedia ist für Lexika wie Linux für Betriebssysteme in gewisser Weise definitiv.
Nicht definitiv in dem Sinne, daß es der Weisheit letzter Schluss ist, sondern definitiv in dem Sinne, daß es für einen bestimmten Markt das untere Ende der Messlatte festlegt.
Jedes kommerzielle Produkt muss sich an seiner frei verfügbaren Variante messen lassen und die positiven Eigenschaften des frei verfügbaren Produktes nicht nur erreichen, sondern auch noch so viele weitere Eigenschaften haben, daß es dem Kunden das Ausgeben von Geld wert ist.&lt;/p&gt;
&lt;p&gt;Das ist spannend, denn es kann dazu kommen, daß das freie Produkt den Markt komplett verschließt - es gibt keine essenziellen Probleme mehr, die von einem kommerziellen Produkt gelöst werden, aber vom frei verfügbaren Produkt nicht.
Ein kommerzielles Produkt, das nur Nice-To-Have Eigenschaften liefert, aber nichts Essenzielles, hat enorme Schwierigkeiten am Markt seinen Preis zu rechtfertigen.
Aber siehe das Apple-Korollar: Design und Usability sind essenzielle Eigenschaften!&lt;/p&gt;
&lt;p&gt;Es ist auch spannend, weil ein freies Produkt den Markt so dominieren kann, daß es nicht mehr ausreichend ist, die Eigenschaften des freien Produktes mit dem eigenen Produkt nachzubauen.
Stattdessen muss plötzlich Kompatibilität hergestellt werden.
Ein Beispiel hierfür ist Linux - sowohl AIX als auch Solaris haben Umgebungen, in denen sie Linux-API und Linux-Dateisystemlayout simulieren, damit Linux-Anwendungen auch in deren Umgebungen ausführbar werden.&lt;/p&gt;
&lt;p&gt;Ein weiteres Beispiel hierfür ist das Perl, das in Solaris mitgeliefert wird, und das unbrauchbar ist, weil es mit dem Sun-Compiler gebaut worden ist, der zum GCC subtil inkompatibel ist.
Aus verschiedenen Gründen gibt es eine ganze Menge Leute, die unter Solaris mit dem GCC arbeiten oder arbeiten müssen, und die daher ihr Perl erst einmal neu bauen müssen, damit sie mit dem GCC gebaute Perl-XS Erweiterungen stabil zum Laufen bekommen können.&lt;/p&gt;
&lt;p&gt;Allgemeiner gesagt legt das frei verfügbare Produkt eine Markteintrittsschranke fest, weil das freie Produkt definiert, was sowieso schon jeder weiß (Wikipedia) oder kann (Open-Source-Software), sodass das betreffende Wissen oder die betreffende Funktion verschenkt wird.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>CS101: From NAND to Tetris in 14 simple steps</title>
      <link>https://blog.koehntopp.info/2008/06/01/cs101-from-nand-to-tetris-in-14-simple-steps.html</link>
      <pubDate>Sun, 01 Jun 2008 04:30:35 +0000</pubDate>
      
      <guid>https://blog.koehntopp.info/2008/06/01/cs101-from-nand-to-tetris-in-14-simple-steps.html</guid>
      <description>&lt;p&gt;Shimon Schocken preist seinen Kurs &amp;ldquo;From NAND to Tetris in 14 steps&amp;rdquo; an:&lt;/p&gt;
&lt;p&gt;&lt;object width=&#34;425&#34; height=&#34;355&#34;&gt;&lt;param name=&#34;movie&#34; value=&#34;http://www.youtube.com/v/JtXvUoPx4Qs&amp;hl=en&#34;&gt;&lt;/param&gt;&lt;param name=&#34;wmode&#34; value=&#34;transparent&#34;&gt;&lt;/param&gt;&lt;embed src=&#34;http://www.youtube.com/v/JtXvUoPx4Qs&amp;hl=en&#34; type=&#34;application/x-shockwave-flash&#34; wmode=&#34;transparent&#34; width=&#34;425&#34; height=&#34;355&#34;&gt;&lt;/embed&gt;&lt;/object&gt;&lt;/p&gt;
&lt;p&gt;Wenn mich Leute nach Informatik fragen, dann sage ich ja meistens: &amp;ldquo;Informatik die Wissenschaft von 0 und 1 - komplizierter wird es nicht mehr, nur mehr.&amp;rdquo;&lt;/p&gt;
&lt;p&gt;Die Schwierigkeit in der Informatik ist mehr die Anzahl der Abstraktionsebenen, die übereinander gestapelt werden, nicht die Kompliziertheit des Stoffes.
Weil Abstraktionen immer Lecks haben, muss man in der Informatik immer ein paar dieser Ebenen gleichzeitig offen haben und &amp;ldquo;high level&amp;rdquo; und &amp;ldquo;low level&amp;rdquo; zur selben Zeit denken.
Das ist es, was Leute verwirrt.&lt;/p&gt;
&lt;p&gt;Schocken hat aus dieser Idee einen Kurs gemacht. Und der ist
&lt;a href=&#34;http://www1.idc.ac.il/tecs/plan.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;frei verfügbar&lt;/a&gt;

,
ebenso wie die
&lt;a href=&#34;http://www1.idc.ac.il/tecs/software.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Software&lt;/a&gt;


dazu.
Und so kann man hier Chips designen und simulieren, eine CPU entwickeln und simulieren, eine VM entwickeln, und simulieren, Assembler und Compiler für die VM schreiben, ein OS obendrauf bauen und schließlich Spiele darauf laufen lassen.&lt;/p&gt;
&lt;p&gt;Wer es nicht online mag:
&lt;a href=&#34;https://www.amazon.de/Elements-Computing-Systems-second-Principles-ebook/dp/B084V7R8PT&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;The Elements of Computing Systems&lt;/a&gt;


ist auch als Buch zu haben. Ich bin begeistert.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Historische Kernelsourcen</title>
      <link>https://blog.koehntopp.info/2008/05/27/historische-kernelsourcen.html</link>
      <pubDate>Tue, 27 May 2008 08:08:46 +0000</pubDate>
      
      <guid>https://blog.koehntopp.info/2008/05/27/historische-kernelsourcen.html</guid>
      <description>&lt;p&gt;In anderen Artikeln habe ich ja schon an Hand von &lt;a href=&#34;http://lxr.linux.no/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;http://lxr.linux.no/&lt;/a&gt;

 Strukturen im Linux-Kernel referenziert und in Erklärungen verwendet.&lt;/p&gt;
&lt;p&gt;Auf &lt;a href=&#34;http://www.tamacom.com/tour.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Tamacom&lt;/a&gt;

 gibt es zum Vergleich die Quellen von Linux 2.6, FreeBSD 7, NetBSD 4.x, OpenBSD 4.x, GNU Hurd 0.3 und OpenSolaris zum verlinken. Auch liegen dort ein UNIX V7 Kernel und ein 4.3BSD rum.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://minnie.tuhs.org/UnixTree/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Minnie&lt;/a&gt;

 hat eine schöne Sequenz wirklich alter Unix-Trees, der die Entwicklung der 70er Jahre und einige BSD-Trees miteinander vergleicht. Das älteste nützliche Zeugs von dort ist &lt;a href=&#34;http://minnie.tuhs.org/UnixTree/Nsys/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;von 1973&lt;/a&gt;

.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The nsys files are timestamped August 31, 1973. This is consistent with other known dates. The files use structs, but in December 1972 the C compiler didn&amp;rsquo;t support structs. In September 1973, the C version of the kernel finally supplanted the assembly version, and the kernel here certainly works fine.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Mit anderen Worten, wir schauen hier der gleichzeitigen Entstehung der Sprache C und des Unix-Kernels zu. So kennt der V3 Kernel &lt;a href=&#34;http://minnie.tuhs.org/UnixTree/V3/usr/man/man2/stat.2.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;noch keine GID&lt;/a&gt;

 im stat(2) Systemaufruf, und der Compiler kann noch keine &amp;ldquo;struct&amp;rdquo; - im nsys-Kernel 6 Monate später existieren beide - und andere wichtige Erfindungen werden gemacht.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://minnie.tuhs.org/UnixTree/Nsys/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Goldenes Zitat&lt;/a&gt;

:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The number of UNIX installations is now above 20&amp;hellip;&lt;/p&gt;
&lt;/blockquote&gt;
</description>
    </item>
    
    <item>
      <title>Echte Helden</title>
      <link>https://blog.koehntopp.info/2007/09/07/echte-helden.html</link>
      <pubDate>Fri, 07 Sep 2007 18:00:00 +0000</pubDate>
      
      <guid>https://blog.koehntopp.info/2007/09/07/echte-helden.html</guid>
      <description>&lt;p&gt;&lt;p class=&#34;md__image&#34;&gt;
  &lt;img src=&#34;https://blog.koehntopp.info/uploads/yodaorigami.jpg&#34; alt=&#34;&#34;  /&gt;
&lt;/p&gt;

&lt;/p&gt;
&lt;p&gt;Man hat mich gebeten, auf den &lt;a href=&#34;http://www.kieler-linuxtage.de/programm.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Kieler Linuxtagen&lt;/a&gt;

 am 7/8. September etwas salbungsvolles zum Thema 15 Jahre Linux zu erzählen.
Und das etwas mit Kiel zu tun hat.&lt;/p&gt;
&lt;p&gt;Damit bin ich offiziell ein alter Sack.&lt;/p&gt;
&lt;p&gt;Sobald man gebeten wird, über Rückblicke zu referieren und von der guten alten Zeit zu schwelgen ist man offiziell ein alter Sack.&lt;/p&gt;
&lt;p&gt;&lt;p class=&#34;md__image&#34;&gt;
  &lt;img src=&#34;https://blog.koehntopp.info/uploads/mcgyver.jpg&#34; alt=&#34;&#34;  /&gt;
&lt;/p&gt;

&lt;/p&gt;
&lt;p&gt;So die Sorte Typ, die von den Helden vergangener Zeiten erzählt.
Für die Richard Dean Anderson noch McGyver war, der mit dem Taschenmesser in der Hand noch selber Leben rettete, und nicht Sesselpuper bei Stargate.
Damals hatten Telefone noch Drehscheiben, und das Leben war generell noch viel härter und damals es brauchte noch echte Helden&amp;hellip;&lt;/p&gt;
&lt;p&gt;&lt;p class=&#34;md__image&#34;&gt;
  &lt;img src=&#34;https://blog.koehntopp.info/uploads/74ls00.jpg&#34; alt=&#34;&#34;  /&gt;
&lt;/p&gt;

&lt;/p&gt;
&lt;p&gt;Einer der Helden aus grauer Vorzeit hier in Kiel war ja Cornelius.
Das war ein ganz Harter.
Der hat zum Frühstück 74LS00 gefressen, ohne Milch!
Und damals gab es noch gar kein SMD.
Jemand, der Fehler mit dem Oszilloskop debugged.
So ein Typ, der gar kein Modem braucht, sondern den Carrier auch selber Pfeifen kann.
Das Telefonnetz war damals, für die Jüngeren unter Euch, übrigens noch Analog.&lt;/p&gt;
&lt;p&gt;Cornelius hat den Unix-Kram hier in Kiel mit aufgebracht.
Ich war damals ja noch so ein Amiga-Kiddie und dachte, ich bin cool, weil ich Freunde hatte, die sich selber mit einem Frequenzzähler auf dem Adreßbus eine echte Megahertz-Anzeige gebaut hatten statt so ein Fake-Teil, das immer dieselbe Zahl anzeigte.
Damals war so was noch einstellig, also so eine Megahertz-Anzeige, da ging so was mit dem Taschengeld.&lt;/p&gt;
&lt;p&gt;&lt;p class=&#34;md__image&#34;&gt;
  &lt;img src=&#34;https://blog.koehntopp.info/uploads/source.jpg&#34; alt=&#34;&#34;  /&gt;
&lt;/p&gt;

&lt;/p&gt;
&lt;p&gt;Cornelius ist so die Sorte Typ, für die die Dateiendung &amp;ldquo;.c&amp;rdquo; für Configuration stand und &amp;ldquo;cc&amp;rdquo; für &amp;ldquo;Configuration Converter&amp;rdquo;.
Ich glaube, Cornelius hat sich damals ein wenig darüber geärgert, daß sein Nachname mit &amp;ldquo;K&amp;rdquo; anfing und nicht mit &amp;ldquo;C&amp;rdquo;, denn so hatte er nicht die Initialen &amp;ldquo;cc&amp;rdquo; wie sein Compiler.&lt;/p&gt;
&lt;p&gt;Cornelius hat damals jedenfalls die ersten Unix-Kisten eingeschleppt.
Natürlich gab es so etwas damals nicht fertig, sonst hätte ihn das wohl auch nicht interessiert.
In seinem Fall waren das stattdessen Commodore 900 mit Coherent 0.7.1 Special Binary Prerelease, Prototypen von Rechnern, die Commodore nie gebaut hat, weil sie selbst für Commo zu Scheiße waren.
Das war mein erstes Unix.&lt;/p&gt;
&lt;p&gt;&lt;p class=&#34;md__image&#34;&gt;
  &lt;img src=&#34;https://blog.koehntopp.info/uploads/cbm900.gif&#34; alt=&#34;&#34;  /&gt;
&lt;/p&gt;

&lt;/p&gt;
&lt;p&gt;Das Coherent war übrigens von Mark Willams Company.
Die haben sonst so Flipperautomaten gebaut.
Flipperautomaten sind, für die Jüngeren unter Euch, so analoge Videospiele mit echten Kugeln drin.&lt;/p&gt;
&lt;p&gt;Cornelius lebt inzwischen übrigens in Texas.
Wenn ich so drüber nachdenke paßt das schon, so irgendwie.&lt;/p&gt;
&lt;p&gt;Ich hab dann später mit SCO Xenix weiter gemacht und so eine Mailbox geerbt.
SCO, für die Jüngeren unter euch, waren damals noch die Guten. Damals gab es weniger Juristen und von Patentanwälten hatte noch nie jemand was gehört.&lt;/p&gt;
&lt;p&gt;&lt;p class=&#34;md__image&#34;&gt;
  &lt;img src=&#34;https://blog.koehntopp.info/uploads/crazy_dots.jpg&#34; alt=&#34;&#34;  /&gt;
&lt;/p&gt;

&lt;/p&gt;
&lt;p&gt;Geerbt habe ich sie von einem anderen echten Helden, von Jens.
Jens war auch ein ganzer Kerl.
Der hat die Grafikkarte in seinem Mega ST noch selbst gebaut, und auch den Treiber dafür selber geschrieben.
Und die Mailbox-Software für seine Mailbox auch.&lt;/p&gt;
&lt;p&gt;Jens braut inzwischen übrigens sein eigenes Bier.
Das paßt auch so, irgendwie.&lt;/p&gt;
&lt;p&gt;Xenix hatte so das Problem, daß da kein richtiges TCP/IP bei war.
Das war kein Problem, solange man mit Modems und UUCP gearbeitet hat - wir hatten damals noch kein Online und auch kein X, sondern nur eine Kommandozeile.
Will man X, braucht man Netz, so für localhost.
Also mußte ein System V her, ein Interaktive Unix, von Kodak.&lt;/p&gt;
&lt;p&gt;Jedenfalls, wenn man in so einem Interactive das TCP/IP in Betrieb nimmt, etwa weil man X machen will, und das localhost braucht, dann stellt man fest, daß so ein System V Kernel Memory Leaks hat und daß dann binnen einer Viertelstunde schon mal 500K Speicher voll laufen.
Ein Kilobyte, für die Jüngeren unter Euch, ist übrigens ein Millionstel Gigabyte.&lt;/p&gt;
&lt;p&gt;So stand ich also damals, ich weiß es noch wie heute, vor dem Problem, ein
Unix her zu kriegen mit funktionierendem oder reparierbarem TCP/IP.
Das war am 30. Dezember 1992, also vor etwa 15 Jahren, und das ist der Grund warum ich heute hier vorne stehe.&lt;/p&gt;
&lt;p&gt;&lt;p class=&#34;md__image&#34;&gt;
  &lt;img src=&#34;https://blog.koehntopp.info/uploads/schneekatastrophe.jpg&#34; alt=&#34;&#34;  /&gt;
&lt;/p&gt;

&lt;/p&gt;
&lt;p&gt;Ich bin damals also mit dem Fahrrad zur Uni geradelt.
Bergauf, durch den Schnee.
Schnee, für die Jüngeren unter Euch, ist gefrorenes Wasser.
Damals hatten wir noch keine Klimakatastrophe.
Ich hab mir dann einen Kernel und ein paar Sourcen auf ein Tape gezogen.
Das Tape war ein sogenanntes Quarterinch Tape.
Das bezieht sich nun nicht auf die Größe der Kassette, sondern die Breite des Bandes.
Die Kassette war größer, so 10x7cm ungefähr, also wie ein Taschenbuch.
Ein Buch, für die Jüngeren unter Euch, ist so was wie eine DVD, nur mit Text statt Bildern und ohne Strom.
Das Tape jedenfalls, das hatte eine Rückwand aus massivem Stahl, 4mm dick.
Cornelius stand tierisch auf solche Tapes.&lt;/p&gt;
&lt;p&gt;Mit dem Linux auf dem Tape bin ich dann nach Hause geradelt, wieder durch den Schnee, natürlich, denn damals blieb so was noch liegen und natürlich auch wieder bergauf, denn damals ging es noch nicht bergab.
Und hab mir den Kram compiliert und installiert.
Danach hab ich dann erst mal die Permissions und Owner von dem Zeug richtig gesetzt, denn wir hatten damals noch keine Distributionen.&lt;/p&gt;
&lt;p&gt;Und so kam es, daß ich am 31. Dezember 1992 mit einem SLS und einem Kernel 0.96.6 in das neue Jahr startete.
Das war schon ziemlich cool.
SLS war übrigens von Donald Becker.
Der schreibt inzwischen übrigens Netzwerktreiber.
Das paßt auch, irgendwie.&lt;/p&gt;
&lt;p&gt;&lt;p class=&#34;md__image&#34;&gt;
  &lt;img src=&#34;https://blog.koehntopp.info/uploads/twm.png&#34; alt=&#34;&#34;  /&gt;
&lt;/p&gt;

&lt;/p&gt;
&lt;p&gt;Endlich X.
640x480 in 256 Farben.
Das war schon was.
Man konnte seinen Monitor auch übertakten, dann ging mehr.
Ein Monitor, für die Jüngeren unter Euch, das ist so eine Art analoges LCD, damals hatten wir noch kein DRM.
Da ging so was noch mit dem Übertakten.&lt;/p&gt;
&lt;p&gt;&lt;p class=&#34;md__image&#34;&gt;
  &lt;img src=&#34;https://blog.koehntopp.info/uploads/e10000.jpg&#34; alt=&#34;&#34;  /&gt;
&lt;/p&gt;

&lt;/p&gt;
&lt;p&gt;Naja, so fing das damals jedenfalls alles an.
Und dann ging es Schlag auf Schlag.
Man kann sich bei so einem Vortrag schnell in die Technik versteigen, und wie geil Linux inzwischen so ist - es rennt auf einem Palm Pilot und einer Cray, auf einem iPod und auf einer Enterprise-Class Solaris Kiste oder einer SGI mit 1024 Prozessoren.&lt;/p&gt;
&lt;p&gt;Aber wenn man sich Sagen aus Grauer Vorzeit so ansieht, dann geht es da weniger um die Monster, sondern im Grunde geht es um die Helden, und ihre Taten.
So auch im Zusammenhang mit Linux und im Zusammenhang mit dem Universum als solches.&lt;/p&gt;
&lt;p&gt;Also ist dies heute ein Vortrag über Helden und Heldentum.&lt;/p&gt;
&lt;p&gt;Ein Held ist jemand, der einen Kampf aufnimmt, um die Welt zu verändern, einen Kampf der anfangs aussichtlos, ja sogar sinnlos erscheint.
Manche Helden opfern sich, oder opfern persönliche Vorteile, um die Welt, oder das Universum als solches, für uns alle in einen besseren Ort zu verwandeln.&lt;/p&gt;
&lt;p&gt;&lt;p class=&#34;md__image&#34;&gt;
  &lt;img src=&#34;https://blog.koehntopp.info/uploads/ostsee.jpg&#34; alt=&#34;&#34;  /&gt;
&lt;/p&gt;

&lt;/p&gt;
&lt;p&gt;Der erste Held, um den es hier gegen soll, ist natürlich Linus Torvalds.
Er ist ein Jedermann aus einer Gegend gar nicht weit von hier, ein Schwede in Finnland, ein Informatikstuent.
Wer hier war schon mal in Schweden oder in Finnland?
Wer hat Informatik studiert?
Genau.
Ihr hättet Linus sein können.&lt;/p&gt;
&lt;p&gt;Linus hat sich also hingestellt, und sein Zeug ins Netz gekippt und  gesagt:
Hier ist mein Zeug und ich habe es in Netz gekippt, jetzt könnt ihr spielen.
Wer hier hat schon mal Zeugs von sich ins Netz gekippt, damit andere spielen können?
Genau.
Ihr hättet Linus sein können.&lt;/p&gt;
&lt;p&gt;&lt;p class=&#34;md__image&#34;&gt;
  &lt;img src=&#34;https://blog.koehntopp.info/uploads/linus.gif&#34; alt=&#34;&#34;  /&gt;
&lt;/p&gt;

&lt;/p&gt;
&lt;p&gt;Leute haben also Linus Zeugs genommen und damit gespielt, und es dabei besser hin gefummelt und - das ist der Trick - Linus ihr verbessertes Zeug zurückgegeben.
Linus hat das also zusammengesetzt und wieder zurück ins Netz gekippt.&lt;/p&gt;
&lt;p&gt;Eigentlich hat er also gar nicht viel gemacht.&lt;/p&gt;
&lt;p&gt;Der entscheidende Punkt hier ist: Er hat es getan.
Linus hat mit seinem Tun die Welt verändert.
Also nicht bloß ein bisschen, sondern so richtig fundamental.
Leute schreiben da Bücher drüber.
Bill Gates paßt seine Geschäftsstrategie an.
Linus hat Macht.
Er ist hingegangen und hat gesagt: Das ist jetzt so, und dann war es so.
Ein Informatikstudent aus Finnland, hier gleich um die Ecke.&lt;/p&gt;
&lt;p&gt;Okay, Linus war nicht alleine.
CREDITS in meinem Kernel listet alleine so an die 500 Leute, und das sind nur die, die es bis in diese Datei geschafft haben und das ist nur der Kernel.&lt;/p&gt;
&lt;p&gt;Und das mit dem Zurückgeben und neu veröffentlichen ist auch nicht seine Idee.
Diese Idee hatte ein anderer Held, Richard Stallman.&lt;/p&gt;
&lt;p&gt;&lt;p class=&#34;md__image&#34;&gt;
  &lt;img src=&#34;https://blog.koehntopp.info/uploads/richard_stallman.jpg&#34; alt=&#34;&#34;  /&gt;
&lt;/p&gt;

&lt;/p&gt;
&lt;p&gt;Stallman, ein weiterer Informatikstudent, wenn auch von weiter weg, ist also hingegangen und hatte dasselbe gemacht wie Linus, nur viel früher:
Er hat Zeugs geschrieben, in seinem Fall ein Haufen ziemlich coole Editing Macros, &amp;ldquo;emacs&amp;rdquo;, für einen Editor, und die ins Netz gekippt und gesagt: Hier ist mein Zeug und ich habe es ins Netz gekippt, jetzt könnt ihr spielen.&lt;/p&gt;
&lt;p&gt;Leute haben also Richards Zeug genommen und damit gespielt, und es dabei besser hin gefummelt und ein kommerzielles Produkt draus gemacht und - das ist der Fehler - Richard ihr verbessertes Zeug nicht zurückgegeben sondern gesagt: Ellabätsch, angeschissen, Du hast Zeug ins Netz gekippt und ich mach eine Firma draus.&lt;/p&gt;
&lt;p&gt;Da war Richard natürlich sauer und hat sich überlegt, wie er die Welt verändern kann, oder gar das Universum als solches, um es für uns alle in einen besseren Ort zu verwandeln. Richard hat sich also hingesetzt und mal aufgeschrieben wie es sein soll, damit das mit dem &amp;ldquo;ins Netz kippen und spielen&amp;rdquo; besser funktioniert.&lt;/p&gt;
&lt;p&gt;&lt;p class=&#34;md__image&#34;&gt;
  &lt;img src=&#34;https://blog.koehntopp.info/uploads/20040415-gnu-head-sm.jpg&#34; alt=&#34;&#34;  /&gt;
&lt;/p&gt;

&lt;/p&gt;
&lt;p&gt;Damit das ganze juristisch wasserdicht wird ist das Ganze ein ziemlich langer Text geworden, aber im wesentlichen steht da drin: Du kannst Zeugs, das ich ins Netz gekippt habe, nehmen und dran rumbasteln und damit spielen.
Aber wenn Du Dein verändertes Spielzeug nicht zum selber spielen verwendest, sondern Dritte damit spielen läßt, dann mußt Du denen (und damit effektiv uns allen) die Veränderungen geben, damit wir genau wie Du spielen können.&lt;/p&gt;
&lt;p&gt;Also, mit anderen Worten, wenn wir Zeugs ins Netz kippen, damit Du spielen kannst, dann mußt Du, wenn Du das verbastelst Dein verbasteltes Zeug ebenfalls ins Netz kippen, damit wir genau wie Du weiter spielen können.&lt;/p&gt;
&lt;p&gt;Simpel genug.&lt;/p&gt;
&lt;p&gt;&lt;p class=&#34;md__image&#34;&gt;
  &lt;img src=&#34;https://blog.koehntopp.info/uploads/sourceforge.png&#34; alt=&#34;&#34;  /&gt;
&lt;/p&gt;

&lt;/p&gt;
&lt;p&gt;So simpel, daß ein Haufen Leute die Idee kopiert haben.
Weil Richard hat das nicht nur auf seine Editing Macros angewendet,  sondern er hat die Metaidee, also den Regelsatz, als solchen formuliert, da raus abstrahiert und auch ins Netz gekippt.
Und ein Haufen Leute haben nicht nur seine Editing Macros genommen und damit gespielt, sondern haben ihr Spielzeug nach seinen Regeln ins Netz gekippt damit andere auch damit spielen können.&lt;/p&gt;
&lt;p&gt;Okay, Stallman war also nicht alleine.
Auf Sourceforge stehen tausende von Softwarepakete, aber letztendlich ist seine Idee, die GPL, als Lizenz bei der überwiegenden Mehrzahl aller Projekte gewählt.
Es gibt einen Haufen Lizenzen, die zur Auswahl stehen, aber es ist die Lizenz von Stallman, die letztendlich die bestimmende Macht bei allen diesen Paketen ist.
Es ist etwas an der GPL, das sie uns anderen Nichthelden attraktiver, fairer oder sonstwie besser erscheinen läßt.&lt;/p&gt;
&lt;p&gt;Das kommt, weil die GPL eine Formulierung einer anderen, viel, viel älteren Idee ist.
Diese Idee hatte ein anderer Held, Immanuel Kant.&lt;/p&gt;
&lt;p&gt;&lt;p class=&#34;md__image&#34;&gt;
  &lt;img src=&#34;https://blog.koehntopp.info/uploads/immanuel_kant.jpg&#34; alt=&#34;&#34;  /&gt;
&lt;/p&gt;

&lt;/p&gt;
&lt;p&gt;Kant war ein Student der Philosophie, weil damals gab es noch keine Informatik, hat die GPL viel kürzer aufgeschrieben als Stallman, weil damals gab es auch weniger Juristen.
Er sagte, etwas geschraubt, weil er Philosoph war:
&amp;ldquo;Handle stets so, daß die Maxime Deines Handelns als Grundlage allgemeinen Handelns genommen werden kann.&amp;rdquo;
und nannte das den kategorischen Imperativ.&lt;/p&gt;
&lt;p&gt;Kant meint, das sei eine coole Idee, weil es die Welt und das Universum als solches automatisch in einen besseren Ort verwandelt.&lt;/p&gt;
&lt;p&gt;Manche Leute heute formulieren Kant etwas weniger geschraubt als &amp;ldquo;Was Du nicht willst, das man Dir tu, das füg auch keinem anderen zu.&amp;rdquo;
Das geht leicht von der Zunge und macht klar, wieso Kant der Meinung war, daß es die Welt und das Universum als solches in einen besseren Ort verwandelt, erklärt aber irgendwie gar nicht was das mit der GPL zu tun hat.&lt;/p&gt;
&lt;p&gt;Wenn man da drüber nachdenkt, dann stellt man aber fest, daß man das noch anders formulieren kann: &amp;ldquo;Baue die Spielregeln einer Gemeinschaft stets so, also ob Du Dich an jeder Position in dieser Gemeinschaft, und sei es die niedrigste und schlechteste, befinden mögest.&amp;rdquo;
In anderen Worten:
Man stelle sich einmal vor, man sei, hmm, die kranke dunkelhäutige Frau eines fundamental-religiösen Hartz IV-Empfängers mit Migrationshintergrund mit einem behinderten Kind in einem Plattenbau in Sachsen - Deutschland funktioniert als Gemeinschaft, sagt Immanuel, wenn man sich selbst in dieser Situation vorstellen kann und das nicht schlimm wäre.&lt;/p&gt;
&lt;p&gt;Okay, hat nix mit der GPL zu tun, aber illustriert das Gedankenmodell.&lt;/p&gt;
&lt;p&gt;Anderes Beispiel:
Man stelle sich einmal vor, man stellt einen Haufen cooler Editing Macros ins Netz und alle wollen die benutzen und dann macht einer ein paar Veränderungen dran, packt das ganze in eine Schachtel und fängt an das zu verkaufen und sagt mir, nein, an die Veränderungen kommst Du nicht dran, das ist jetzt alles proprietär.&lt;/p&gt;
&lt;p&gt;Offensichtlich sind die Spielregeln kaputt.
Immanuel hat also eine Metaregel aufgeschrieben, mit der man testen kann, ob ein Regelsatz heil oder kaputt ist:
Nimm die Regeln, bau das Spielfeld auf und setz Dich selber an die letzte von allen Positionen.
Magst Du dann noch spielen?
Wenn nein, ist das Spiel im Eimer.&lt;/p&gt;
&lt;p&gt;Richard hat nun diese Überlegung von Immanuel genommen und im Grunde nur Regeln aufgeschrieben, die nicht kaputt sind.
Und Linus hat das dann mal durchgespielt.
Okay.
Und wir alle anderen auch.
Das da sind ja auch nur Leute wie Du und ich.&lt;/p&gt;
&lt;p&gt;Das ist mächtig gefährlich.&lt;/p&gt;
&lt;p&gt;&lt;p class=&#34;md__image&#34;&gt;
  &lt;img src=&#34;https://blog.koehntopp.info/uploads/erde.jpg&#34; alt=&#34;&#34;  /&gt;
&lt;/p&gt;

&lt;/p&gt;
&lt;p&gt;Weil es die Welt verändern kann, oder das Universum als solches, und in
einen besseren Ort verwandeln.
Und wenn die das können, dann können wir, also Du, Du und Du, das auch.
Einfach so.&lt;/p&gt;
&lt;p&gt;Also rechnen wir das doch mal durch, so wie ein Philosoph, Mathematiker oder Informatiker das tun würde.&lt;/p&gt;
&lt;p&gt;Erst mal sind wir.
Das ist unbestritten.
Jedenfalls bin ich, das ist leicht zu testen - ich denke, also bin ich.
Ob Ihr seid, ist nicht so leicht zu testen, aber im Grunde irrelevant.
Weil: wenn ich nicht widerlegen kann, daß Ihr seid, Ihr mich aber beeinflussen könnt und ich ich Euch, dann muß ich Euch erst mal als real annehmen - es macht ja keinen Unterschied für mein Handeln.&lt;/p&gt;
&lt;p&gt;Das ist cool, weil ich jetzt schon mal Folgerungen ziehen kann.&lt;/p&gt;
&lt;p&gt;Die erste ist:
Wenn ich bin, will ich weiter sein.
Das nennt man Egoismus und ist gesund.&lt;/p&gt;
&lt;p&gt;Die zweite ist:
Ich bin nicht alleine, sondern es gibt mehr wie mich, und die wollen auch weiter sein.&lt;/p&gt;
&lt;p&gt;Und das ändert die Regeln fundamental.&lt;/p&gt;
&lt;p&gt;Eine ganze Menge Leute, Helden der Mathematik in diesem Fall, haben auf dem Problem &amp;ldquo;Die Anderen&amp;rdquo; rum gerechnet und festgestellt, daß das wegen der Existenz der Anderen die Welt und das Universum als solches kein Nullsummenspiel ist.&lt;/p&gt;
&lt;p&gt;&lt;p class=&#34;md__image&#34;&gt;
  &lt;img src=&#34;https://blog.koehntopp.info/uploads/haeftling.jpg&#34; alt=&#34;&#34;  /&gt;
&lt;/p&gt;

&lt;/p&gt;
&lt;p&gt;Ein Nullsummenspiel ist ein Spiel, bei dem ich verliere, wenn ein anderer
gewinnt.
Man kennt das - mal verliert man, mal gewinnen die anderen.&lt;/p&gt;
&lt;p&gt;Der Punkt ist, das ist Unsinn.
Die Welt ist, sagen uns die Mathematiker, nicht ein Spiel, sondern eine Folge von Spielen und sie hat, wie wir Informatiker sagen würden, Zustand.
Zustände kriegt man, sobald man sich erinnern kann, also den Ausgang vorheriger Spiele zur Grundlage seines fortgesetzten Handelns macht.
Oder wie der große Held Henry Spencer so treffend gesagt hat, &amp;ldquo;Those who do not remember Unix are forced to reinvent it, poorly.&amp;rdquo;&lt;/p&gt;
&lt;p&gt;Darum ist für die Politiker Fernsehen so wichtig, weil das verhindern soll, daß wir Zustände kriegen.&lt;/p&gt;
&lt;p&gt;Die Frage war, ob wir Helden sind.&lt;/p&gt;
&lt;p&gt;Und die Antwort ist: wir sind, und wir sind nicht alleine, und weil das so ist, und weil wir uns erinnern können, können wir durch zusammenarbeiten Situationen schaffen, in denen jeder gewinnt, der mit uns zusammenarbeitet - uns selbst  eingeschlossen.
Indem wir etwas verschenken machen wir langfristig Gewinn.&lt;/p&gt;
&lt;p&gt;Die Helden der Philosophie und der Mathematik sagen uns, und das haben sie
oft nachgerechnet, daß das eine Eigenschaft der Welt und des Universum als
solches ist. Die Welt um uns herum ist so aufgebaut, daß es gut und
persönlich gewinnbringend für uns ist, kurzfristig etwas zu opfern, um die
Welt und das Universum als solches in einen besseren Ort für uns alle zu
verwandeln.&lt;/p&gt;
&lt;p&gt;Oder, um es deutlicher zu formulieren: Bill Gates ist ein blöder Idiot. Und
nur Du kannst es ihm beweisen.&lt;/p&gt;
&lt;p&gt;Sei ein Held.&lt;/p&gt;
&lt;p&gt;&lt;p class=&#34;md__image&#34;&gt;
  &lt;img src=&#34;https://blog.koehntopp.info/uploads/kris_beer.jpg&#34; alt=&#34;&#34;  /&gt;
&lt;/p&gt;

&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>GPL V3 RC3 - Was steht drin?</title>
      <link>https://blog.koehntopp.info/2007/04/02/gpl-v3-rc3-was-steht-drin.html</link>
      <pubDate>Mon, 02 Apr 2007 09:36:00 +0000</pubDate>
      
      <guid>https://blog.koehntopp.info/2007/04/02/gpl-v3-rc3-was-steht-drin.html</guid>
      <description>&lt;p&gt;Die GPL V3 ist sehr einfach zu lesen - wenn man wissen will, was drin steht, muss man lediglich die Präambel lesen, die in sehr klaren Worten und ohne juristisches Blafasel genau erklärt, was die Ziele und Methoden der GPL V3 sind und wieso sie Lizenz so aussieht wie sie aussieht.
Der
&lt;a href=&#34;http://gplv3.fsf.org/gpl-draft-2007-03-28.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;dritte Entwurf der GPL V3&lt;/a&gt;

 ist nun fertig und wird weit besser aufgenommen als
&lt;a href=&#34;https://blog.koehntopp.info/2006/07/30/gpl-v3-2nd-draft.html&#34;&gt;der zweite Entwurf&lt;/a&gt;

.&lt;/p&gt;
&lt;p&gt;Die Idee der GPL ist die Schaffung eines geschützten Raums, in dem
&lt;a href=&#34;https://blog.koehntopp.info/2005/01/05/ein-paar-ideologische-steine-ins-rollen-bringen.html&#34;&gt;kooperiert&lt;/a&gt;


werden kann.
Das bedeutet, daß die GPL einem Nutzer dieser Lizenz
&lt;a href=&#34;https://blog.koehntopp.info/2005/02/07/von-der-gpl.html&#34;&gt;bestimmte Rechte&lt;/a&gt;

 gibt und Zusatzbestimmungen einführt, deren Ziel es ist, dafür zu sorgen, daß diese Rechte immer für jeden gelten, der sich den Bestimmungen der GPL unterwirft.
Die Idee ist es, Software aus dem GPL Pool nutzen zu können, im Gegenzug aber die Nutzer dieser Software dazu zu verpflichten, die Dinge, die sie mit dieser Software bauen allen anderen Nutzern dieses Pools unter denselben Bedingungen zur Verfügung zu stellen.&lt;/p&gt;
&lt;p&gt;Die GPL ist,
&lt;a href=&#34;https://blog.koehntopp.info/2006/09/10/gpl-in-deutschland-vor-gericht-durchgesetzt.html&#34;&gt;wie&lt;/a&gt;


&lt;a href=&#34;https://blog.koehntopp.info/2006/09/19/gpl-marktdurchdringung-ist-kein-wert-an-sich.html&#34;&gt;anderswo&lt;/a&gt;


&lt;a href=&#34;https://blog.koehntopp.info/2006/11/12/gpl-microsoft-novell-samba-org-und-die-freiheiten-der-gpl.html&#34;&gt;erklärt&lt;/a&gt;

, eine Lizenz - man erwirbt also Rechte an etwas, das man sonst nicht nutzen könnte.
Die GPL ist nicht umsonst - man zahlt für diese Rechte damit, daß man im Gegenzug anderen dieselben Rechte an dem gewährt was man geschaffen hat, indem man die GPL-Rechte genutzt hat.&lt;/p&gt;
&lt;p&gt;Das System hat in den vergangenen Jahrzehnten recht gut funktioniert, aber neuere Entwicklungen in der Anwendungsentwicklung und im Urheberrecht haben die FSF dazu gebracht, die GPL zu überarbeiten.&lt;/p&gt;
&lt;p&gt;Ich schrieb in
&lt;a href=&#34;https://blog.koehntopp.info/2006/09/19/gpl-marktdurchdringung-ist-kein-wert-an-sich.html&#34;&gt;GPL: Marktdurchdringung ist kein Wert an sich&lt;/a&gt;

:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Wenn man die Entwicklung der letzten Jahre nämlich betrachtet, dann wird eines immer klarer:
Es kann keine Koexistenz mit Closed Source geben, sondern nur eine strikte Trennung.
Diese Erkenntnis ist nicht neu:
Am 27. September 1983, also vor nunmehr 23 Jahren wurde das GNU Projekt gegründet.
Es entstand unter anderem, weil jemand Code aus der Allmende genommen und unter seine Käseglocke gestellt hat.
Die Funktion der GPL ist es, eine Wiederholung eines solchen Szenarios zu verhindern.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Die GPL ist eine wehrhafte Lizenz und die Version 3 paßt sie an die Erfordernisse einer neuen Zeit an, um die
&lt;a href=&#34;https://blog.koehntopp.info/2006/11/12/gpl-microsoft-novell-samba-org-und-die-freiheiten-der-gpl.html&#34;&gt;Freiheiten der GPL&lt;/a&gt;

 unter diesen Bedingungen zu erhalten.&lt;/p&gt;
&lt;p&gt;Die Probleme, die die GPL V2 hat, bestehen in zwei Kernnbereichen:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Einmal ist es in den letzten Jahren vermehrt üblich geworden, Software als einen Service anzubieten.
Firmen, die so etwas tun, verwenden GPL V2 Software in großen Maßstab, liefern sie aber niemals aus.
Daher wird die Schrankenbestimmung für die letzte Freiheit der GPL niemals wirksam:
Die Verpflichtung, die eigenen Änderungen an einem Stück Software Dritten zur Verfügung zu stellen wird nur dann wirksam, wenn man diese Software auch an Dritte weitergibt.
Bei Software als Service passiert das nicht - man gibt nur die Wirkungen dieser Software an Dritte weiter.
Solche Dienstleister bedienen und bereichern sich also am Pool der GPL-Software ohne daß ihre eigenen Veränderungen auf der Grundlage dieses Fundus in den Pool zurückfließen müssen - der Kooperation wird die Grundlage entzogen und die
&lt;a href=&#34;http://en.wikipedia.org/wiki/Tragedy_of_the_commons&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Allmende stagniert&lt;/a&gt;

.&lt;/li&gt;
&lt;li&gt;Andere Schutzrechte als das Urheberrecht werden zusätzlich wirksam:
Es ist für einen Nutzer von GPL-Software möglich, den Quelltext zu einer Software zu erhalten, aber er wird möglicherweise durch andere Schutzrechte gehindert, diese Software vollumfänglich zu nutzen.
Dies können durch das Urheberrecht selber geschützte DRM-Mechanismen sein (
&lt;a href=&#34;http://www.heise.de/open/artikel/87628&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Tivoisierung&lt;/a&gt;

), es kann sich aber auch um Patente auf Software handeln.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Die GPL V3 formuliert ihre Absichten hier so:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Some devices are designed to deny users access to install or run modified versions of the software inside them, although the manufacturer can do so.
This is fundamentally incompatible with the purpose of the GPL, which is to protect users&amp;rsquo; freedom to change the software where changes are possible.
The systematic pattern of such abuse occurs in the area of products for individuals to use, which is precisely where it is most unacceptable.
Therefore, we have designed this version of the GPL to prohibit the practice for those products.
If such problems arise substantially in other domains, we stand ready to extend this provision to those domains in future versions of the GPL, as needed to protect the freedom of users.&lt;/p&gt;
&lt;p&gt;Finally, every program is threatened constantly by software patents.
States should not allow patents to restrict development and use of software on general-purpose computers, but in places where they do, we wish to avoid the special danger that patents applied to a free program could make it effectively proprietary.
To prevent this, the GPL assures that patents cannot be used to render the program non-free.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Neu in der GPL V3: Der Absatz 3 &amp;ldquo;No Denying Users&amp;rsquo; Rights through Technical Measures&amp;rdquo;. sagt, daß ein GPL V3 Programm nicht Teil eines
&lt;a href=&#34;http://de.wikipedia.org/wiki/Digitale_Rechteverwaltung&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;DRM-Mechanismus&lt;/a&gt;


sein kann. Die GPL V3 bezieht sich dabei (zur Zeit) auf
&lt;a href=&#34;http://www.wipo.int/treaties/en/ip/wct/trtdocs_wo033.html#P87_12240&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Artikel 11 des WIPO-Vertrages vom 20. Dezember 1996&lt;/a&gt;


und die daraus entstandenen nationalen Gesetze zur Umsetzung dieses Vertrages.
Ein Gerät wie der Tivo, bei dem man die Quellen erhält, modifizieren, die daraus resultierende geänderte Software dann so aber nicht mehr auf dem Gerät installieren kann wäre mit der GPL V2 möglich, mit der GPL V3 aber nicht mehr.&lt;/p&gt;
&lt;p&gt;In dieselbe Richtung zielen nun Abschnitte von Absatz 6, die ebenfalls klarstellen, was denn nun genau zum Lieferumfang gehört:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The information must suffice to ensure that the continued functioning of the modified object code is in no case prevented or interfered with solely because modification has been made.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Oder in anderen Worten: Die Schlüssel, die man braucht um sein selbstgemachtes Binary so zu signieren, daß es auf ein einem Tivo tut gehören auch dazu.&lt;/p&gt;
&lt;p&gt;Ebenfalls neu in der GPL V3:
Die Klarstellung in Absatz 10 &amp;ldquo;Automatic Licensing of Downstream Recipients&amp;rdquo; und der gesamte Absatz 11 &amp;ldquo;Patents&amp;rdquo;.
Der Kern der Sache ist jetzt der erste Absatz von Absatz 11:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Each contributor grants you a non-exclusive, worldwide, royalty-free patent license under the contributor&amp;rsquo;s essential patent claims in its contribution, to make, use, sell, offer for sale, import and otherwise run, modify and propagate the contribution.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Oder in anderen Worten: Wenn ich Code in ein Stück GPL einbaue, das durch eines meiner Softwarepatente geschützt ist, dann gebe ich damit auch gleich eine kostenfreie, unbefristete und unbeschränkte Lizenz für die Nutzung dieser Patente an jedem Nutzer dieser Software mit.
Dies ist übrigens nichts neues -
&lt;a href=&#34;http://www.groklaw.net/article.php?story=20070328071651351&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;schon die GPL V2 hat einen ähnlichen Effekt&lt;/a&gt;

,
wenn auch nicht so explizit formuliert.&lt;/p&gt;
&lt;p&gt;Weitere Änderungen an der GPL sind eher technischer Natur und nur verständlich, wenn man sich mit dem rechtlichen Umfeld ihrer Entstehung beschäftigt.
Dies wird in den
&lt;a href=&#34;http://gplv3.fsf.org/rationale&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Anmerkungen zum Entwurf&lt;/a&gt;


beschrieben.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>GPL: Microsoft, Novell, Samba.org und die Freiheiten der GPL</title>
      <link>https://blog.koehntopp.info/2006/11/12/gpl-microsoft-novell-samba-org-und-die-freiheiten-der-gpl.html</link>
      <pubDate>Sun, 12 Nov 2006 23:51:00 +0000</pubDate>
      
      <guid>https://blog.koehntopp.info/2006/11/12/gpl-microsoft-novell-samba-org-und-die-freiheiten-der-gpl.html</guid>
      <description>&lt;p&gt;In
&lt;a href=&#34;http://www.c0t0d0s0.org/archives/2233-Business-und-OSS.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Business und OSS&lt;/a&gt;


verweist Jörg Möllenkamp auf
&lt;a href=&#34;http://news.samba.org/announcements/team_to_novell/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Samba Team Asks Novell zu Reconsider&lt;/a&gt;


und spielt ein Gedankenexperiment durch:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;So im gedanklichen Hintergrund stellt sich mir jetzt die Frage, was wohl passieren würde, wenn das Entwicklungsteam eines wesentlichen Bestandteils der Umgebung einer der Großdistributionen plötzlich die Lizenz entziehen würde.
Als Gedankenspiel: Das Samba-Team zieht die Lizenz von Novell für Samba zurück.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;a href=&#34;http://www.samba.org&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Samba&lt;/a&gt;

 beschreibt sich selbst wie folgt:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Samba is an &lt;a href=&#34;http://www.opensource.org/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Open Source&lt;/a&gt;

/&lt;a href=&#34;http://www.gnu.org/philosophy/free-sw.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Free Software&lt;/a&gt;

 suite that has, &lt;a href=&#34;http://us5.samba.org/samba/docs/10years.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;since 1992&lt;/a&gt;

, provided file and print services to all manner of SMB/CIFS clients, including the numerous versions of Microsoft Windows operating systems.
Samba is freely available under the &lt;a href=&#34;http://us5.samba.org/samba/docs/GPL.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;GNU General Public License&lt;/a&gt;

.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;In Sektion 6 der
&lt;a href=&#34;http://us5.samba.org/samba/docs/GPL.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;GPL&lt;/a&gt;

 heißt es:&lt;/p&gt;
&lt;blockquote&gt;
&lt;ol start=&#34;6&#34;&gt;
&lt;li&gt;Each time you redistribute the Program (or any work based on the Program), the recipient automatically receives a license from the original licensor to copy, distribute or modify the Program subject to these terms and conditions.
&lt;strong&gt;You may not impose any further restrictions on the recipients&amp;rsquo; exercise of the rights granted herein.&lt;/strong&gt;
You are not responsible for enforcing compliance by third parties to
this License.&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;p&gt;Die Grundlage für dieses Gedankenexperiment ist also in der realen Welt nicht gegeben.
Es ist nicht möglich, bestimmte Firmen von der Nutzung GPL lizenzierter Software in irgendeiner Weise auszuschließen.
Das ist Absicht und wird von den Entwicklern der GPL als Feature gesehen.&lt;/p&gt;
&lt;p&gt;Die GPL geht zweigleisig an das Problem heran (
&lt;a href=&#34;https://blog.koehntopp.info/2005/02/07/von-der-gpl.html&#34;&gt;mehr Details&lt;/a&gt;

)
. Die ersten drei Freiheiten, die die GPL gewährt, sind&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Die Freiheit, das Programm zu jedem Zweck auszuführen.&lt;/li&gt;
&lt;li&gt;Die Freiheit, das Programm und seine Funktionsweise zu studieren und anzupassen.&lt;/li&gt;
&lt;li&gt;Die Freiheit, das Programm nach Belieben zu verändern.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Die GPL sieht keine Möglichkeit vor, irgendjemandem diese drei Freiheiten aus welchem Grund auch immer zu verwehren.
Das trifft sogar für alle diejenigen zu, die andere Bestimmungen der GPL versehentlich oder absichtlich verletzen.
In keinem Fall könnte das Samba-Projekt unter der GPL Novell oder sonst irgendjemandem die Nutzung von Samba, das Studium des Samba-Quelltextes oder die Veränderung des Samba-Quelltextes verbieten.&lt;/p&gt;
&lt;p&gt;Die vierte Freiheit, die die GPL gewährt, ist&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Die Freiheit, das Programm weiterzugeben.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Die GPL knüpft diese Freiheit an eine Bedingung.
Die Bedingung ist dort oben zitiert.
Indem das Samba-Projekt das Programm (Samba) unter der GPL an &lt;strong&gt;irgend jemanden&lt;/strong&gt; weitergibt, gibt das Samba Projekt diesem auch die Freiheit, das Programm &lt;strong&gt;mit allen Freiheiten&lt;/strong&gt; weiterzugeben.
Das Einschränken dieser Freiheiten wird ausdrücklich ausgeschlossen.
Dadurch bekommt zwingend transitiv auch immer Novell (und jeder andere, der die GPL nicht verletzt) das Recht, Samba unter der vierten Freiheit weiterzugeben.&lt;/p&gt;
&lt;p&gt;Das ist kein Versehen.
Die GPL ist eine Lizenz, die Freiheiten geben &lt;strong&gt;und&lt;/strong&gt; bewahren soll.
Die Schöpfer der GPL sehen diese Freiheiten als absolut, also gegenüber jedem und für immer gültig.
Wenn der Mechanismus der GPL einmal in Gang gesetzt worden ist, dann soll es keinen Mechanismus geben, mit dem ein GPL Programm in irgendeiner Weise eingeschränkt werden kann.
Auch nicht für die ursprünglichen Lizenzinhaber.&lt;/p&gt;
&lt;p&gt;Die GPL gibt damit Sicherheit:
Die Freiheiten, die die GPL gewährt, sind auch dann sicher, wenn unter den Beteiligten in irgendeiner Weise Unstimmigkeiten herrschen oder ein offener Disput besteht.
Die GPL und GPL lizensierte Software
&lt;a href=&#34;https://blog.koehntopp.info/2006/09/19/gpl-marktdurchdringung-ist-kein-wert-an-sich.html&#34;&gt;spielen nicht am Markt&lt;/a&gt;

 der kompetitiven Player und sind im Gegensatz zu anderen Lizenzen absichtlich so gestaltet, daß die Lizenz-politischen Instrumente der kompetitiven Player nicht zum Einsatz kommen können.&lt;/p&gt;
&lt;p&gt;Die GPL ist die Verfassung der kooperativen Spieler.
Sie ist so gestaltet, daß sie alle Parteien für immer entwaffnet, solange sie im kooperativen Bereich spielen, und daß sie kompetitive Spieler draußen hält:
Wer nach den Regeln der GPL spielt, kann die GPL nicht als Druckmittel einsetzen, weil dies nach Konstruktion nicht möglich ist.
Wer nicht nach den Regeln der GPL spielt, kann GPL-lizenzierte Software für sich selbst zwar nutzen, sie aber wegen der fehlenden vierten Freiheit nicht weiterverbreiten (und damit auch nicht verkaufen oder auf GPL-Software basierendende Produkte verkaufen, also keinen kompetitiven Gewinn erzielen).&lt;/p&gt;
&lt;p&gt;So mag es nun sein, daß sich Novell, Microsoft, IBM und das Samba-Team gegenseitig boxen und an den Karren zu fahren versuchen.
Aber sie können es nicht über die Lizenzen ihrer Software tun, sofern es sich dabei um GPL-lizenzierte Software handelt.
Das ist genau der Grund, warum Firmen wie Microsoft so stark Lobbypositionen
&lt;a href=&#34;http://www.heise.de/newsticker/meldung/80891&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;für Softwarepatente&lt;/a&gt;


beziehen oder andere Firmen Druck über das Markenrecht auszuüben versuchen oder warum man hin und wieder Anti-GPL Rethorik findet, in der der BSD-Lizenz und ihren Varianten ein Loblied gesungen wird:
Diese Lizenzen haben die Schutzmechanismen der GPL nicht und würden es erlauben, Software für einzelne oder alle Lizenznehmer aus dem Markt zu nehmen oder proprietäre Erweiterungen auf der Basis vormals freier Software zu bauen.&lt;/p&gt;
&lt;p&gt;Doch damit würde die Lizenz wieder zum Druckmittel.
Die GPL erzwingt und belohnt kooperatives Verhalten.&lt;/p&gt;
&lt;p&gt;Die in den letzten 10 Jahren neu eröffneten Kriegsschauplätze Lizenzen und Marken sind den Entwicklern der GPL wohl bewusst und die Arbeit an der
&lt;a href=&#34;http://gplv3.fsf.org/gpl-draft-2006-07-27.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;GPL V3&lt;/a&gt;


geht voran (
&lt;a href=&#34;https://blog.koehntopp.info/2006/07/30/gpl-v3-2nd-draft.html%7d&#34;&gt;mehr Details&lt;/a&gt;

).
Über die neuen Bestimmungen der GPL V3 ist viel gejammert worden, insbesondere auch vom Linux Kernel Team.&lt;/p&gt;
&lt;p&gt;Darum gibt es eine
&lt;a href=&#34;http://www.fsf.org/news/gplv3-clarification&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Zusammenfassung und Klarstellung der Ziele und Bestimmungen der GPL V3&lt;/a&gt;


durch die Free Software Foundation, die deutlich macht, was die Ziele der GPL in jeder Version sind und wie sie in der jeweiligen Version erreicht werden sollen.&lt;/p&gt;
&lt;p&gt;Das Samba-Team ist da
&lt;a href=&#34;http://news.samba.org/announcements/team_to_novell/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;voll auf der Linie der FSF&lt;/a&gt;

:
Darum ja genau die harsche Reaktion auf den Vertrag zwischen Microsoft und Novell.
Nur: Die Software selbst wird nicht zum Spielball dieser Auseinandersetzung.
Weil die GPL es nach Konstruktion nicht zuläßt.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Urteilsbegründung zu GPL in Deutschland vor Gericht durchgesetzt</title>
      <link>https://blog.koehntopp.info/2006/09/22/urteilsbegr-ndung-zu-gpl-in-deutschland-vor-gericht-durchgesetzt.html</link>
      <pubDate>Fri, 22 Sep 2006 12:57:39 +0000</pubDate>
      
      <guid>https://blog.koehntopp.info/2006/09/22/urteilsbegr-ndung-zu-gpl-in-deutschland-vor-gericht-durchgesetzt.html</guid>
      <description>&lt;p&gt;Nachtrag zu
&lt;a href=&#34;https://blog.koehntopp.info/2004/04/15/gnu-gpl-in-deutschland.html&#34;&gt;GPL in Deutschland vor Gericht durchgesetzt&lt;/a&gt;

:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://gnumonks.org/~laforge/weblog/2006/09/22#20060922-dlink-verdict&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Harald Weltes Blog&lt;/a&gt;

 zum Thema&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://gpl-violations.org/news/20060922-dlink-judgement_frankfurt.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;gpl-violations.org Press Release&lt;/a&gt;

&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.jbb.de/html/?page=news&amp;amp;id=48&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Urteilsbegründung&lt;/a&gt;

 (hier im &lt;a href=&#34;http://www.jbb.de/urteil_lg_frankfurt_gpl.pdf&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Volltext als PDF&lt;/a&gt;

)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.groklaw.net/article.php?story=20060922134536257&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Groklaw Artikel&lt;/a&gt;

&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.golem.de/0609/47974.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Golem Artikel&lt;/a&gt;

&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.heise.de/newsticker/meldung/78530&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Heise Artikel&lt;/a&gt;

&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Aus der Urteilsbegründung:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Die GPL ist auf das Rechtverhältnis zwischen den Urhebern und der
Beklagten anwendbar. Die drei Softwareprogramme [ msdosfs, initrd und mtd
] werden unstreitig ausschließlich unter den Bedingungen der GPL
lizensiert. Im Fall der freien Software ist anzunehmen, daß der
Rechteinhaber durch die unterstellung des Programms unter die GPL ein
ANgebot an einen bestimmten Personenkreis abgibt, das von den Nutzern
durch Vornahme der zustimmungsbedürftigen Handlung angenommen wird;
insoweit wird man von einem Verzicht auf den Zugang der Annahmeerklärung
(§151 BGB) ausgehen können.Zudem könnte sich der Beklagte dann, wenn die
GPL nicht durch Einbeziehung auf das Rechtsverhältnis anwendbar wäre, auf
keinerlei Berechtigung zur Vervielfältigung, Verbreitung und Veränderung
der drei Softwareprogramme berufen, so daß ebenfalls eine
Urheberrechtsverletzung zu bejahen wäre. Insbesondere kann in den
Bedingungen der GPL keinesfalls ein Verzicht auf Urheberrechte und
urheberrechtliche Rechtspositionen gesehen werden. Denn die GPL sieht
gerade vor, daß die zunächst jedermann erteilte Nutzungs-, Bearbeitungs-
und Verbreitungsfreiheit durch die Einräumung eines nichtausschließlichen
Nutzungsrechts bei Verstoß gegen die GPL automatisch erlischt (vgl.
Dreier/Schulze, aaO, §69a, Rz. 11)&amp;hellip;.Gemaß Ziff 4. der GPL &amp;hellip; fällt das
zunächst gewährte Nutzungsrecht automatisch an den Urheber zurück, wenn
der Nutzer gegen die in Ziff. 2 der GPL niedergelegten Verhaltenspflichten
verstößt. Die dortigen Verhaltenspflichten sehen insbesondere vor, daß der
Nutzer mit jeder Kopie einen Haftungsausschluß veröffentlicht, auf die GPL
hinweist und einen Lizenztext beifügt sowie den Sourcecode des Programmes
offen legt.&lt;/p&gt;
&lt;/blockquote&gt;
</description>
    </item>
    
    <item>
      <title>GPL: Marktdurchdringung ist kein Wert an sich</title>
      <link>https://blog.koehntopp.info/2006/09/19/gpl-marktdurchdringung-ist-kein-wert-an-sich.html</link>
      <pubDate>Tue, 19 Sep 2006 16:58:35 +0000</pubDate>
      
      <guid>https://blog.koehntopp.info/2006/09/19/gpl-marktdurchdringung-ist-kein-wert-an-sich.html</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://blog.koehntopp.info/2006/09/10/gpl-in-deutschland-vor-gericht-durchgesetzt.html&#34;&gt;Kommentar&lt;/a&gt;

 zu GPL in Deutschland vor Gericht durchgesetzt.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Ich glaube nicht das bei der BSD Lizenz ein
Konstruktionsfehler vorliegt. Ich denke, es war beabsichtigt
das auch &amp;ldquo;Codeklauer&amp;rdquo; damit Geld verdienen können. Man könnte
auch sagen, das dies die wahre Freiheit ist. Übrigens kann mit
GPL Software auf ähnlicher Weise Geld verdient werden. Was
machen denn die Distributoren, auch wenn das jetzt etwas
überspitzt ist. Es wird niemand daran gehindert GPL Software
zu verkaufen. Sie müssen nur die GPL einhalten, was bedeutet
die Lizenz mitliefern und dürfen die Hinweise auf die GPL im
Code nicht entfernen.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Der wesentliche Punkt der GPL ist ein anderer: Unter der GPL
muss man den Quelltext - so wie er verwendet worden ist, um das
eigene Produkt zu bauen - mitliefern. Mit allen Rechten und
gegebenenfalls mit allen Tools, die dazu notwendig sind.&lt;/p&gt;
&lt;p&gt;Bei der GPL geht es nicht um Geld - es ist vollkommen egal, ob
das Produkt, das Du gebaut hast, von Dir für Geld verkauft
wird, oder ob Du für Geld Support dazu verkaufst oder was auch
immer. Wenn Du in Deinem Produkt aber (im selben Prozessraum)
GPL-Code verwendest, dann muss Dein Produkt auch unter der GPL
stehen und um der GPL zu genügen, musst Du den Quelltext und
die Werkzeuge zum Bauen mitliefern.&lt;/p&gt;
&lt;p&gt;Die GPL ist die sich selbst schützende Allmende: Du darfst Code
aus dem Gemeinschaftspool für Deine Zwecke frei verwenden, aber
nur, um damit wieder Code zu erzeugen, der hinterher unter genau
denselben Rechten Bestandteil des Pools wird.&lt;/p&gt;
&lt;p&gt;Die Allmende, Commons, war die Gemeinschaftsweide des Dorfes.
Jeder kann dort seine Kühe weiden. Die Allmende hat nicht
funktioniert, weil sich alle erst dort bedient haben, bevor sie
ihr Vieh auf die eigenen Weiden getrieben haben. Das ist genau
das Szenario der BSD Lizenz.&lt;/p&gt;
&lt;p&gt;Die GPL ist anders: Grase auf der Weide der freien Software,
aber wenn Du das tust, kommen Deine Milch, Dein Schinken und der
Dung Deiner Kühe auch in diese Allmende. Darum funktioniert die
GPL. Sie ist nachhaltig.&lt;/p&gt;
&lt;p&gt;Die kooperative und die kompetitive Welt können nicht zusammen
existieren, ohne daß die Regeln der kompetitiven Welt die
kooperative Welt zerstören. Darum trennt die GPL im Gegensatz
zu allen anderen Open-Source-Lizenzen beide Welten und darum ist
die GPL die einzige Open-Source-Lizenz, die vor dem kompetitiven
Lager bestehen kann.&lt;/p&gt;
&lt;p&gt;Jörg Möllenkamp führt unsere Diskussion ebenfalls weiter. Er
schreibt in &lt;a href=&#34;http://www.c0t0d0s0.org/archives/2009-GPL-und-die-Folgen.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;GPL-Durchsetzung und die Folgen&lt;/a&gt;


unter einem kompetitiven Gesichtspunkt:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Es ist klar, das ein System nicht notwendigerweise offener
wird, wenn sich dort verschiedene nicht freigegebene Module
tummeln. Es ist allerdings ein Trugschluss, das man einen
Hersteller durch die GPL in die Offenheit zwingen kann.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Das ist das Missverständnis: Die GPL will niemanden zu irgendetwas zwingen.
Sie will nur trennen.
Die GPL sagt nicht &amp;ldquo;Du musst offen/frei/whatever sein.&amp;rdquo;&lt;/p&gt;
&lt;p&gt;Sie sagt:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&amp;ldquo;&lt;strong&gt;Wenn&lt;/strong&gt; Du unseren Code nutzen möchtest, was Du
nicht musst, &lt;strong&gt;dann&lt;/strong&gt; musst Du das zu unseren Bedingungen tun.&amp;rdquo;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Das ist ganz genau das, was jede andere Lizenz auch sagt. Die
GPL nennt außerdem diese &lt;a href=&#34;https://blog.koehntopp.info/2005/02/07/von-der-gpl.html&#34;&gt;Bedingungen&lt;/a&gt;


vorab, wie jede andere Lizenz auch. Es gibt keine
Überraschungen, keine Lizenzbedingungsänderungen und es gibt
insbesondere keinen Zwang zu irgendwas. Es gibt allerdings eine
Handvoll ausgezeichneter wirtschaftlicher
und ethisch-moralischer Argumente, die dafür sprechen. Aber das
ist eine ganz andere, und vollkommen ungezwungene Diskussion.&lt;/p&gt;
&lt;p&gt;Die GPL will niemanden in die Offenheit zwingen. Sie will nur
die Spielregel klarmachen. Die Spielregel ist ganz simpel:
&lt;a href=&#34;http://de.wikipedia.org/wiki/Quid_pro_quo&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Quid pro quo&lt;/a&gt;

. Unter
der GPL ist es nicht möglich, Code aus der Allmende zu nehmen
und etwas proprietäres damit zu machen. Und anders herum: Es
ist möglich, etwas Proprietäres zu machen, aber dann nicht mit
GPL-Code.&lt;/p&gt;
&lt;p&gt;Es ist lediglich Gier angesichts der überwältigenden Menge von
GPL-Code von teilweise wirklich ausgezeichneter Qualität die
manche Menschen oder Firmen glauben lässt, sie könnten an
diesem Pool teilhaben ohne sich an die Spielregeln halten zu
müssen. Diese Leute müssen lernen, daß dieser Pool von
lohnenswertem Zeug nur deswegen existiert, weil all den
Gierhälsen die glauben, sie könnten hier betrügen, mit der
ganzen Härte des neu verschärften Urheberrechts auf ihre
Spuddelfinger gehauen wird.&lt;/p&gt;
&lt;p&gt;Wenn man natürlich ein Geschäftskonzept so baut, daß es ohne
einen solchen Betrug nicht funktioniert, dann bedeutet das, daß
man ohne den GPL-Code kein Produkt hat. Das ist aber kein Zwang
vonseiten der GPL, sondern die Dummheit desjenigen Kriminellen,
der hier seinen Teilhabern und sich selbst in die Tasche gelogen
hat. Ich habe da nicht wirklich Mitleid - nicht mit
&lt;a href=&#34;http://gnumonks.org/~laforge/weblog/2005/11/11/#20051111-sony-rootkit-lame&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Sony&lt;/a&gt;

,
die in ihrem Rootkit (L)GPL-Software illegal verwendet haben,
nicht mit Microsoft, die geknackte Software zum Erzeugen von
Windows Sounddateien verwendet haben und auch nicht mit - wieder - Sony, die aus Wikipedia content lizenzwidrig verwenden.&lt;/p&gt;
&lt;p&gt;Es sind diese Dinge, gegen die die GPL und in Grenzen die LGPL
wegen ihrer einzigartigen Konstruktion schützen helfen.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Sehen wir es doch mal realistisch, wie gross ist den die
Gruppe jener Menschen die in der Lage und Willens ist, auf
einem Handy oder einem Router den Kernel auszutauschen.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Die Größe der Gruppe der Menschen ist aus der Sicht der GPL
vollkommen irrelevant. Die meisten Leute wissen ja auch nicht,
was ein Rootkit ist. Die GPL zwingt auch niemanden, mit dem
Code, auf den man Zugriff hat, etwas zu tun. Sie eröffnet
Möglichkeiten, und darauf kommt es an.&lt;/p&gt;
&lt;p&gt;Ich habe zum Beispiel mal ein Servermodul für einen Netscape
Web Server schreiben müssen. Das hat natürlich nicht
funktioniert, und zwar unter anderem auch deswegen, weil die
API-Dokumentation und die tatsächliche API des Servers nicht
übereinstimmend waren. Diese API-Diskrepanz nachzuweisen war
sehr, sehr schmerzhaft. Ich habe natürlich erst einmal mich
selbst für zu dumm gehalten, bevor ich Azundris&amp;rsquo; Grundregel des
Debuggings angewendet habe (&amp;ldquo;Wenn Du den Fehler nach 30 Minuten
nicht gefunden hast, ist es wahrscheinlich nicht Dein Fehler,
sondern ein Fehler in der Bibliothek oder im Compiler.&amp;rdquo;). Diese
Sorte Problem kann man mit der GPL prinzipbedingt nicht haben
(genaugenommen reicht für diese Sorte Problem schon die Sorte
Look-But-Don&amp;rsquo;t-Touch-Lizenz aus, die Microsoft so favorisiert).&lt;/p&gt;
&lt;p&gt;Ich habe auch schon oft Dinge in anderer Leute Code einbauen
müssen, weil ich die Änderung jetzt brauchte oder um einfach
was auszuprobieren - SpamAssassin LDAP Support, Änderungen am
LDAP-Code von PHP, LDAP-Support im Cyrus, &amp;hellip;. Ja, ich habe auch
noch andere Sachen gemacht, aber mein LDAP-Engagement bei NetUSE
war eine einzige Folge von &amp;ldquo;Eigentlich will ich Euren Code gar
nicht hacken, aber da bitte sehr, so tut es mir und Euch am
wenigsten weh.&amp;rdquo; Das war gut für mich und gut für den
Hersteller, denn so hat er einen Bug Report oder Feature-Request
bekommen, der Bug Report war validiert, und ein Patchvorschlag
kam mit. Das hat für alle Beteiligten das Leben sehr viel
einfacher gemacht, selbst dann, wenn mein Code wie bei
SpamAssassin aus anderen Gründen nicht unverändert in den
aktuellen Code übernommen worden ist.&lt;/p&gt;
&lt;p&gt;Der Punkt ist, daß in keinem dieser Fälle primär die Absicht
Bestand, diesen Code zu ändern, sondern daß es sich aus
persönlichen Bedürfnissen oder einem Projekt so ergeben hat.
Das Projekt hat seinen Scope spontan geändert und die
verwendeten GPL-Teile haben das genauso spontan mit getragen.
Wären diese Projekte auf der Basis von Closed Source Zeugs
realisiert gewesen, dann hätten diese Möglichkeiten nicht
bestanden und das Projekt wäre auf den Stand &amp;ldquo;Plattform
evaluieren&amp;rdquo; zurückgeworfen worden.&lt;/p&gt;
&lt;p&gt;Der andere Punkt ist, daß ich nur im kooperativen Umfeld die
Möglichkeiten habe, meine Situation über die Paketgrenzen
hinweg bis zum Grade eines prototypischen oder produktionsreifen
Patches zu evaluieren, ohne mich Ressourcen-technisch zu
verausgaben, und daß ich das dann im Rahmen des Projektes oder
privater Weiterbildung auch tue.&lt;/p&gt;
&lt;p&gt;Input loswerden kann ich auch mit schwächeren Open-Source-Lizenzen,
selbst mit &lt;a href=&#34;http://en.wikipedia.org/wiki/CDDL&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CDDL&lt;/a&gt;

,
&lt;a href=&#34;http://en.wikipedia.org/wiki/Mozilla_Public_License&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;MPL&lt;/a&gt;

 oder
anderen
&lt;a href=&#34;http://en.wikipedia.org/wiki/Modified_BSD_license&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;BSD&lt;/a&gt;

-Lizenzvarianten.&lt;/p&gt;
&lt;p&gt;Die Frage ist, ob ich mich dazu motivieren kann, Code in
irgendeine Firma einzuwerfen, um letztendlich deren CEO eine
größere Yacht zu ermöglichen. Ich schreibe das Zeug
eigentlich, um das Leben allen denen einfacher zu machen, die
nach mir kommen. Ich kann dazu beitragen, Infrastrukturkosten zu
sozialisieren und meine Arbeit in einen größeren Kontext zu
stellen. Ich kann das deswegen, weil die (L)GPL mich davor
schützt, daß jemand unser aller Tree forkt und unter eine
Käseglocke stellt.&lt;/p&gt;
&lt;p&gt;Es geht nicht darum, wie viele Menschen den Kernel auf ihrem
Handy austauschen wollen - es ist uns beiden vollkommen klar,
daß die meisten das nicht wollen werden. Sondern es geht darum,
daß ein jeder der - aus welchem Grund auch immer - der Meinung
ist, dies tun zu müssen es auch tun kann. Und das ist sogar
für den Hersteller des Handys ein Grund, diese Möglichkeit zu
bieten, wenn der Hersteller sich die Mühe macht, da mal ein
wenig drüber nachzudenken.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Jetzt fordert diese kleine Gruppe etwas, das wahrscheinlich
eine ganze Reihe von Geschäftsgeheimnissen offenlegen würde
(schönes Beispiel sind da für mich die Treiber von
hochgezüchteten Grafikkarten). Warum sollte eine Firma das
tun? Ist es der Firma zu verübeln, Auswege zu suchen, Umwege
zu finden und wenn es irgendwie geht, Linux ganz zu vermeiden?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Nein, wenn Du kein GPL willst, dann benutze halt keinen
GPL-Code. Nur, ähm, das ist nicht der Sachverhalt.&lt;/p&gt;
&lt;p&gt;Es ist nicht so, daß da plötzlich eine Gruppe von Leuten ist,
die plötzlich und unerwartet etwas Überraschendes fordert.
Sondern es ist so, daß der Hersteller einer proprietären
Software GPL-Code illegal und wider besseres Wissen lizenzwidrig
verwendet hat. Alles was gefordert wird, und zwar schon immer
und nicht plötzlich und überraschend, ist eine Einhaltung des
Lizenzvertrages auf eine der beiden möglichen Arten: nämlich
entweder Offenlegung der Sourcen, aller Sourcen, und der dazu
notwendigen Werkzeuge. Oder Entfernung des GPL-Codes aus dem
Produkt. Beides ist legitim und möglich.&lt;/p&gt;
&lt;p&gt;Es ist notwendig, daß man sich als Firma vorher Gedanken
darüber macht, unter welchen Lizenzen man geistiges Eigentum in
sein Produkt einbringt. Das gilt für selbst erstellten Code
genauso wie für erworbene Lizenzen Dritter - seien sie nun
kommerziell oder GPLed. Eine Firma, die das nicht macht, hat
nicht das Recht am Markt zu agieren, denn es handelt sich um
einen Haufen von Dilettanten.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Ich weiß aber auch, das dieses Dilemma das Potenzial hat, der
Marktdurchdringung von Linux erheblichen Widerstand zu bieten.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Marktdurchdringung ist für ein GPL-Produkt kein Wert an sich,
so cool das auch ist, etwa auf einem Kassensystem, einer
Sina-Box, einem Voip-Telefon, einem WLAN-Router, einem
Festplattenrecorder oder einem Handy einem Linux beim Booten
zuzusehen. Der Kick kommt aber nicht vom Pinguin-Logo, sondern
er kommt von den Möglichkeiten, die damit einhergehen und von
der Gewissheit, daß eine starke GPL mir diese Möglichkeiten
offen hält.&lt;/p&gt;
&lt;p&gt;Es ist im engeren Sinne jedoch genaugenommen vollkommen egal wie
viele Leute Linux, den Gcc, die glibc oder was auch immer unter
der GPL einsetzen. Linux auf was-auch-immer hat keinen Wert, wenn
man auf diesem was-auch-immer nicht die Möglichkeiten hat, die
damit einhergehen.&lt;/p&gt;
&lt;p&gt;Und darum ist die klare und informierte Durchsetzung der GPL so
wichtig: Sie markiert die Trennlinie zwischen dem kooperativen
und dem kompetitiven Lager. Und es sei daran erinnert, daß es
die Copyright-Faschisten des kompetitiven Lagers waren, die
diese Trennlinie in den letzten fünf Jahren so vermint haben.
Ich habe noch immer kein Mitleid.&lt;/p&gt;
&lt;p&gt;Die Linux-Kernelentwickler auch nicht. Sie haben in der
Vergangenheit die Treiber-API des Kernels &lt;strong&gt;absichtlich&lt;/strong&gt; binär
inkompatibel verändert, um die Wartungskosten für Entwickler
proprietärer Kernelmodule unattraktiv hochzuhalten und sie
gehen nun dazu über, alle Treiber-Module, für die kein
Sourcecode bereitgestellt werden kann, ins Userland zu
verbannen.&lt;/p&gt;
&lt;p&gt;Wenn man die Entwicklung der letzten Jahre nämlich betrachtet,
dann wird eines immer klarer: Es kann keine Koexistenz mit
Closed Source geben, sondern nur eine strikte Trennung. Diese
Erkenntnis ist nicht neu: Am 27. September 1983, also vor
nunmehr 23 Jahren wurde das GNU Projekt gegründet. Es entstand
unter anderem, weil jemand Code aus der Allmende genommen und
unter seine Käseglocke gestellt hat. Die Funktion der GPL ist
es, eine Wiederholung eines solchen Szenarios zu verhindern. Und
das - striktes Quid Pro Quo - macht die GPL zu der
&lt;a href=&#34;http://freshmeat.net/stats/#license&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;weitaus erfolgreichsten Lizenz&lt;/a&gt;


im Open Source Bereich.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>GPL in Deutschland vor Gericht durchgesetzt</title>
      <link>https://blog.koehntopp.info/2006/09/10/gpl-in-deutschland-vor-gericht-durchgesetzt.html</link>
      <pubDate>Sun, 10 Sep 2006 18:07:21 +0000</pubDate>
      
      <guid>https://blog.koehntopp.info/2006/09/10/gpl-in-deutschland-vor-gericht-durchgesetzt.html</guid>
      <description>&lt;p&gt;Auf dem
&lt;a href=&#34;http://www.heise.de/newsticker/meldung/77951&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Heise Newsticker&lt;/a&gt;

 heißt es:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Harald Welte, Mitentwickler des Netfilter-Firewallcodes im Linux-Kernel
und Gründer des Projekts &lt;a href=&#34;http://www.gpl-violations.org&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;gpl-violations&lt;/a&gt;

,
hat vor Gericht einen Erfolg für die GPL erzielt. Wie er in seinem
&lt;a href=&#34;http://gnumonks.org/~laforge/weblog/2006/09/07/#20060907-victory&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Blog&lt;/a&gt;


berichtet, entschied das Landgericht Frankfurt am 6.9. im Sinne seiner
Klage wegen GPL-Verletzung. Details dazu wollen Welte und sein Anwalt Till
Jaeger, Mitbegründer des Instituts für Rechtsfragen der Freien und Open
Source Software (&lt;a href=&#34;http://www.ifross.org/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;ifrOSS&lt;/a&gt;

), allerdings erst nach
Veröffentlichung des der schriftlichen Urteilsbegründung nennen.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Jörg Möllenkamp sieht dies als
&lt;a href=&#34;http://www.c0t0d0s0.org/index.php?url=archives/1989-GPL-vor-Gericht-durchgesetzt.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Phyrrussieg&lt;/a&gt;


für die GPL, aber seine Analyse beruht auf einigen Verständnisfehlern.&lt;/p&gt;
&lt;p&gt;In &lt;a href=&#34;https://blog.koehntopp.info/2005/02/07/von-der-gpl.html&#34;&gt;Von der GPL&lt;/a&gt;

 habe ich die
GPL V2 einmal en detail erläutert und in der an den Artikel anschließenden
Diskussion einige Dinge klargestellt. Der Kommentar ist wichtig, denn er
paßt direkt auf den falschen Gedankengang von Jörg. Hier ist er noch einmal
in voller Länge:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Die GPL ist eine Lizenz. Sie gibt einem Rechte, sie nimmt einem keine Rechte.&lt;/p&gt;
&lt;p&gt;Wenn die GPL nicht gälte (also Harald Welte den Prozeß verloren hätte), dann
säßen alle Hersteller dieser netten kleinen embedded Systeme ohne Lizenz da
und müßten sich an jeden einzelnen Autoren der Komponenten ihres embedded
Linux Systems einzeln wenden, um sich eine Nutzungslizenz zu holen.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Das ist ein Szenario, daß sich die Hersteller dieser Systeme keinesfalls
wünschen können, denn während die GPL einem &lt;strong&gt;automatisch&lt;/strong&gt; Rechte gibt,
sobald man die Bedingungen erfüllt, ist dies bei manuellen
Einzelverhandlungen nicht so: Ein Autor kann individuelle Rechte &amp;ldquo;einfach
so&amp;rdquo; verweigern, wenn ihm danach ist. Es ist also eine Gute Sache Für Alle
(tm), daß Harald Welte gewonnen hat und die GPL eine in Deutschland
funktionsfähige und durchsetzbare Lizenz ist.&lt;/p&gt;
&lt;p&gt;Die GPL ist eine Lizenz des
&lt;a href=&#34;https://blog.koehntopp.info/2005/01/05/ein-paar-ideologische-steine-ins-rollen-bringen.html&#34;&gt;kooperativen Lagers&lt;/a&gt;

.
Wie jede andere Lizenz muß man sie erwerben, man bekommt sie nicht einfach
so. Lizenzen kompetetiver Spieler bekommt man entweder gar nicht (weil die
Lizenz nicht verkäuflich ist), oder man muß sie für Geld kaufen. Lizenzen
nach der GPL bekommt man, indem man die Spielregeln des kooperativen Lagers
anerkennt und sie befolgt. Indem man sie nicht verfolgt, verliert man in dem
Moment, in dem man dies tut, die durch die Lizenz zugesicherten
Nutzungsrechte.&lt;/p&gt;
&lt;p&gt;Sobald man mit den Bedingungen der GPL wieder konform ist, hat man alle
durch die GPL zugesicherten Rechte wieder. Das ist furchtbar nett. Die
meisten kompetetiven Spieler gehen mit Lizenzverstößen weniger nachsichtig
um. Man stelle sich einmal vor, ein Hersteller von embedded Rechnern hätte
widerrechtlich ganz oder in Teilen Code von Microsoft in seinem Produkt
genutzt. Wie wäre die Reaktion wohl ausgefallen?&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://www.c0t0d0s0.org/index.php?url=archives/1989-GPL-vor-Gericht-durchgesetzt.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Jörg schreibt&lt;/a&gt;

,
die GPL sei viral. Das klingt so, als könne man sich an ihr anstecken. Das
ist Unsinn. Entweder entscheidet man sich in einem Projekt, Code zu
verwenden der unter der GPL steht oder man läßt es sein. Aller Code, der
unter der GPL steht, ist klar als solcher erkennbar: Er muß mit einer Kopie
der GPL zusammen verbreitet werden, und diese Datei heißt LICENSE.&lt;/p&gt;
&lt;p&gt;Entweder nimmt man fremden Code in seinem Projekt auf - dann muß man eine
Lizenz erwerben, die einem diese Nutzung fremden Codes in seinem Projekt
erlaubt. Oder man tut es nicht. Oder man integriert fremden Code &amp;ldquo;aus
Versehen&amp;rdquo; in seinem Projekt. Dann sollte man die Softwareentwicklung
aufgeben, weil man seine Codebasis nicht mehr unter Kontrolle hat und
genauso leicht etwa richtiger Schadcode &amp;ldquo;aus Versehen&amp;rdquo; Bestandteil des
Projektes werden könnte.&lt;/p&gt;
&lt;p&gt;Selbst wenn man &amp;ldquo;aus Versehen&amp;rdquo; GPL-Code in seinem eigenen Projekt
integriert, kann man durch die GPL keine Eigentumsrechte an seinem eigenen
geistigen Eigentum verlieren: Das Recht, den GPL-Code zu nutzen erlischt,
solange man mit den Bedingungen der GPL nicht konform geht. Man kann also in
aller Ruhe den GPL-Code aus seinem Projekt entfernen und das Produkt, das
nun komplett aus eigener geistiger Leistung besteht, weiter vertreiben. Die
GPL zwingt niemanden dazu, seine eigenen Eigentumsrechte aufzugeben.&lt;/p&gt;
&lt;p&gt;Die GPL zwingt nur zu einer einzigen Sache.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Sie zwingt einen dazu, sich zu entscheiden zwischen dem kompetetiven und
dem kooperativen Lager, und sie zwingt die Spieler im kooperativen Lager,
die Regeln der Kooperation einzuhalten.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Die GPL hält die Spieler im kooperativen Lagen ehrlich und fair. Damit macht
sie eine dauerhafte Kooperation überhaupt erst möglich. Sie benutzt dazu das
Urheberrecht, eigentlich ein Instrument des kompetetiven Lagers. Ohne dies
könnte die GPL nicht existieren, denn sie wäre nicht durchsetzbar. Das macht
die GPL zu einem faszinierend einfachen und scheinbar widersprüchlichem
Konstrukt: Gäbe es das kompetetive Lager nicht, wäre das Urheberrecht
obsolet und mit dem Erlöschen der Notwendigkeit für die GPL als
Schutzmechanismus für die
&lt;a href=&#34;http://de.wikipedia.org/wiki/Allmende&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Code-Allmende&lt;/a&gt;

 gegen das kompetetive
Lager löst sie sich dann auch sofort Rückstandsfrei auf.&lt;/p&gt;
&lt;p&gt;Die GPL vermeidet durch das Erzwingen des
&lt;a href=&#34;http://de.wikipedia.org/wiki/Quid_pro_quo&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Quid Pro Quo&lt;/a&gt;

 den
Konstruktionsfehler, den Lizenzen wie etwa die BSD Lizenz haben. Dort kommt
es immer wieder vor, daß Firmen Quelltext nehmen, geringfügig verbessern und
zur Grundlage ihres Geschäftsbetriebes machen, ohne ihre eigene Leistung der
Gemeinschaft  wieder zur Verfügung zu stellen, auf deren Vorleistungen sie
ihren Betrieb gründen. Die GPL ist im Gegensatz zu solchen Lizenzen
&lt;a href=&#34;http://de.wikipedia.org/wiki/Nachhaltigkeit&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;nachhaltig (&lt;em&gt;im Sinne einer &amp;ldquo;Strategie, die sich langfristig aufrecht erhalten lässt&amp;rdquo;.&lt;/em&gt;)&lt;/a&gt;


konstruiert.&lt;/p&gt;
&lt;p&gt;Ich schrieb schon
&lt;a href=&#34;https://blog.koehntopp.info/2005/01/05/ein-paar-ideologische-steine-ins-rollen-bringen.html&#34;&gt;damals&lt;/a&gt;

:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Probleme gibt es immer nur dann, wenn Mitglieder der kompetetiven Sphäre
meinen, sie könnten die Regeln der kooperativen Sphäre ignorieren, weil
die kooperativen Wertschöpfer untereinander das tun. Die Kompetetiven
bekommen dann nach den Regeln, die sie selbst geschaffen haben, auf die
Finger. Müssen sie, damit die kooperative Allmende erhalten werden kann.
Das ist ja genau der Grund, warum die Fackelträger der Kompetetiven
versuchen, kooperative Lizenzen mit Schutzmechanismen wie die GPL als
&amp;ldquo;viral&amp;rdquo;, &amp;ldquo;böse&amp;rdquo;, &amp;ldquo;illegal&amp;rdquo; oder sonstwie &amp;ldquo;ganz schlimm&amp;rdquo; darzustellen,
allen voran Microsoft und die von Microsoft bezahlten Astroturfer.
Lizenzen mit Schutzmechanismen schaffen einen geschützten Bereich, in dem
kooperatives Verhalten möglich ist und unter anderem durch niedrige
Transaktionskosten belohnt wird. Sie bestrafen Leute, die die Kooperation
verletzten, indem sie ihnen die viel höheren Transaktionskosten des
kompetetiven Bereichs auferlegen (&amp;ldquo;Zieh erst mal Deine Lizenzen gerade.&amp;rdquo;)
und sie von der Nutzung der freien, aber nicht kostenlosen kooperativen
Werte ausschließen (Der zu zahlende Preis ist die Einhaltung der Regeln
der Kooperation).&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Das ist das, was Harald Welte hier tut, und er hat zumindest meine
uneingeschränkte ideologische Unterstützung (und mein Geld, wenn er es
braucht): Er fordert die Bezahlung der Lizenzen ein, und hält so den Deal am
Leben. Das ist wichtig, ja sogar zentral.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>

